
ElectronicCanlender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004b38  08004b38  00014b38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c20  08004c20  00023edc  2**0
                  CONTENTS
  4 .ARM          00000000  08004c20  08004c20  00023edc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c20  08004c20  00023edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003edc  20000000  08004c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20003edc  08008b04  00023edc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044f8  08008b04  000244f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00023edc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d27b  00000000  00000000  00023f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ae  00000000  00000000  00041180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001151d  00000000  00000000  0004572e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  00056c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001710  00000000  00000000  00057c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5a6  00000000  00000000  00059398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022de8  00000000  00000000  0007493e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009076f  00000000  00000000  00097726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127e95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b8  00000000  00000000  00127ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20003edc 	.word	0x20003edc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b20 	.word	0x08004b20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20003ee0 	.word	0x20003ee0
 8000148:	08004b20 	.word	0x08004b20

0800014c <setDateAndTimeShowAlarmClock>:
	oled_clear();
}

// 闹钟模式显示
void setDateAndTimeShowAlarmClock(int settingFlag)
{
 800014c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// 闹钟设置（显示）
	oled_show_china(0,0,58, SSD1306_COLOR_WHITE);
 800014e:	2100      	movs	r1, #0
	oled_show_china(16,0,59, SSD1306_COLOR_WHITE);
	oled_show_china(32,0,56, SSD1306_COLOR_WHITE);
	oled_show_china(48,0,57, SSD1306_COLOR_WHITE);

	// 基本显示内容
	OLED_ShowNumber(0,20,2,1,8);
 8000150:	2508      	movs	r5, #8
	oled_show_china(0,0,58, SSD1306_COLOR_WHITE);
 8000152:	2301      	movs	r3, #1
 8000154:	223a      	movs	r2, #58	; 0x3a
 8000156:	4608      	mov	r0, r1
 8000158:	f000 ff24 	bl	8000fa4 <oled_show_china>
	oled_show_china(16,0,59, SSD1306_COLOR_WHITE);
 800015c:	2301      	movs	r3, #1
 800015e:	223b      	movs	r2, #59	; 0x3b
 8000160:	2100      	movs	r1, #0
 8000162:	2010      	movs	r0, #16
 8000164:	f000 ff1e 	bl	8000fa4 <oled_show_china>
	oled_show_china(32,0,56, SSD1306_COLOR_WHITE);
 8000168:	2301      	movs	r3, #1
 800016a:	2238      	movs	r2, #56	; 0x38
 800016c:	2100      	movs	r1, #0
 800016e:	2020      	movs	r0, #32
 8000170:	f000 ff18 	bl	8000fa4 <oled_show_china>
	oled_show_china(48,0,57, SSD1306_COLOR_WHITE);
 8000174:	2301      	movs	r3, #1
 8000176:	2239      	movs	r2, #57	; 0x39
 8000178:	2100      	movs	r1, #0
 800017a:	2030      	movs	r0, #48	; 0x30
 800017c:	f000 ff12 	bl	8000fa4 <oled_show_china>
	OLED_ShowNumber(10,20,0,1,8);
	if(tempArray[0] > 9)
 8000180:	4c64      	ldr	r4, [pc, #400]	; (8000314 <setDateAndTimeShowAlarmClock+0x1c8>)
	OLED_ShowNumber(0,20,2,1,8);
 8000182:	2301      	movs	r3, #1
 8000184:	2202      	movs	r2, #2
 8000186:	2114      	movs	r1, #20
 8000188:	2000      	movs	r0, #0
 800018a:	9500      	str	r5, [sp, #0]
 800018c:	f000 ff9a 	bl	80010c4 <OLED_ShowNumber>
	OLED_ShowNumber(10,20,0,1,8);
 8000190:	2301      	movs	r3, #1
 8000192:	2200      	movs	r2, #0
 8000194:	2114      	movs	r1, #20
 8000196:	200a      	movs	r0, #10
 8000198:	9500      	str	r5, [sp, #0]
 800019a:	f000 ff93 	bl	80010c4 <OLED_ShowNumber>
	if(tempArray[0] > 9)
 800019e:	7823      	ldrb	r3, [r4, #0]
 80001a0:	2b09      	cmp	r3, #9
 80001a2:	d963      	bls.n	800026c <setDateAndTimeShowAlarmClock+0x120>
	{
		OLED_ShowNumber(20,20,tempArray[0],2,16);
 80001a4:	2310      	movs	r3, #16
 80001a6:	2114      	movs	r1, #20
 80001a8:	9300      	str	r3, [sp, #0]
 80001aa:	4608      	mov	r0, r1
 80001ac:	2302      	movs	r3, #2
 80001ae:	7822      	ldrb	r2, [r4, #0]
	{
		OLED_ShowNumber(20,20,0,1,8);
		OLED_ShowNumber(30,20,tempArray[0],1,8);
	}

	oled_show_char(40, 20,'.', &fontone, SSD1306_COLOR_WHITE);
 80001b0:	2501      	movs	r5, #1
		OLED_ShowNumber(30,20,tempArray[0],1,8);
 80001b2:	f000 ff87 	bl	80010c4 <OLED_ShowNumber>
	oled_show_char(40, 20,'.', &fontone, SSD1306_COLOR_WHITE);
 80001b6:	4b58      	ldr	r3, [pc, #352]	; (8000318 <setDateAndTimeShowAlarmClock+0x1cc>)
 80001b8:	222e      	movs	r2, #46	; 0x2e
 80001ba:	2114      	movs	r1, #20
 80001bc:	2028      	movs	r0, #40	; 0x28
 80001be:	9500      	str	r5, [sp, #0]
 80001c0:	f000 fea4 	bl	8000f0c <oled_show_char>

	if(tempArray[1] > 9)
 80001c4:	7863      	ldrb	r3, [r4, #1]
 80001c6:	2b09      	cmp	r3, #9
 80001c8:	d95d      	bls.n	8000286 <setDateAndTimeShowAlarmClock+0x13a>
	{
		OLED_ShowNumber(50,20,tempArray[1],2,16);
 80001ca:	2310      	movs	r3, #16
 80001cc:	2114      	movs	r1, #20
 80001ce:	9300      	str	r3, [sp, #0]
 80001d0:	2032      	movs	r0, #50	; 0x32
 80001d2:	2302      	movs	r3, #2
 80001d4:	7862      	ldrb	r2, [r4, #1]
	{
		OLED_ShowNumber(50,20,0,1,8);
		OLED_ShowNumber(60,20,tempArray[1],1,8);
	}

	oled_show_char(70, 20,'.', &fontone, SSD1306_COLOR_WHITE);
 80001d6:	2501      	movs	r5, #1
		OLED_ShowNumber(60,20,tempArray[1],1,8);
 80001d8:	f000 ff74 	bl	80010c4 <OLED_ShowNumber>
	oled_show_char(70, 20,'.', &fontone, SSD1306_COLOR_WHITE);
 80001dc:	4b4e      	ldr	r3, [pc, #312]	; (8000318 <setDateAndTimeShowAlarmClock+0x1cc>)
 80001de:	222e      	movs	r2, #46	; 0x2e
 80001e0:	2114      	movs	r1, #20
 80001e2:	2046      	movs	r0, #70	; 0x46
 80001e4:	9500      	str	r5, [sp, #0]
 80001e6:	f000 fe91 	bl	8000f0c <oled_show_char>

	if(tempArray[2] > 9)
 80001ea:	78a3      	ldrb	r3, [r4, #2]
 80001ec:	2b09      	cmp	r3, #9
 80001ee:	d958      	bls.n	80002a2 <setDateAndTimeShowAlarmClock+0x156>
	{
		OLED_ShowNumber(80,20,tempArray[2],2,16);
 80001f0:	2310      	movs	r3, #16
 80001f2:	2114      	movs	r1, #20
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2050      	movs	r0, #80	; 0x50
 80001f8:	2302      	movs	r3, #2
 80001fa:	78a2      	ldrb	r2, [r4, #2]
	}
	else
	{
		OLED_ShowNumber(80,20,0,1,8);
		OLED_ShowNumber(90,20,tempArray[2],1,8);
 80001fc:	f000 ff62 	bl	80010c4 <OLED_ShowNumber>
	}

	if(tempArray[3] > 9)
 8000200:	78e3      	ldrb	r3, [r4, #3]
 8000202:	2b09      	cmp	r3, #9
 8000204:	d95b      	bls.n	80002be <setDateAndTimeShowAlarmClock+0x172>
	{
		OLED_ShowNumber(20,40,tempArray[3],2,16);
 8000206:	2310      	movs	r3, #16
 8000208:	2128      	movs	r1, #40	; 0x28
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	2014      	movs	r0, #20
 800020e:	2302      	movs	r3, #2
 8000210:	78e2      	ldrb	r2, [r4, #3]
	}
	else
	{
		OLED_ShowNumber(20,40,0,1,8);
		OLED_ShowNumber(30,40,tempArray[3],1,8);
 8000212:	f000 ff57 	bl	80010c4 <OLED_ShowNumber>
	}

	oled_show_char(40, 40,':', &fontone, SSD1306_COLOR_WHITE);
 8000216:	2501      	movs	r5, #1
 8000218:	2128      	movs	r1, #40	; 0x28
 800021a:	4b3f      	ldr	r3, [pc, #252]	; (8000318 <setDateAndTimeShowAlarmClock+0x1cc>)
 800021c:	223a      	movs	r2, #58	; 0x3a
 800021e:	4608      	mov	r0, r1
 8000220:	9500      	str	r5, [sp, #0]
 8000222:	f000 fe73 	bl	8000f0c <oled_show_char>

	if(tempArray[4] > 9)
 8000226:	7923      	ldrb	r3, [r4, #4]
 8000228:	2b09      	cmp	r3, #9
 800022a:	d956      	bls.n	80002da <setDateAndTimeShowAlarmClock+0x18e>
	{
		OLED_ShowNumber(50,40,tempArray[4],2,16);
 800022c:	2310      	movs	r3, #16
 800022e:	2128      	movs	r1, #40	; 0x28
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2032      	movs	r0, #50	; 0x32
 8000234:	2302      	movs	r3, #2
 8000236:	7922      	ldrb	r2, [r4, #4]
	{
		OLED_ShowNumber(50,40,0,1,8);
		OLED_ShowNumber(60,40,tempArray[4],1,8);
	}

	oled_show_char(70, 40,':', &fontone, SSD1306_COLOR_WHITE);
 8000238:	2501      	movs	r5, #1
		OLED_ShowNumber(60,40,tempArray[4],1,8);
 800023a:	f000 ff43 	bl	80010c4 <OLED_ShowNumber>
	oled_show_char(70, 40,':', &fontone, SSD1306_COLOR_WHITE);
 800023e:	4b36      	ldr	r3, [pc, #216]	; (8000318 <setDateAndTimeShowAlarmClock+0x1cc>)
 8000240:	223a      	movs	r2, #58	; 0x3a
 8000242:	2128      	movs	r1, #40	; 0x28
 8000244:	2046      	movs	r0, #70	; 0x46
 8000246:	9500      	str	r5, [sp, #0]
 8000248:	f000 fe60 	bl	8000f0c <oled_show_char>

	if(tempArray[5] > 9)
 800024c:	7963      	ldrb	r3, [r4, #5]
 800024e:	2b09      	cmp	r3, #9
 8000250:	d951      	bls.n	80002f6 <setDateAndTimeShowAlarmClock+0x1aa>
	{
		OLED_ShowNumber(80,40,tempArray[5],2,16);
 8000252:	2310      	movs	r3, #16
 8000254:	2128      	movs	r1, #40	; 0x28
 8000256:	9300      	str	r3, [sp, #0]
 8000258:	2050      	movs	r0, #80	; 0x50
 800025a:	2302      	movs	r3, #2
 800025c:	7962      	ldrb	r2, [r4, #5]
	}
	else
	{
		OLED_ShowNumber(80,40,0,1,8);
		OLED_ShowNumber(90,40,tempArray[5],1,8);
 800025e:	f000 ff31 	bl	80010c4 <OLED_ShowNumber>
	}

	oled_update_screen();
}
 8000262:	b002      	add	sp, #8
 8000264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	oled_update_screen();
 8000268:	f000 be10 	b.w	8000e8c <oled_update_screen>
		OLED_ShowNumber(20,20,0,1,8);
 800026c:	2114      	movs	r1, #20
 800026e:	2301      	movs	r3, #1
 8000270:	4608      	mov	r0, r1
 8000272:	2200      	movs	r2, #0
 8000274:	9500      	str	r5, [sp, #0]
 8000276:	f000 ff25 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(30,20,tempArray[0],1,8);
 800027a:	2301      	movs	r3, #1
 800027c:	2114      	movs	r1, #20
 800027e:	201e      	movs	r0, #30
 8000280:	7822      	ldrb	r2, [r4, #0]
 8000282:	9500      	str	r5, [sp, #0]
 8000284:	e794      	b.n	80001b0 <setDateAndTimeShowAlarmClock+0x64>
		OLED_ShowNumber(50,20,0,1,8);
 8000286:	2608      	movs	r6, #8
 8000288:	462b      	mov	r3, r5
 800028a:	2200      	movs	r2, #0
 800028c:	2114      	movs	r1, #20
 800028e:	2032      	movs	r0, #50	; 0x32
 8000290:	9600      	str	r6, [sp, #0]
 8000292:	f000 ff17 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(60,20,tempArray[1],1,8);
 8000296:	462b      	mov	r3, r5
 8000298:	2114      	movs	r1, #20
 800029a:	203c      	movs	r0, #60	; 0x3c
 800029c:	7862      	ldrb	r2, [r4, #1]
 800029e:	9600      	str	r6, [sp, #0]
 80002a0:	e799      	b.n	80001d6 <setDateAndTimeShowAlarmClock+0x8a>
		OLED_ShowNumber(80,20,0,1,8);
 80002a2:	2608      	movs	r6, #8
 80002a4:	462b      	mov	r3, r5
 80002a6:	2200      	movs	r2, #0
 80002a8:	2114      	movs	r1, #20
 80002aa:	2050      	movs	r0, #80	; 0x50
 80002ac:	9600      	str	r6, [sp, #0]
 80002ae:	f000 ff09 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(90,20,tempArray[2],1,8);
 80002b2:	462b      	mov	r3, r5
 80002b4:	2114      	movs	r1, #20
 80002b6:	205a      	movs	r0, #90	; 0x5a
 80002b8:	78a2      	ldrb	r2, [r4, #2]
 80002ba:	9600      	str	r6, [sp, #0]
 80002bc:	e79e      	b.n	80001fc <setDateAndTimeShowAlarmClock+0xb0>
		OLED_ShowNumber(20,40,0,1,8);
 80002be:	2508      	movs	r5, #8
 80002c0:	2301      	movs	r3, #1
 80002c2:	2200      	movs	r2, #0
 80002c4:	2128      	movs	r1, #40	; 0x28
 80002c6:	2014      	movs	r0, #20
 80002c8:	9500      	str	r5, [sp, #0]
 80002ca:	f000 fefb 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(30,40,tempArray[3],1,8);
 80002ce:	2301      	movs	r3, #1
 80002d0:	2128      	movs	r1, #40	; 0x28
 80002d2:	201e      	movs	r0, #30
 80002d4:	78e2      	ldrb	r2, [r4, #3]
 80002d6:	9500      	str	r5, [sp, #0]
 80002d8:	e79b      	b.n	8000212 <setDateAndTimeShowAlarmClock+0xc6>
		OLED_ShowNumber(50,40,0,1,8);
 80002da:	2608      	movs	r6, #8
 80002dc:	462b      	mov	r3, r5
 80002de:	2200      	movs	r2, #0
 80002e0:	2128      	movs	r1, #40	; 0x28
 80002e2:	2032      	movs	r0, #50	; 0x32
 80002e4:	9600      	str	r6, [sp, #0]
 80002e6:	f000 feed 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(60,40,tempArray[4],1,8);
 80002ea:	462b      	mov	r3, r5
 80002ec:	2128      	movs	r1, #40	; 0x28
 80002ee:	203c      	movs	r0, #60	; 0x3c
 80002f0:	7922      	ldrb	r2, [r4, #4]
 80002f2:	9600      	str	r6, [sp, #0]
 80002f4:	e7a0      	b.n	8000238 <setDateAndTimeShowAlarmClock+0xec>
		OLED_ShowNumber(80,40,0,1,8);
 80002f6:	2608      	movs	r6, #8
 80002f8:	462b      	mov	r3, r5
 80002fa:	2200      	movs	r2, #0
 80002fc:	2128      	movs	r1, #40	; 0x28
 80002fe:	2050      	movs	r0, #80	; 0x50
 8000300:	9600      	str	r6, [sp, #0]
 8000302:	f000 fedf 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(90,40,tempArray[5],1,8);
 8000306:	462b      	mov	r3, r5
 8000308:	2128      	movs	r1, #40	; 0x28
 800030a:	205a      	movs	r0, #90	; 0x5a
 800030c:	7962      	ldrb	r2, [r4, #5]
 800030e:	9600      	str	r6, [sp, #0]
 8000310:	e7a5      	b.n	800025e <setDateAndTimeShowAlarmClock+0x112>
 8000312:	bf00      	nop
 8000314:	20003ec8 	.word	0x20003ec8
 8000318:	20003f4c 	.word	0x20003f4c

0800031c <extranceAlarmClock>:
{
 800031c:	b538      	push	{r3, r4, r5, lr}
	oled_clear();
 800031e:	f000 fdcf 	bl	8000ec0 <oled_clear>
	setDateAndTimeShowAlarmClock(0);		// 显示装载的初值
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ff12 	bl	800014c <setDateAndTimeShowAlarmClock>
	int settingFlag = 1;
 8000328:	2401      	movs	r4, #1
			switch(readKeyValue())
 800032a:	f000 fa05 	bl	8000738 <readKeyValue>
 800032e:	3801      	subs	r0, #1
 8000330:	2803      	cmp	r0, #3
 8000332:	d808      	bhi.n	8000346 <extranceAlarmClock+0x2a>
 8000334:	e8df f000 	tbb	[pc, r0]
 8000338:	1a1b1604 	.word	0x1a1b1604
		settingFlag++;
 800033c:	461c      	mov	r4, r3
 800033e:	e7f4      	b.n	800032a <extranceAlarmClock+0xe>
				Increase(settingFlag);
 8000340:	4620      	mov	r0, r4
 8000342:	f001 f987 	bl	8001654 <Increase>
				oled_clear();
 8000346:	f000 fdbb 	bl	8000ec0 <oled_clear>
				setDateAndTimeShowAlarmClock(settingFlag);
 800034a:	4620      	mov	r0, r4
 800034c:	f7ff fefe 	bl	800014c <setDateAndTimeShowAlarmClock>
				break;
 8000350:	2500      	movs	r5, #0
			switch(returnFlagBluetooth())
 8000352:	f000 fbe1 	bl	8000b18 <returnFlagBluetooth>
 8000356:	3806      	subs	r0, #6
 8000358:	2803      	cmp	r0, #3
 800035a:	d836      	bhi.n	80003ca <extranceAlarmClock+0xae>
 800035c:	e8df f000 	tbb	[pc, r0]
 8000360:	311a1609 	.word	0x311a1609
				Decrease(settingFlag);
 8000364:	4620      	mov	r0, r4
 8000366:	f001 fa2b 	bl	80017c0 <Decrease>
				oled_clear();
 800036a:	e7ec      	b.n	8000346 <extranceAlarmClock+0x2a>
				settingFlag -= 2;
 800036c:	3c02      	subs	r4, #2
			switch(readKeyValue())
 800036e:	2501      	movs	r5, #1
 8000370:	e7ef      	b.n	8000352 <extranceAlarmClock+0x36>
				Increase(settingFlag);
 8000372:	4620      	mov	r0, r4
 8000374:	f001 f96e 	bl	8001654 <Increase>
				oled_clear();
 8000378:	f000 fda2 	bl	8000ec0 <oled_clear>
				setDateAndTimeShow(settingFlag);
 800037c:	4620      	mov	r0, r4
 800037e:	f000 ffb5 	bl	80012ec <setDateAndTimeShow>
				clearBluetoothCommand();
 8000382:	f000 fbcf 	bl	8000b24 <clearBluetoothCommand>
		while(settedFlag == 0)
 8000386:	2d00      	cmp	r5, #0
 8000388:	d0cf      	beq.n	800032a <extranceAlarmClock+0xe>
 800038a:	e005      	b.n	8000398 <extranceAlarmClock+0x7c>
				Decrease(settingFlag);
 800038c:	4620      	mov	r0, r4
 800038e:	f001 fa17 	bl	80017c0 <Decrease>
 8000392:	e7f1      	b.n	8000378 <extranceAlarmClock+0x5c>
				clearBluetoothCommand();
 8000394:	f000 fbc6 	bl	8000b24 <clearBluetoothCommand>
	while((settingFlag < 7) && (settingFlag > 0))
 8000398:	2c05      	cmp	r4, #5
		settingFlag++;
 800039a:	f104 0301 	add.w	r3, r4, #1
	while((settingFlag < 7) && (settingFlag > 0))
 800039e:	d9cd      	bls.n	800033c <extranceAlarmClock+0x20>
	if(settingFlag > 0)
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	dd0a      	ble.n	80003ba <extranceAlarmClock+0x9e>
		selectSong();
 80003a4:	f001 ff92 	bl	80022cc <selectSong>
		for(int i = 0; i < 6; i++)
 80003a8:	2300      	movs	r3, #0
			tempArrayAlarmClock[i] = tempArray[i];
 80003aa:	480c      	ldr	r0, [pc, #48]	; (80003dc <extranceAlarmClock+0xc0>)
 80003ac:	490c      	ldr	r1, [pc, #48]	; (80003e0 <extranceAlarmClock+0xc4>)
 80003ae:	5cc2      	ldrb	r2, [r0, r3]
 80003b0:	b2d2      	uxtb	r2, r2
 80003b2:	54ca      	strb	r2, [r1, r3]
		for(int i = 0; i < 6; i++)
 80003b4:	3301      	adds	r3, #1
 80003b6:	2b06      	cmp	r3, #6
 80003b8:	d1f9      	bne.n	80003ae <extranceAlarmClock+0x92>
}
 80003ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	oled_clear();
 80003be:	f000 bd7f 	b.w	8000ec0 <oled_clear>
				clearBluetoothCommand();
 80003c2:	f000 fbaf 	bl	8000b24 <clearBluetoothCommand>
				settingFlag -= 2;
 80003c6:	3c02      	subs	r4, #2
		while(settedFlag == 0)
 80003c8:	e7e6      	b.n	8000398 <extranceAlarmClock+0x7c>
				clearBluetoothCommand();
 80003ca:	f000 fbab 	bl	8000b24 <clearBluetoothCommand>
				oled_clear();
 80003ce:	f000 fd77 	bl	8000ec0 <oled_clear>
				setDateAndTimeShowAlarmClock(settingFlag);
 80003d2:	4620      	mov	r0, r4
 80003d4:	f7ff feba 	bl	800014c <setDateAndTimeShowAlarmClock>
				break;
 80003d8:	e7d5      	b.n	8000386 <extranceAlarmClock+0x6a>
 80003da:	bf00      	nop
 80003dc:	20003ec8 	.word	0x20003ec8
 80003e0:	20003f5a 	.word	0x20003f5a

080003e4 <alarmClockReminder>:

// 闹钟提示
void alarmClockReminder(void)
{
 80003e4:	b513      	push	{r0, r1, r4, lr}
	// 闹钟提示
	oled_show_china(0,0,58, SSD1306_COLOR_WHITE);
 80003e6:	2100      	movs	r1, #0
	oled_show_china(32,0,66, SSD1306_COLOR_WHITE);
	oled_show_china(48,0,67, SSD1306_COLOR_WHITE);

	// 按KEY4关闭闹钟
	oled_show_china(0,20,68, SSD1306_COLOR_WHITE);
	oled_show_str(16,20,"KEY4",&fontone,SSD1306_COLOR_WHITE);
 80003e8:	2401      	movs	r4, #1
	oled_show_china(0,0,58, SSD1306_COLOR_WHITE);
 80003ea:	2301      	movs	r3, #1
 80003ec:	223a      	movs	r2, #58	; 0x3a
 80003ee:	4608      	mov	r0, r1
 80003f0:	f000 fdd8 	bl	8000fa4 <oled_show_china>
	oled_show_china(16,0,59, SSD1306_COLOR_WHITE);
 80003f4:	2301      	movs	r3, #1
 80003f6:	223b      	movs	r2, #59	; 0x3b
 80003f8:	2100      	movs	r1, #0
 80003fa:	2010      	movs	r0, #16
 80003fc:	f000 fdd2 	bl	8000fa4 <oled_show_china>
	oled_show_china(32,0,66, SSD1306_COLOR_WHITE);
 8000400:	2301      	movs	r3, #1
 8000402:	2242      	movs	r2, #66	; 0x42
 8000404:	2100      	movs	r1, #0
 8000406:	2020      	movs	r0, #32
 8000408:	f000 fdcc 	bl	8000fa4 <oled_show_china>
	oled_show_china(48,0,67, SSD1306_COLOR_WHITE);
 800040c:	2301      	movs	r3, #1
 800040e:	2243      	movs	r2, #67	; 0x43
 8000410:	2100      	movs	r1, #0
 8000412:	2030      	movs	r0, #48	; 0x30
 8000414:	f000 fdc6 	bl	8000fa4 <oled_show_china>
	oled_show_china(0,20,68, SSD1306_COLOR_WHITE);
 8000418:	2301      	movs	r3, #1
 800041a:	2244      	movs	r2, #68	; 0x44
 800041c:	2114      	movs	r1, #20
 800041e:	2000      	movs	r0, #0
 8000420:	f000 fdc0 	bl	8000fa4 <oled_show_china>
	oled_show_str(16,20,"KEY4",&fontone,SSD1306_COLOR_WHITE);
 8000424:	2114      	movs	r1, #20
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <alarmClockReminder+0x88>)
 8000428:	4a11      	ldr	r2, [pc, #68]	; (8000470 <alarmClockReminder+0x8c>)
 800042a:	9400      	str	r4, [sp, #0]
 800042c:	2010      	movs	r0, #16
 800042e:	f000 fe21 	bl	8001074 <oled_show_str>
	oled_show_china(48,20,60, SSD1306_COLOR_WHITE);
 8000432:	4623      	mov	r3, r4
 8000434:	223c      	movs	r2, #60	; 0x3c
 8000436:	2114      	movs	r1, #20
 8000438:	2030      	movs	r0, #48	; 0x30
 800043a:	f000 fdb3 	bl	8000fa4 <oled_show_china>
	oled_show_china(64,20,61, SSD1306_COLOR_WHITE);
 800043e:	4623      	mov	r3, r4
 8000440:	223d      	movs	r2, #61	; 0x3d
 8000442:	2114      	movs	r1, #20
 8000444:	2040      	movs	r0, #64	; 0x40
 8000446:	f000 fdad 	bl	8000fa4 <oled_show_china>
	oled_show_china(80,20,58, SSD1306_COLOR_WHITE);
 800044a:	4623      	mov	r3, r4
 800044c:	223a      	movs	r2, #58	; 0x3a
 800044e:	2114      	movs	r1, #20
 8000450:	2050      	movs	r0, #80	; 0x50
 8000452:	f000 fda7 	bl	8000fa4 <oled_show_china>
	oled_show_china(96,20,59, SSD1306_COLOR_WHITE);
 8000456:	4623      	mov	r3, r4
 8000458:	223b      	movs	r2, #59	; 0x3b
 800045a:	2114      	movs	r1, #20
 800045c:	2060      	movs	r0, #96	; 0x60
 800045e:	f000 fda1 	bl	8000fa4 <oled_show_china>
	oled_update_screen();
}
 8000462:	b002      	add	sp, #8
 8000464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	oled_update_screen();
 8000468:	f000 bd10 	b.w	8000e8c <oled_update_screen>
 800046c:	20003f4c 	.word	0x20003f4c
 8000470:	08004bdc 	.word	0x08004bdc

08000474 <checkAlarmClock>:

// 检查闹钟时间到否
void checkAlarmClock(void)
{
 8000474:	b537      	push	{r0, r1, r2, r4, r5, lr}
	RTC_TimeTypeDef RTC_TimeStructure;
	RTC_DateTypeDef RTC_DateStructure;
	HAL_RTC_GetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8000476:	2200      	movs	r2, #0
 8000478:	4669      	mov	r1, sp
 800047a:	4823      	ldr	r0, [pc, #140]	; (8000508 <checkAlarmClock+0x94>)
 800047c:	f003 fd50 	bl	8003f20 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_DateStructure, RTC_FORMAT_BIN);
 8000480:	2200      	movs	r2, #0
 8000482:	a901      	add	r1, sp, #4
 8000484:	4820      	ldr	r0, [pc, #128]	; (8000508 <checkAlarmClock+0x94>)
 8000486:	f003 fe61 	bl	800414c <HAL_RTC_GetDate>

	if((RTC_DateStructure.Year == tempArrayAlarmClock[0]) && (RTC_DateStructure.Month == tempArrayAlarmClock[1]) &&
 800048a:	4b20      	ldr	r3, [pc, #128]	; (800050c <checkAlarmClock+0x98>)
 800048c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	4291      	cmp	r1, r2
 8000494:	d131      	bne.n	80004fa <checkAlarmClock+0x86>
 8000496:	785a      	ldrb	r2, [r3, #1]
 8000498:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800049c:	4291      	cmp	r1, r2
 800049e:	d12c      	bne.n	80004fa <checkAlarmClock+0x86>
			(RTC_DateStructure.Date == tempArrayAlarmClock[2]) && (RTC_TimeStructure.Hours == tempArrayAlarmClock[3]) &&
 80004a0:	789a      	ldrb	r2, [r3, #2]
	if((RTC_DateStructure.Year == tempArrayAlarmClock[0]) && (RTC_DateStructure.Month == tempArrayAlarmClock[1]) &&
 80004a2:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d127      	bne.n	80004fa <checkAlarmClock+0x86>
			(RTC_DateStructure.Date == tempArrayAlarmClock[2]) && (RTC_TimeStructure.Hours == tempArrayAlarmClock[3]) &&
 80004aa:	78da      	ldrb	r2, [r3, #3]
 80004ac:	f89d 1000 	ldrb.w	r1, [sp]
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d122      	bne.n	80004fa <checkAlarmClock+0x86>
			(RTC_TimeStructure.Minutes == tempArrayAlarmClock[4]) && (RTC_TimeStructure.Seconds == tempArrayAlarmClock[5]))
 80004b4:	791a      	ldrb	r2, [r3, #4]
			(RTC_DateStructure.Date == tempArrayAlarmClock[2]) && (RTC_TimeStructure.Hours == tempArrayAlarmClock[3]) &&
 80004b6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d11d      	bne.n	80004fa <checkAlarmClock+0x86>
			(RTC_TimeStructure.Minutes == tempArrayAlarmClock[4]) && (RTC_TimeStructure.Seconds == tempArrayAlarmClock[5]))
 80004be:	795b      	ldrb	r3, [r3, #5]
 80004c0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d118      	bne.n	80004fa <checkAlarmClock+0x86>
	{
		alarmClockMusic();
 80004c8:	f001 fe60 	bl	800218c <alarmClockMusic>
		oled_clear();
 80004cc:	f000 fcf8 	bl	8000ec0 <oled_clear>
		clearBluetoothCommand();
		while((keyValue != 4) && (commandFromBluetooth != 10))
		{
			LED_Toggle();		// LED闪烁
			alarmClockReminder();		// 屏幕显示
			keyValue = readKeyValue();
 80004d0:	f000 f932 	bl	8000738 <readKeyValue>
 80004d4:	4605      	mov	r5, r0
			commandFromBluetooth = returnFlagBluetooth();
 80004d6:	f000 fb1f 	bl	8000b18 <returnFlagBluetooth>
 80004da:	4604      	mov	r4, r0
			clearBluetoothCommand();
 80004dc:	f000 fb22 	bl	8000b24 <clearBluetoothCommand>
		while((keyValue != 4) && (commandFromBluetooth != 10))
 80004e0:	2d04      	cmp	r5, #4
 80004e2:	d001      	beq.n	80004e8 <checkAlarmClock+0x74>
 80004e4:	2c0a      	cmp	r4, #10
 80004e6:	d10a      	bne.n	80004fe <checkAlarmClock+0x8a>
		}

		oled_clear();
 80004e8:	f000 fcea 	bl	8000ec0 <oled_clear>
		LED_SET_OFF;
 80004ec:	2200      	movs	r2, #0
 80004ee:	2102      	movs	r1, #2
 80004f0:	4807      	ldr	r0, [pc, #28]	; (8000510 <checkAlarmClock+0x9c>)
 80004f2:	f002 fe31 	bl	8003158 <HAL_GPIO_WritePin>
		stopMusic();
 80004f6:	f001 fd01 	bl	8001efc <stopMusic>
	}
}
 80004fa:	b003      	add	sp, #12
 80004fc:	bd30      	pop	{r4, r5, pc}
			LED_Toggle();		// LED闪烁
 80004fe:	f000 f97d 	bl	80007fc <LED_Toggle>
			alarmClockReminder();		// 屏幕显示
 8000502:	f7ff ff6f 	bl	80003e4 <alarmClockReminder>
 8000506:	e7e3      	b.n	80004d0 <checkAlarmClock+0x5c>
 8000508:	20004368 	.word	0x20004368
 800050c:	20003f5a 	.word	0x20003f5a
 8000510:	40010c00 	.word	0x40010c00

08000514 <screen1>:
 */

#include "changeScreen.h"

void screen1(void)
{
 8000514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// 温度
	oled_show_china(0,0,35, SSD1306_COLOR_WHITE);
 8000516:	2100      	movs	r1, #0
	oled_show_china(16,0,36, SSD1306_COLOR_WHITE);
	oled_show_str(32, 0, ":", &fontone, SSD1306_COLOR_WHITE);
 8000518:	2401      	movs	r4, #1
	OLED_ShowNumber(40,0,flagTemp,2,16);
 800051a:	2510      	movs	r5, #16
	oled_show_str(32, 0, ":", &fontone, SSD1306_COLOR_WHITE);
 800051c:	4f1e      	ldr	r7, [pc, #120]	; (8000598 <screen1+0x84>)
 800051e:	4e1f      	ldr	r6, [pc, #124]	; (800059c <screen1+0x88>)
	oled_show_china(0,0,35, SSD1306_COLOR_WHITE);
 8000520:	2301      	movs	r3, #1
 8000522:	2223      	movs	r2, #35	; 0x23
 8000524:	4608      	mov	r0, r1
 8000526:	f000 fd3d 	bl	8000fa4 <oled_show_china>
	oled_show_china(16,0,36, SSD1306_COLOR_WHITE);
 800052a:	2301      	movs	r3, #1
 800052c:	2224      	movs	r2, #36	; 0x24
 800052e:	2100      	movs	r1, #0
 8000530:	2010      	movs	r0, #16
 8000532:	f000 fd37 	bl	8000fa4 <oled_show_china>
	oled_show_str(32, 0, ":", &fontone, SSD1306_COLOR_WHITE);
 8000536:	463b      	mov	r3, r7
 8000538:	4632      	mov	r2, r6
 800053a:	2100      	movs	r1, #0
 800053c:	9400      	str	r4, [sp, #0]
 800053e:	2020      	movs	r0, #32
 8000540:	f000 fd98 	bl	8001074 <oled_show_str>
	OLED_ShowNumber(40,0,flagTemp,2,16);
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <screen1+0x8c>)
 8000546:	2100      	movs	r1, #0
 8000548:	781a      	ldrb	r2, [r3, #0]
 800054a:	2028      	movs	r0, #40	; 0x28
 800054c:	2302      	movs	r3, #2
 800054e:	9500      	str	r5, [sp, #0]
 8000550:	f000 fdb8 	bl	80010c4 <OLED_ShowNumber>

	// 湿度
	oled_show_china(0,20,37, SSD1306_COLOR_WHITE);
 8000554:	4623      	mov	r3, r4
 8000556:	2225      	movs	r2, #37	; 0x25
 8000558:	2114      	movs	r1, #20
 800055a:	2000      	movs	r0, #0
 800055c:	f000 fd22 	bl	8000fa4 <oled_show_china>
	oled_show_china(16,20,36, SSD1306_COLOR_WHITE);
 8000560:	4623      	mov	r3, r4
 8000562:	2224      	movs	r2, #36	; 0x24
 8000564:	2114      	movs	r1, #20
 8000566:	4628      	mov	r0, r5
 8000568:	f000 fd1c 	bl	8000fa4 <oled_show_china>
	oled_show_str(32, 20, ":", &fontone, SSD1306_COLOR_WHITE);
 800056c:	463b      	mov	r3, r7
 800056e:	4632      	mov	r2, r6
 8000570:	2114      	movs	r1, #20
 8000572:	9400      	str	r4, [sp, #0]
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fd7d 	bl	8001074 <oled_show_str>
	OLED_ShowNumber(40,20,flagHumi,2,16);
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <screen1+0x90>)
 800057c:	2114      	movs	r1, #20
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	2028      	movs	r0, #40	; 0x28
 8000582:	2302      	movs	r3, #2
 8000584:	9500      	str	r5, [sp, #0]
 8000586:	f000 fd9d 	bl	80010c4 <OLED_ShowNumber>

	// 天气
	showWeather();
 800058a:	f000 fad1 	bl	8000b30 <showWeather>

	oled_update_screen();
}
 800058e:	b003      	add	sp, #12
 8000590:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	oled_update_screen();
 8000594:	f000 bc7a 	b.w	8000e8c <oled_update_screen>
 8000598:	20003f4c 	.word	0x20003f4c
 800059c:	08004bc1 	.word	0x08004bc1
 80005a0:	20003ec2 	.word	0x20003ec2
 80005a4:	20003ec1 	.word	0x20003ec1

080005a8 <screen2>:

void screen2(void)
{
 80005a8:	b508      	push	{r3, lr}
	if(flagRun == 1)
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <screen2+0x2c>)
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	2a01      	cmp	r2, #1
 80005b0:	b2d3      	uxtb	r3, r2
 80005b2:	d104      	bne.n	80005be <screen2+0x16>
	{
		oled_show_china(0,0,77, SSD1306_COLOR_WHITE);
 80005b4:	2100      	movs	r1, #0
 80005b6:	224d      	movs	r2, #77	; 0x4d
 80005b8:	4608      	mov	r0, r1
 80005ba:	f000 fcf3 	bl	8000fa4 <oled_show_china>
	}

	showMonth();
 80005be:	f000 faf1 	bl	8000ba4 <showMonth>
	showDay();
 80005c2:	f000 fb2f 	bl	8000c24 <showDay>
	showSolarTermsScreen2();
 80005c6:	f001 fb83 	bl	8001cd0 <showSolarTermsScreen2>

	oled_update_screen();
}
 80005ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	oled_update_screen();
 80005ce:	f000 bc5d 	b.w	8000e8c <oled_update_screen>
 80005d2:	bf00      	nop
 80005d4:	20003f57 	.word	0x20003f57

080005d8 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	2210      	movs	r2, #16
{
 80005da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005dc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	eb0d 0002 	add.w	r0, sp, r2
 80005e2:	2100      	movs	r1, #0
 80005e4:	f004 fa94 	bl	8004b10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005ea:	4d29      	ldr	r5, [pc, #164]	; (8000690 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005ee:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f0:	f042 0210 	orr.w	r2, r2, #16
 80005f4:	619a      	str	r2, [r3, #24]
 80005f6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005f8:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	f002 0210 	and.w	r2, r2, #16
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000606:	f042 0220 	orr.w	r2, r2, #32
 800060a:	619a      	str	r2, [r3, #24]
 800060c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000610:	f002 0220 	and.w	r2, r2, #32
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	4f1e      	ldr	r7, [pc, #120]	; (8000694 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	f042 0204 	orr.w	r2, r2, #4
 8000620:	619a      	str	r2, [r3, #24]
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	f002 0204 	and.w	r2, r2, #4
 8000628:	9202      	str	r2, [sp, #8]
 800062a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	699a      	ldr	r2, [r3, #24]
 800062e:	f042 0208 	orr.w	r2, r2, #8
 8000632:	619a      	str	r2, [r3, #24]
 8000634:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	9303      	str	r3, [sp, #12]
 800063e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000640:	f002 fd8a 	bl	8003158 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	4638      	mov	r0, r7
 8000648:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064e:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f002 fca2 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KEY4_Pin|MQ2_Pin;
 8000654:	2321      	movs	r3, #33	; 0x21
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	4628      	mov	r0, r5
 8000658:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065e:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f002 fc9a 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000664:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000666:	4628      	mov	r0, r5
 8000668:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	e9cd 4306 	strd	r4, r3, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000672:	f002 fc91 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8000676:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800067a:	4638      	mov	r0, r7
 800067c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000684:	f002 fc88 	bl	8002f98 <HAL_GPIO_Init>

}
 8000688:	b009      	add	sp, #36	; 0x24
 800068a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	40010c00 	.word	0x40010c00
 8000694:	40010800 	.word	0x40010800

08000698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000698:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <MX_I2C1_Init+0x34>)
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_I2C1_Init+0x38>)
 80006a0:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80006aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ae:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b8:	f002 fe9a 	bl	80033f0 <HAL_I2C_Init>
 80006bc:	b118      	cbz	r0, 80006c6 <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80006c2:	f000 b983 	b.w	80009cc <Error_Handler>
}
 80006c6:	bd08      	pop	{r3, pc}
 80006c8:	20003ef8 	.word	0x20003ef8
 80006cc:	40005400 	.word	0x40005400
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d4:	b510      	push	{r4, lr}
 80006d6:	4604      	mov	r4, r0
 80006d8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	2210      	movs	r2, #16
 80006dc:	2100      	movs	r1, #0
 80006de:	a802      	add	r0, sp, #8
 80006e0:	f004 fa16 	bl	8004b10 <memset>
  if(i2cHandle->Instance==I2C1)
 80006e4:	6822      	ldr	r2, [r4, #0]
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_I2C_MspInit+0x58>)
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d11c      	bne.n	8000726 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4c10      	ldr	r4, [pc, #64]	; (8000730 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ee:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	4810      	ldr	r0, [pc, #64]	; (8000734 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	61a3      	str	r3, [r4, #24]
 80006fa:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	f003 0308 	and.w	r3, r3, #8
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000706:	2312      	movs	r3, #18
 8000708:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f002 fc42 	bl	8002f98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000714:	69e3      	ldr	r3, [r4, #28]
 8000716:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071a:	61e3      	str	r3, [r4, #28]
 800071c:	69e3      	ldr	r3, [r4, #28]
 800071e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000726:	b006      	add	sp, #24
 8000728:	bd10      	pop	{r4, pc}
 800072a:	bf00      	nop
 800072c:	40005400 	.word	0x40005400
 8000730:	40021000 	.word	0x40021000
 8000734:	40010c00 	.word	0x40010c00

08000738 <readKeyValue>:

#include "key.h"

// 读取键值
uint8_t readKeyValue(void)
{
 8000738:	b510      	push	{r4, lr}
	if(KEY1_ON)
 800073a:	2120      	movs	r1, #32
 800073c:	482d      	ldr	r0, [pc, #180]	; (80007f4 <readKeyValue+0xbc>)
 800073e:	f002 fd05 	bl	800314c <HAL_GPIO_ReadPin>
 8000742:	b988      	cbnz	r0, 8000768 <readKeyValue+0x30>
	{
		HAL_Delay(20);
 8000744:	2014      	movs	r0, #20
 8000746:	f002 fb45 	bl	8002dd4 <HAL_Delay>
		if(KEY1_ON)
 800074a:	2120      	movs	r1, #32
 800074c:	4829      	ldr	r0, [pc, #164]	; (80007f4 <readKeyValue+0xbc>)
 800074e:	f002 fcfd 	bl	800314c <HAL_GPIO_ReadPin>
 8000752:	2800      	cmp	r0, #0
 8000754:	d14b      	bne.n	80007ee <readKeyValue+0xb6>
		{
			while(KEY1_ON);
 8000756:	4c27      	ldr	r4, [pc, #156]	; (80007f4 <readKeyValue+0xbc>)
 8000758:	2120      	movs	r1, #32
 800075a:	4620      	mov	r0, r4
 800075c:	f002 fcf6 	bl	800314c <HAL_GPIO_ReadPin>
 8000760:	2800      	cmp	r0, #0
 8000762:	d0f9      	beq.n	8000758 <readKeyValue+0x20>
			return 1;
 8000764:	2001      	movs	r0, #1
			return 0;
		}
	}

	return 0;
}
 8000766:	bd10      	pop	{r4, pc}
	if(KEY2_ON)
 8000768:	2140      	movs	r1, #64	; 0x40
 800076a:	4822      	ldr	r0, [pc, #136]	; (80007f4 <readKeyValue+0xbc>)
 800076c:	f002 fcee 	bl	800314c <HAL_GPIO_ReadPin>
 8000770:	b988      	cbnz	r0, 8000796 <readKeyValue+0x5e>
		HAL_Delay(20);
 8000772:	2014      	movs	r0, #20
 8000774:	f002 fb2e 	bl	8002dd4 <HAL_Delay>
		if(KEY2_ON)
 8000778:	2140      	movs	r1, #64	; 0x40
 800077a:	481e      	ldr	r0, [pc, #120]	; (80007f4 <readKeyValue+0xbc>)
 800077c:	f002 fce6 	bl	800314c <HAL_GPIO_ReadPin>
 8000780:	2800      	cmp	r0, #0
 8000782:	d134      	bne.n	80007ee <readKeyValue+0xb6>
			while(KEY2_ON);
 8000784:	4c1b      	ldr	r4, [pc, #108]	; (80007f4 <readKeyValue+0xbc>)
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4620      	mov	r0, r4
 800078a:	f002 fcdf 	bl	800314c <HAL_GPIO_ReadPin>
 800078e:	2800      	cmp	r0, #0
 8000790:	d0f9      	beq.n	8000786 <readKeyValue+0x4e>
			return 2;
 8000792:	2002      	movs	r0, #2
 8000794:	e7e7      	b.n	8000766 <readKeyValue+0x2e>
	if(KEY3_ON)
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	4816      	ldr	r0, [pc, #88]	; (80007f4 <readKeyValue+0xbc>)
 800079a:	f002 fcd7 	bl	800314c <HAL_GPIO_ReadPin>
 800079e:	b980      	cbnz	r0, 80007c2 <readKeyValue+0x8a>
		HAL_Delay(20);
 80007a0:	2014      	movs	r0, #20
 80007a2:	f002 fb17 	bl	8002dd4 <HAL_Delay>
		if(KEY3_ON)
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <readKeyValue+0xbc>)
 80007aa:	f002 fccf 	bl	800314c <HAL_GPIO_ReadPin>
 80007ae:	b9f0      	cbnz	r0, 80007ee <readKeyValue+0xb6>
			while(KEY3_ON);
 80007b0:	4c10      	ldr	r4, [pc, #64]	; (80007f4 <readKeyValue+0xbc>)
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	4620      	mov	r0, r4
 80007b6:	f002 fcc9 	bl	800314c <HAL_GPIO_ReadPin>
 80007ba:	2800      	cmp	r0, #0
 80007bc:	d0f9      	beq.n	80007b2 <readKeyValue+0x7a>
			return 3;
 80007be:	2003      	movs	r0, #3
 80007c0:	e7d1      	b.n	8000766 <readKeyValue+0x2e>
	if(KEY4_ON)
 80007c2:	2101      	movs	r1, #1
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <readKeyValue+0xc0>)
 80007c6:	f002 fcc1 	bl	800314c <HAL_GPIO_ReadPin>
 80007ca:	b980      	cbnz	r0, 80007ee <readKeyValue+0xb6>
		HAL_Delay(20);
 80007cc:	2014      	movs	r0, #20
 80007ce:	f002 fb01 	bl	8002dd4 <HAL_Delay>
		if(KEY4_ON)
 80007d2:	2101      	movs	r1, #1
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <readKeyValue+0xc0>)
 80007d6:	f002 fcb9 	bl	800314c <HAL_GPIO_ReadPin>
 80007da:	b940      	cbnz	r0, 80007ee <readKeyValue+0xb6>
			while(KEY4_ON);
 80007dc:	4c06      	ldr	r4, [pc, #24]	; (80007f8 <readKeyValue+0xc0>)
 80007de:	2101      	movs	r1, #1
 80007e0:	4620      	mov	r0, r4
 80007e2:	f002 fcb3 	bl	800314c <HAL_GPIO_ReadPin>
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d0f9      	beq.n	80007de <readKeyValue+0xa6>
			return 4;
 80007ea:	2004      	movs	r0, #4
 80007ec:	e7bb      	b.n	8000766 <readKeyValue+0x2e>
			return 0;
 80007ee:	2000      	movs	r0, #0
 80007f0:	e7b9      	b.n	8000766 <readKeyValue+0x2e>
 80007f2:	bf00      	nop
 80007f4:	40010800 	.word	0x40010800
 80007f8:	40010c00 	.word	0x40010c00

080007fc <LED_Toggle>:
 */

#include "led.h"

void LED_Toggle(void)
{
 80007fc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80007fe:	4c09      	ldr	r4, [pc, #36]	; (8000824 <LED_Toggle+0x28>)
 8000800:	2200      	movs	r2, #0
 8000802:	2102      	movs	r1, #2
 8000804:	4620      	mov	r0, r4
 8000806:	f002 fca7 	bl	8003158 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 800080a:	20fa      	movs	r0, #250	; 0xfa
 800080c:	f002 fae2 	bl	8002dd4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000810:	4620      	mov	r0, r4
 8000812:	2201      	movs	r2, #1
 8000814:	2102      	movs	r1, #2
 8000816:	f002 fc9f 	bl	8003158 <HAL_GPIO_WritePin>
	HAL_Delay(250);
}
 800081a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(250);
 800081e:	20fa      	movs	r0, #250	; 0xfa
 8000820:	f002 bad8 	b.w	8002dd4 <HAL_Delay>
 8000824:	40010c00 	.word	0x40010c00

08000828 <font>:
FontDef_t fontone;

void font(void)
{
    fontone.FontWidth = 8;
    fontone.FontHeight = 16;
 8000828:	2108      	movs	r1, #8
 800082a:	2210      	movs	r2, #16
    fontone.FontWidth = 8;
 800082c:	4b01      	ldr	r3, [pc, #4]	; (8000834 <font+0xc>)
    fontone.FontHeight = 16;
 800082e:	e9c3 1200 	strd	r1, r2, [r3]
}
 8000832:	4770      	bx	lr
 8000834:	20003f4c 	.word	0x20003f4c

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083c:	2214      	movs	r2, #20
 800083e:	2100      	movs	r1, #0
 8000840:	a80c      	add	r0, sp, #48	; 0x30
 8000842:	f004 f965 	bl	8004b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000846:	2214      	movs	r2, #20
 8000848:	2100      	movs	r1, #0
 800084a:	eb0d 0002 	add.w	r0, sp, r2
 800084e:	f004 f95f 	bl	8004b10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000852:	2210      	movs	r2, #16
 8000854:	2100      	movs	r1, #0
 8000856:	a801      	add	r0, sp, #4
 8000858:	f004 f95a 	bl	8004b10 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000862:	2205      	movs	r2, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000864:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000866:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800086e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000878:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087a:	f002 fef7 	bl	800366c <HAL_RCC_OscConfig>
 800087e:	b108      	cbz	r0, 8000884 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000882:	e7fe      	b.n	8000882 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000894:	4629      	mov	r1, r5
 8000896:	a805      	add	r0, sp, #20
 8000898:	f003 f8aa 	bl	80039f0 <HAL_RCC_ClockConfig>
 800089c:	b108      	cbz	r0, 80008a2 <SystemClock_Config+0x6a>
 800089e:	b672      	cpsid	i
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008a2:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a6:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008a8:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008aa:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ac:	f003 f95c 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 80008b0:	b108      	cbz	r0, 80008b6 <SystemClock_Config+0x7e>
 80008b2:	b672      	cpsid	i
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <SystemClock_Config+0x7c>
}
 80008b6:	b015      	add	sp, #84	; 0x54
 80008b8:	bd30      	pop	{r4, r5, pc}
	...

080008bc <main>:
{
 80008bc:	b510      	push	{r4, lr}
  HAL_Init();
 80008be:	f002 fa65 	bl	8002d8c <HAL_Init>
  SystemClock_Config();
 80008c2:	f7ff ffb9 	bl	8000838 <SystemClock_Config>
  MX_GPIO_Init();
 80008c6:	f7ff fe87 	bl	80005d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008ca:	f7ff fee5 	bl	8000698 <MX_I2C1_Init>
  MX_RTC_Init();
 80008ce:	f000 fc41 	bl	8001154 <MX_RTC_Init>
  MX_TIM3_Init();
 80008d2:	f001 fdab 	bl	800242c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80008d6:	f001 fdf1 	bl	80024bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008da:	f001 fe0f 	bl	80024fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008de:	f001 fe2f 	bl	8002540 <MX_USART3_UART_Init>
  font();
 80008e2:	f7ff ffa1 	bl	8000828 <font>
  oled_init();
 80008e6:	f000 fa77 	bl	8000dd8 <oled_init>
  settingAMPM();
 80008ea:	f000 fcc9 	bl	8001280 <settingAMPM>
	  checkAlarmClock();
 80008ee:	f7ff fdc1 	bl	8000474 <checkAlarmClock>
	  MQ2_Scan();
 80008f2:	f000 f89f 	bl	8000a34 <MQ2_Scan>
	  switch(returnFlagBluetooth())
 80008f6:	f000 f90f 	bl	8000b18 <returnFlagBluetooth>
 80008fa:	2805      	cmp	r0, #5
 80008fc:	d03f      	beq.n	800097e <main+0xc2>
 80008fe:	d807      	bhi.n	8000910 <main+0x54>
 8000900:	b3c0      	cbz	r0, 8000974 <main+0xb8>
 8000902:	2802      	cmp	r0, #2
 8000904:	d020      	beq.n	8000948 <main+0x8c>
		  clearBluetoothCommand();
 8000906:	f000 f90d 	bl	8000b24 <clearBluetoothCommand>
		  RTC_TimeAndDate_Show();
 800090a:	f001 f8af 	bl	8001a6c <RTC_TimeAndDate_Show>
		  break;
 800090e:	e01b      	b.n	8000948 <main+0x8c>
	  switch(returnFlagBluetooth())
 8000910:	2812      	cmp	r0, #18
 8000912:	d1f8      	bne.n	8000906 <main+0x4a>
		  oled_clear();
 8000914:	f000 fad4 	bl	8000ec0 <oled_clear>
		  clearBluetoothCommand();
 8000918:	f000 f904 	bl	8000b24 <clearBluetoothCommand>
			  bluetoothCommandId = returnFlagBluetooth();
 800091c:	f000 f8fc 	bl	8000b18 <returnFlagBluetooth>
 8000920:	4604      	mov	r4, r0
			  clearBluetoothCommand();
 8000922:	f000 f8ff 	bl	8000b24 <clearBluetoothCommand>
		  while(bluetoothCommandId != 18)
 8000926:	2c12      	cmp	r4, #18
 8000928:	d11e      	bne.n	8000968 <main+0xac>
		  oled_clear();
 800092a:	f000 fac9 	bl	8000ec0 <oled_clear>
			  bluetoothCommandId = returnFlagBluetooth();
 800092e:	f000 f8f3 	bl	8000b18 <returnFlagBluetooth>
 8000932:	4604      	mov	r4, r0
			  clearBluetoothCommand();
 8000934:	f000 f8f6 	bl	8000b24 <clearBluetoothCommand>
		  while(bluetoothCommandId != 18)
 8000938:	2c12      	cmp	r4, #18
 800093a:	d118      	bne.n	800096e <main+0xb2>
		  oled_clear();
 800093c:	f000 fac0 	bl	8000ec0 <oled_clear>
		  selectMusicMP3();
 8000940:	f001 fd0d 	bl	800235e <selectMusicMP3>
		  oled_clear();
 8000944:	f000 fabc 	bl	8000ec0 <oled_clear>
	  switch(readKeyValue())
 8000948:	f7ff fef6 	bl	8000738 <readKeyValue>
 800094c:	3801      	subs	r0, #1
 800094e:	2803      	cmp	r0, #3
 8000950:	d839      	bhi.n	80009c6 <main+0x10a>
 8000952:	a301      	add	r3, pc, #4	; (adr r3, 8000958 <main+0x9c>)
 8000954:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8000958:	08000989 	.word	0x08000989
 800095c:	080008ef 	.word	0x080008ef
 8000960:	080009bb 	.word	0x080009bb
 8000964:	080009c1 	.word	0x080009c1
			  screen1();
 8000968:	f7ff fdd4 	bl	8000514 <screen1>
 800096c:	e7d6      	b.n	800091c <main+0x60>
			  screen2();
 800096e:	f7ff fe1b 	bl	80005a8 <screen2>
 8000972:	e7dc      	b.n	800092e <main+0x72>
		  clearBluetoothCommand();
 8000974:	f000 f8d6 	bl	8000b24 <clearBluetoothCommand>
		  extranceDateAndTime();
 8000978:	f000 ffe6 	bl	8001948 <extranceDateAndTime>
		  break;
 800097c:	e7e4      	b.n	8000948 <main+0x8c>
		  clearBluetoothCommand();
 800097e:	f000 f8d1 	bl	8000b24 <clearBluetoothCommand>
		  extranceAlarmClock();
 8000982:	f7ff fccb 	bl	800031c <extranceAlarmClock>
		  break;
 8000986:	e7df      	b.n	8000948 <main+0x8c>
		  oled_clear();
 8000988:	f000 fa9a 	bl	8000ec0 <oled_clear>
			  keyValue = readKeyValue();
 800098c:	f7ff fed4 	bl	8000738 <readKeyValue>
		  while(keyValue != 1)
 8000990:	2801      	cmp	r0, #1
 8000992:	d10c      	bne.n	80009ae <main+0xf2>
		  oled_clear();
 8000994:	f000 fa94 	bl	8000ec0 <oled_clear>
			  keyValue = readKeyValue();
 8000998:	f7ff fece 	bl	8000738 <readKeyValue>
		  while(keyValue != 1)
 800099c:	2801      	cmp	r0, #1
 800099e:	d109      	bne.n	80009b4 <main+0xf8>
		  oled_clear();
 80009a0:	f000 fa8e 	bl	8000ec0 <oled_clear>
		  selectMusicMP3();
 80009a4:	f001 fcdb 	bl	800235e <selectMusicMP3>
		  oled_clear();
 80009a8:	f000 fa8a 	bl	8000ec0 <oled_clear>
		  break;
 80009ac:	e79f      	b.n	80008ee <main+0x32>
			  screen1();
 80009ae:	f7ff fdb1 	bl	8000514 <screen1>
 80009b2:	e7eb      	b.n	800098c <main+0xd0>
			  screen2();
 80009b4:	f7ff fdf8 	bl	80005a8 <screen2>
 80009b8:	e7ee      	b.n	8000998 <main+0xdc>
		  extranceDateAndTime();
 80009ba:	f000 ffc5 	bl	8001948 <extranceDateAndTime>
		  break;
 80009be:	e796      	b.n	80008ee <main+0x32>
		  extranceAlarmClock();
 80009c0:	f7ff fcac 	bl	800031c <extranceAlarmClock>
		  break;
 80009c4:	e793      	b.n	80008ee <main+0x32>
		  RTC_TimeAndDate_Show();
 80009c6:	f001 f851 	bl	8001a6c <RTC_TimeAndDate_Show>
		  break;
 80009ca:	e790      	b.n	80008ee <main+0x32>

080009cc <Error_Handler>:
 80009cc:	b672      	cpsid	i
  while (1)
 80009ce:	e7fe      	b.n	80009ce <Error_Handler+0x2>

080009d0 <fireAlarm>:
     }
}

// 报警声
void fireAlarm(void)
{
 80009d0:	b507      	push	{r0, r1, r2, lr}
	uint8_t fireAlarm[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x08,0xEF};
 80009d2:	466b      	mov	r3, sp
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <fireAlarm+0x20>)
 80009d6:	6810      	ldr	r0, [r2, #0]
 80009d8:	6851      	ldr	r1, [r2, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *)fireAlarm,sizeof(fireAlarm),0xFFFF);
 80009da:	2208      	movs	r2, #8
	uint8_t fireAlarm[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x08,0xEF};
 80009dc:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart3,(uint8_t *)fireAlarm,sizeof(fireAlarm),0xFFFF);
 80009de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e2:	4669      	mov	r1, sp
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <fireAlarm+0x24>)
 80009e6:	f003 fe46 	bl	8004676 <HAL_UART_Transmit>
}
 80009ea:	b003      	add	sp, #12
 80009ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f0:	08004b38 	.word	0x08004b38
 80009f4:	200044ac 	.word	0x200044ac

080009f8 <displayFirmAlarm>:

// 报警显示
void displayFirmAlarm(void)
{
 80009f8:	b507      	push	{r0, r1, r2, lr}
	oled_show_china(0,0,20, SSD1306_COLOR_WHITE);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2301      	movs	r3, #1
 80009fe:	2214      	movs	r2, #20
 8000a00:	4608      	mov	r0, r1
 8000a02:	f000 facf 	bl	8000fa4 <oled_show_china>
	oled_show_china(16,0,11, SSD1306_COLOR_WHITE);
 8000a06:	2301      	movs	r3, #1
 8000a08:	220b      	movs	r2, #11
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2010      	movs	r0, #16
 8000a0e:	f000 fac9 	bl	8000fa4 <oled_show_china>
	oled_show_str(32,0,"!!!",&fontone,SSD1306_COLOR_WHITE);
 8000a12:	2301      	movs	r3, #1
 8000a14:	2100      	movs	r1, #0
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <displayFirmAlarm+0x34>)
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <displayFirmAlarm+0x38>)
 8000a1c:	2020      	movs	r0, #32
 8000a1e:	f000 fb29 	bl	8001074 <oled_show_str>
	oled_update_screen();
}
 8000a22:	b003      	add	sp, #12
 8000a24:	f85d eb04 	ldr.w	lr, [sp], #4
	oled_update_screen();
 8000a28:	f000 ba30 	b.w	8000e8c <oled_update_screen>
 8000a2c:	08004bb2 	.word	0x08004bb2
 8000a30:	20003f4c 	.word	0x20003f4c

08000a34 <MQ2_Scan>:
{
 8000a34:	b538      	push	{r3, r4, r5, lr}
     if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5) == GPIO_PIN_RESET)
 8000a36:	2120      	movs	r1, #32
 8000a38:	4820      	ldr	r0, [pc, #128]	; (8000abc <MQ2_Scan+0x88>)
 8000a3a:	f002 fb87 	bl	800314c <HAL_GPIO_ReadPin>
 8000a3e:	bb98      	cbnz	r0, 8000aa8 <MQ2_Scan+0x74>
    	 HAL_Delay(10);
 8000a40:	200a      	movs	r0, #10
 8000a42:	f002 f9c7 	bl	8002dd4 <HAL_Delay>
    	 if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5) == GPIO_PIN_RESET )
 8000a46:	2120      	movs	r1, #32
 8000a48:	481c      	ldr	r0, [pc, #112]	; (8000abc <MQ2_Scan+0x88>)
 8000a4a:	f002 fb7f 	bl	800314c <HAL_GPIO_ReadPin>
 8000a4e:	bb38      	cbnz	r0, 8000aa0 <MQ2_Scan+0x6c>
        	if(flagSendMessageForFireAlarm == 0)
 8000a50:	4c1b      	ldr	r4, [pc, #108]	; (8000ac0 <MQ2_Scan+0x8c>)
        	LED_SET_ON;		// 点亮LED
 8000a52:	2201      	movs	r2, #1
 8000a54:	2102      	movs	r1, #2
 8000a56:	4819      	ldr	r0, [pc, #100]	; (8000abc <MQ2_Scan+0x88>)
 8000a58:	f002 fb7e 	bl	8003158 <HAL_GPIO_WritePin>
        	oled_clear();		// 清屏
 8000a5c:	f000 fa30 	bl	8000ec0 <oled_clear>
        	if(flagSendMessageForFireAlarm == 0)
 8000a60:	7823      	ldrb	r3, [r4, #0]
 8000a62:	b943      	cbnz	r3, 8000a76 <MQ2_Scan+0x42>
        		HAL_UART_Transmit(&huart2, (uint8_t *)1, 1, 1000);		// 向串口2发送1字节数据
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <MQ2_Scan+0x90>)
 8000a6e:	f003 fe02 	bl	8004676 <HAL_UART_Transmit>
        		flagSendMessageForFireAlarm = 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	7023      	strb	r3, [r4, #0]
			fireAlarm();		// 警报声
 8000a76:	f7ff ffab 	bl	80009d0 <fireAlarm>
			displayFirmAlarm();		// 报警显示
 8000a7a:	f7ff ffbd 	bl	80009f8 <displayFirmAlarm>
        	while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5) == GPIO_PIN_RESET)
 8000a7e:	4d0f      	ldr	r5, [pc, #60]	; (8000abc <MQ2_Scan+0x88>)
 8000a80:	2120      	movs	r1, #32
 8000a82:	4628      	mov	r0, r5
 8000a84:	f002 fb62 	bl	800314c <HAL_GPIO_ReadPin>
 8000a88:	b158      	cbz	r0, 8000aa2 <MQ2_Scan+0x6e>
        	LED_SET_OFF;
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	480b      	ldr	r0, [pc, #44]	; (8000abc <MQ2_Scan+0x88>)
 8000a90:	f002 fb62 	bl	8003158 <HAL_GPIO_WritePin>
        	oled_clear();
 8000a94:	f000 fa14 	bl	8000ec0 <oled_clear>
        	stopMusic();
 8000a98:	f001 fa30 	bl	8001efc <stopMusic>
        	flagSendMessageForFireAlarm = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	7023      	strb	r3, [r4, #0]
}
 8000aa0:	bd38      	pop	{r3, r4, r5, pc}
        		LED_Toggle();		// LED闪烁
 8000aa2:	f7ff feab 	bl	80007fc <LED_Toggle>
 8000aa6:	e7eb      	b.n	8000a80 <MQ2_Scan+0x4c>
    	 LED_SET_OFF;
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <MQ2_Scan+0x88>)
 8000aae:	f002 fb53 	bl	8003158 <HAL_GPIO_WritePin>
    	 flagSendMessageForFireAlarm = 0;
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <MQ2_Scan+0x8c>)
 8000ab6:	701a      	strb	r2, [r3, #0]
}
 8000ab8:	e7f2      	b.n	8000aa0 <MQ2_Scan+0x6c>
 8000aba:	bf00      	nop
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	20003f58 	.word	0x20003f58
 8000ac4:	20004464 	.word	0x20004464

08000ac8 <loadSettingOrignalValue>:
volatile uint8_t flagMonth = 0;
volatile uint8_t flagDay = 0;
volatile uint8_t flagSendMessageForFireAlarm = 0;

void loadSettingOrignalValue(void)
{
 8000ac8:	b513      	push	{r0, r1, r4, lr}
	RTC_TimeTypeDef RTC_TimeStructure;
	RTC_DateTypeDef RTC_DateStructure;

	HAL_RTC_GetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8000aca:	4c11      	ldr	r4, [pc, #68]	; (8000b10 <loadSettingOrignalValue+0x48>)
 8000acc:	4669      	mov	r1, sp
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f003 fa25 	bl	8003f20 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_DateStructure, RTC_FORMAT_BIN);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4620      	mov	r0, r4
 8000ada:	a901      	add	r1, sp, #4
 8000adc:	f003 fb36 	bl	800414c <HAL_RTC_GetDate>

	tempArray[0] = RTC_DateStructure.Year;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <loadSettingOrignalValue+0x4c>)
 8000ae2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000ae6:	701a      	strb	r2, [r3, #0]
	tempArray[1] = RTC_DateStructure.Month;
 8000ae8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000aec:	705a      	strb	r2, [r3, #1]
	tempArray[2] = RTC_DateStructure.Date;
 8000aee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000af2:	709a      	strb	r2, [r3, #2]
	tempArray[3] = RTC_TimeStructure.Hours;
 8000af4:	f89d 2000 	ldrb.w	r2, [sp]
 8000af8:	70da      	strb	r2, [r3, #3]
	tempArray[4] = RTC_TimeStructure.Minutes;
 8000afa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8000afe:	711a      	strb	r2, [r3, #4]
	tempArray[5] = RTC_TimeStructure.Seconds;
 8000b00:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8000b04:	715a      	strb	r2, [r3, #5]
	tempArray[6] = RTC_DateStructure.WeekDay;
 8000b06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000b0a:	719a      	strb	r2, [r3, #6]
}
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd10      	pop	{r4, pc}
 8000b10:	20004368 	.word	0x20004368
 8000b14:	20003ec8 	.word	0x20003ec8

08000b18 <returnFlagBluetooth>:

uint8_t returnFlagBluetooth(void)
{
	return flagBluetooth;
 8000b18:	4b01      	ldr	r3, [pc, #4]	; (8000b20 <returnFlagBluetooth+0x8>)
 8000b1a:	7818      	ldrb	r0, [r3, #0]
}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20003ec0 	.word	0x20003ec0

08000b24 <clearBluetoothCommand>:

void clearBluetoothCommand(void)
{
	flagBluetooth = 255;
 8000b24:	22ff      	movs	r2, #255	; 0xff
 8000b26:	4b01      	ldr	r3, [pc, #4]	; (8000b2c <clearBluetoothCommand+0x8>)
 8000b28:	701a      	strb	r2, [r3, #0]
}
 8000b2a:	4770      	bx	lr
 8000b2c:	20003ec0 	.word	0x20003ec0

08000b30 <showWeather>:

void showWeather()
{
 8000b30:	b510      	push	{r4, lr}
	if(flagWeather==1){oled_show_china(0,40,71, SSD1306_COLOR_WHITE);}       //晴
 8000b32:	4c1b      	ldr	r4, [pc, #108]	; (8000ba0 <showWeather+0x70>)
 8000b34:	7822      	ldrb	r2, [r4, #0]
 8000b36:	2a01      	cmp	r2, #1
 8000b38:	b2d3      	uxtb	r3, r2
 8000b3a:	d104      	bne.n	8000b46 <showWeather+0x16>
 8000b3c:	2247      	movs	r2, #71	; 0x47
 8000b3e:	2128      	movs	r1, #40	; 0x28
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 fa2f 	bl	8000fa4 <oled_show_china>
	if(flagWeather==2){oled_show_china(0,40,72, SSD1306_COLOR_WHITE);}       //阴
 8000b46:	7823      	ldrb	r3, [r4, #0]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d105      	bne.n	8000b58 <showWeather+0x28>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	2248      	movs	r2, #72	; 0x48
 8000b50:	2128      	movs	r1, #40	; 0x28
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 fa26 	bl	8000fa4 <oled_show_china>
	if(flagWeather==3){oled_show_china(0,40,73, SSD1306_COLOR_WHITE);oled_show_china(20,40,74, SSD1306_COLOR_WHITE);}    //多云
 8000b58:	7823      	ldrb	r3, [r4, #0]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d10b      	bne.n	8000b76 <showWeather+0x46>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2249      	movs	r2, #73	; 0x49
 8000b62:	2128      	movs	r1, #40	; 0x28
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 fa1d 	bl	8000fa4 <oled_show_china>
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	224a      	movs	r2, #74	; 0x4a
 8000b6e:	2128      	movs	r1, #40	; 0x28
 8000b70:	2014      	movs	r0, #20
 8000b72:	f000 fa17 	bl	8000fa4 <oled_show_china>
	if(flagWeather==4){oled_show_china(0,40,75, SSD1306_COLOR_WHITE);}       //雾
 8000b76:	7823      	ldrb	r3, [r4, #0]
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d105      	bne.n	8000b88 <showWeather+0x58>
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	224b      	movs	r2, #75	; 0x4b
 8000b80:	2128      	movs	r1, #40	; 0x28
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 fa0e 	bl	8000fa4 <oled_show_china>
	if(flagWeather==5){oled_show_china(0,40,76, SSD1306_COLOR_WHITE);}       //霾
 8000b88:	7823      	ldrb	r3, [r4, #0]
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d107      	bne.n	8000b9e <showWeather+0x6e>
}
 8000b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(flagWeather==5){oled_show_china(0,40,76, SSD1306_COLOR_WHITE);}       //霾
 8000b92:	2301      	movs	r3, #1
 8000b94:	224c      	movs	r2, #76	; 0x4c
 8000b96:	2128      	movs	r1, #40	; 0x28
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 ba03 	b.w	8000fa4 <oled_show_china>
}
 8000b9e:	bd10      	pop	{r4, pc}
 8000ba0:	20003f59 	.word	0x20003f59

08000ba4 <showMonth>:

void showMonth()
{
 8000ba4:	b510      	push	{r4, lr}
	switch(flagMonth)
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <showMonth+0x7c>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	2b0b      	cmp	r3, #11
 8000bae:	d836      	bhi.n	8000c1e <showMonth+0x7a>
 8000bb0:	e8df f003 	tbb	[pc, r3]
 8000bb4:	1a171406 	.word	0x1a171406
 8000bb8:	2623201d 	.word	0x2623201d
 8000bbc:	322f2c29 	.word	0x322f2c29
	{
	case 1:
		oled_show_china(20,0,49, SSD1306_COLOR_WHITE);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	2231      	movs	r2, #49	; 0x31
	case 11:
		oled_show_china(20,0,30, SSD1306_COLOR_WHITE);
		oled_show_china(40,0,51, SSD1306_COLOR_WHITE);
		break;
	case 12:
		oled_show_china(20,0,50, SSD1306_COLOR_WHITE);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2014      	movs	r0, #20
 8000bc8:	f000 f9ec 	bl	8000fa4 <oled_show_china>
		oled_show_china(40,0,51, SSD1306_COLOR_WHITE);
		break;
	default:
		break;
	}
}
 8000bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		oled_show_china(40,0,51, SSD1306_COLOR_WHITE);
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	2233      	movs	r2, #51	; 0x33
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2028      	movs	r0, #40	; 0x28
 8000bd8:	f000 b9e4 	b.w	8000fa4 <oled_show_china>
		oled_show_china(20,0,40, SSD1306_COLOR_WHITE);
 8000bdc:	2301      	movs	r3, #1
 8000bde:	2228      	movs	r2, #40	; 0x28
 8000be0:	e7f0      	b.n	8000bc4 <showMonth+0x20>
		oled_show_china(20,0,41, SSD1306_COLOR_WHITE);
 8000be2:	2301      	movs	r3, #1
 8000be4:	2229      	movs	r2, #41	; 0x29
 8000be6:	e7ed      	b.n	8000bc4 <showMonth+0x20>
		oled_show_china(20,0,42, SSD1306_COLOR_WHITE);
 8000be8:	2301      	movs	r3, #1
 8000bea:	222a      	movs	r2, #42	; 0x2a
 8000bec:	e7ea      	b.n	8000bc4 <showMonth+0x20>
		oled_show_china(20,0,43, SSD1306_COLOR_WHITE);
 8000bee:	2301      	movs	r3, #1
 8000bf0:	222b      	movs	r2, #43	; 0x2b
 8000bf2:	e7e7      	b.n	8000bc4 <showMonth+0x20>
		oled_show_china(20,0,44, SSD1306_COLOR_WHITE);
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	222c      	movs	r2, #44	; 0x2c
 8000bf8:	e7e4      	b.n	8000bc4 <showMonth+0x20>
		oled_show_china(20,0,45, SSD1306_COLOR_WHITE);
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	222d      	movs	r2, #45	; 0x2d
 8000bfe:	e7e1      	b.n	8000bc4 <showMonth+0x20>
		oled_show_china(20,0,46, SSD1306_COLOR_WHITE);
 8000c00:	2301      	movs	r3, #1
 8000c02:	222e      	movs	r2, #46	; 0x2e
 8000c04:	e7de      	b.n	8000bc4 <showMonth+0x20>
		oled_show_china(20,0,47, SSD1306_COLOR_WHITE);
 8000c06:	2301      	movs	r3, #1
 8000c08:	222f      	movs	r2, #47	; 0x2f
 8000c0a:	e7db      	b.n	8000bc4 <showMonth+0x20>
		oled_show_china(20,0,48, SSD1306_COLOR_WHITE);
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	2230      	movs	r2, #48	; 0x30
 8000c10:	e7d8      	b.n	8000bc4 <showMonth+0x20>
		oled_show_china(20,0,30, SSD1306_COLOR_WHITE);
 8000c12:	2301      	movs	r3, #1
 8000c14:	221e      	movs	r2, #30
 8000c16:	e7d5      	b.n	8000bc4 <showMonth+0x20>
		oled_show_china(20,0,50, SSD1306_COLOR_WHITE);
 8000c18:	2301      	movs	r3, #1
 8000c1a:	2232      	movs	r2, #50	; 0x32
 8000c1c:	e7d2      	b.n	8000bc4 <showMonth+0x20>
}
 8000c1e:	bd10      	pop	{r4, pc}
 8000c20:	20003f56 	.word	0x20003f56

08000c24 <showDay>:

void showDay()
{
 8000c24:	b510      	push	{r4, lr}
	switch(flagDay)
 8000c26:	4b59      	ldr	r3, [pc, #356]	; (8000d8c <showDay+0x168>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	2b1d      	cmp	r3, #29
 8000c2e:	f200 80ac 	bhi.w	8000d8a <showDay+0x166>
 8000c32:	e8df f003 	tbb	[pc, r3]
 8000c36:	1d0f      	.short	0x1d0f
 8000c38:	41382f26 	.word	0x41382f26
 8000c3c:	655c534a 	.word	0x655c534a
 8000c40:	7774716e 	.word	0x7774716e
 8000c44:	83807d7a 	.word	0x83807d7a
 8000c48:	8f8c8986 	.word	0x8f8c8986
 8000c4c:	9b989592 	.word	0x9b989592
 8000c50:	a7a4a19e 	.word	0xa7a4a19e
	{
	case 1:
		oled_show_china(60,0,52, SSD1306_COLOR_WHITE);
 8000c54:	2301      	movs	r3, #1
 8000c56:	2234      	movs	r2, #52	; 0x34
	case 20:
		oled_show_china(60,0,40, SSD1306_COLOR_WHITE);
		oled_show_china(80,0,48, SSD1306_COLOR_WHITE);
		break;
	case 21:
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	203c      	movs	r0, #60	; 0x3c
 8000c5c:	f000 f9a2 	bl	8000fa4 <oled_show_china>
		oled_show_china(80,0,39, SSD1306_COLOR_WHITE);
 8000c60:	2301      	movs	r3, #1
 8000c62:	2227      	movs	r2, #39	; 0x27
		oled_show_china(80,0,48, SSD1306_COLOR_WHITE);
		break;
	default:
		break;
	}
}
 8000c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		oled_show_china(80,0,48, SSD1306_COLOR_WHITE);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2050      	movs	r0, #80	; 0x50
 8000c6c:	f000 b99a 	b.w	8000fa4 <oled_show_china>
		oled_show_china(60,0,52, SSD1306_COLOR_WHITE);
 8000c70:	2301      	movs	r3, #1
 8000c72:	2234      	movs	r2, #52	; 0x34
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000c74:	2100      	movs	r1, #0
 8000c76:	203c      	movs	r0, #60	; 0x3c
 8000c78:	f000 f994 	bl	8000fa4 <oled_show_china>
		oled_show_china(80,0,40, SSD1306_COLOR_WHITE);
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	2228      	movs	r2, #40	; 0x28
 8000c80:	e7f0      	b.n	8000c64 <showDay+0x40>
		oled_show_china(60,0,52, SSD1306_COLOR_WHITE);
 8000c82:	2301      	movs	r3, #1
 8000c84:	2234      	movs	r2, #52	; 0x34
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000c86:	2100      	movs	r1, #0
 8000c88:	203c      	movs	r0, #60	; 0x3c
 8000c8a:	f000 f98b 	bl	8000fa4 <oled_show_china>
		oled_show_china(80,0,41, SSD1306_COLOR_WHITE);
 8000c8e:	2301      	movs	r3, #1
 8000c90:	2229      	movs	r2, #41	; 0x29
 8000c92:	e7e7      	b.n	8000c64 <showDay+0x40>
		oled_show_china(60,0,52, SSD1306_COLOR_WHITE);
 8000c94:	2301      	movs	r3, #1
 8000c96:	2234      	movs	r2, #52	; 0x34
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	203c      	movs	r0, #60	; 0x3c
 8000c9c:	f000 f982 	bl	8000fa4 <oled_show_china>
		oled_show_china(80,0,42, SSD1306_COLOR_WHITE);
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	222a      	movs	r2, #42	; 0x2a
 8000ca4:	e7de      	b.n	8000c64 <showDay+0x40>
		oled_show_china(60,0,52, SSD1306_COLOR_WHITE);
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2234      	movs	r2, #52	; 0x34
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000caa:	2100      	movs	r1, #0
 8000cac:	203c      	movs	r0, #60	; 0x3c
 8000cae:	f000 f979 	bl	8000fa4 <oled_show_china>
		oled_show_china(80,0,43, SSD1306_COLOR_WHITE);
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	222b      	movs	r2, #43	; 0x2b
 8000cb6:	e7d5      	b.n	8000c64 <showDay+0x40>
		oled_show_china(60,0,52, SSD1306_COLOR_WHITE);
 8000cb8:	2301      	movs	r3, #1
 8000cba:	2234      	movs	r2, #52	; 0x34
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	203c      	movs	r0, #60	; 0x3c
 8000cc0:	f000 f970 	bl	8000fa4 <oled_show_china>
		oled_show_china(80,0,44, SSD1306_COLOR_WHITE);
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	222c      	movs	r2, #44	; 0x2c
 8000cc8:	e7cc      	b.n	8000c64 <showDay+0x40>
		oled_show_china(60,0,52, SSD1306_COLOR_WHITE);
 8000cca:	2301      	movs	r3, #1
 8000ccc:	2234      	movs	r2, #52	; 0x34
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	203c      	movs	r0, #60	; 0x3c
 8000cd2:	f000 f967 	bl	8000fa4 <oled_show_china>
		oled_show_china(80,0,45, SSD1306_COLOR_WHITE);
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	222d      	movs	r2, #45	; 0x2d
 8000cda:	e7c3      	b.n	8000c64 <showDay+0x40>
		oled_show_china(60,0,52, SSD1306_COLOR_WHITE);
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2234      	movs	r2, #52	; 0x34
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	203c      	movs	r0, #60	; 0x3c
 8000ce4:	f000 f95e 	bl	8000fa4 <oled_show_china>
		oled_show_china(80,0,46, SSD1306_COLOR_WHITE);
 8000ce8:	2301      	movs	r3, #1
 8000cea:	222e      	movs	r2, #46	; 0x2e
 8000cec:	e7ba      	b.n	8000c64 <showDay+0x40>
		oled_show_china(60,0,52, SSD1306_COLOR_WHITE);
 8000cee:	2301      	movs	r3, #1
 8000cf0:	2234      	movs	r2, #52	; 0x34
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	203c      	movs	r0, #60	; 0x3c
 8000cf6:	f000 f955 	bl	8000fa4 <oled_show_china>
		oled_show_china(80,0,47, SSD1306_COLOR_WHITE);
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	222f      	movs	r2, #47	; 0x2f
 8000cfe:	e7b1      	b.n	8000c64 <showDay+0x40>
		oled_show_china(60,0,52, SSD1306_COLOR_WHITE);
 8000d00:	2301      	movs	r3, #1
 8000d02:	2234      	movs	r2, #52	; 0x34
		oled_show_china(60,0,41, SSD1306_COLOR_WHITE);
 8000d04:	2100      	movs	r1, #0
 8000d06:	203c      	movs	r0, #60	; 0x3c
 8000d08:	f000 f94c 	bl	8000fa4 <oled_show_china>
		oled_show_china(80,0,48, SSD1306_COLOR_WHITE);
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	2230      	movs	r2, #48	; 0x30
 8000d10:	e7a8      	b.n	8000c64 <showDay+0x40>
		oled_show_china(60,0,48, SSD1306_COLOR_WHITE);
 8000d12:	2301      	movs	r3, #1
 8000d14:	2230      	movs	r2, #48	; 0x30
 8000d16:	e79f      	b.n	8000c58 <showDay+0x34>
		oled_show_china(60,0,48, SSD1306_COLOR_WHITE);
 8000d18:	2301      	movs	r3, #1
 8000d1a:	2230      	movs	r2, #48	; 0x30
 8000d1c:	e7aa      	b.n	8000c74 <showDay+0x50>
		oled_show_china(60,0,48, SSD1306_COLOR_WHITE);
 8000d1e:	2301      	movs	r3, #1
 8000d20:	2230      	movs	r2, #48	; 0x30
 8000d22:	e7b0      	b.n	8000c86 <showDay+0x62>
		oled_show_china(60,0,48, SSD1306_COLOR_WHITE);
 8000d24:	2301      	movs	r3, #1
 8000d26:	2230      	movs	r2, #48	; 0x30
 8000d28:	e7b6      	b.n	8000c98 <showDay+0x74>
		oled_show_china(60,0,48, SSD1306_COLOR_WHITE);
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	2230      	movs	r2, #48	; 0x30
 8000d2e:	e7bc      	b.n	8000caa <showDay+0x86>
		oled_show_china(60,0,48, SSD1306_COLOR_WHITE);
 8000d30:	2301      	movs	r3, #1
 8000d32:	2230      	movs	r2, #48	; 0x30
 8000d34:	e7c2      	b.n	8000cbc <showDay+0x98>
		oled_show_china(60,0,48, SSD1306_COLOR_WHITE);
 8000d36:	2301      	movs	r3, #1
 8000d38:	2230      	movs	r2, #48	; 0x30
 8000d3a:	e7c8      	b.n	8000cce <showDay+0xaa>
		oled_show_china(60,0,48, SSD1306_COLOR_WHITE);
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	2230      	movs	r2, #48	; 0x30
 8000d40:	e7ce      	b.n	8000ce0 <showDay+0xbc>
		oled_show_china(60,0,48, SSD1306_COLOR_WHITE);
 8000d42:	2301      	movs	r3, #1
 8000d44:	2230      	movs	r2, #48	; 0x30
 8000d46:	e7d4      	b.n	8000cf2 <showDay+0xce>
		oled_show_china(60,0,40, SSD1306_COLOR_WHITE);
 8000d48:	2301      	movs	r3, #1
 8000d4a:	2228      	movs	r2, #40	; 0x28
 8000d4c:	e7da      	b.n	8000d04 <showDay+0xe0>
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000d4e:	2301      	movs	r3, #1
 8000d50:	2235      	movs	r2, #53	; 0x35
 8000d52:	e781      	b.n	8000c58 <showDay+0x34>
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000d54:	2301      	movs	r3, #1
 8000d56:	2235      	movs	r2, #53	; 0x35
 8000d58:	e78c      	b.n	8000c74 <showDay+0x50>
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	2235      	movs	r2, #53	; 0x35
 8000d5e:	e792      	b.n	8000c86 <showDay+0x62>
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000d60:	2301      	movs	r3, #1
 8000d62:	2235      	movs	r2, #53	; 0x35
 8000d64:	e798      	b.n	8000c98 <showDay+0x74>
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000d66:	2301      	movs	r3, #1
 8000d68:	2235      	movs	r2, #53	; 0x35
 8000d6a:	e79e      	b.n	8000caa <showDay+0x86>
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	2235      	movs	r2, #53	; 0x35
 8000d70:	e7a4      	b.n	8000cbc <showDay+0x98>
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000d72:	2301      	movs	r3, #1
 8000d74:	2235      	movs	r2, #53	; 0x35
 8000d76:	e7aa      	b.n	8000cce <showDay+0xaa>
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000d78:	2301      	movs	r3, #1
 8000d7a:	2235      	movs	r2, #53	; 0x35
 8000d7c:	e7b0      	b.n	8000ce0 <showDay+0xbc>
		oled_show_china(60,0,53, SSD1306_COLOR_WHITE);
 8000d7e:	2301      	movs	r3, #1
 8000d80:	2235      	movs	r2, #53	; 0x35
 8000d82:	e7b6      	b.n	8000cf2 <showDay+0xce>
		oled_show_china(60,0,41, SSD1306_COLOR_WHITE);
 8000d84:	2301      	movs	r3, #1
 8000d86:	2229      	movs	r2, #41	; 0x29
 8000d88:	e7bc      	b.n	8000d04 <showDay+0xe0>
}
 8000d8a:	bd10      	pop	{r4, pc}
 8000d8c:	20003f55 	.word	0x20003f55

08000d90 <oled_write_cmd>:
 * @param[in]   command
 * @retval
 */

void oled_write_cmd(uint8_t command)
{
 8000d90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_I2C_Mem_Write(&hi2c1,OLED_WRITE_ADDR,WRITE_CMD,I2C_MEMADD_SIZE_8BIT,&command,1,100);
 8000d92:	2301      	movs	r3, #1
 8000d94:	2264      	movs	r2, #100	; 0x64
 8000d96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000d9a:	f10d 0217 	add.w	r2, sp, #23
{
 8000d9e:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1,OLED_WRITE_ADDR,WRITE_CMD,I2C_MEMADD_SIZE_8BIT,&command,1,100);
 8000da2:	9200      	str	r2, [sp, #0]
 8000da4:	2178      	movs	r1, #120	; 0x78
 8000da6:	2200      	movs	r2, #0
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <oled_write_cmd+0x24>)
 8000daa:	f002 fbc9 	bl	8003540 <HAL_I2C_Mem_Write>
}
 8000dae:	b007      	add	sp, #28
 8000db0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000db4:	20003ef8 	.word	0x20003ef8

08000db8 <oled_write_long_data>:
 * @par         修改日志
 *               Ver0.0.1:
                     XinC_Guo, 2018/07/18, 初始化版本\n
 */
void oled_write_long_data(uint8_t *data,uint16_t len)
{
 8000db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&hi2c1,OLED_WRITE_ADDR,WRITE_DATA,I2C_MEMADD_SIZE_8BIT,data,len,100);
 8000dba:	2364      	movs	r3, #100	; 0x64
 8000dbc:	9000      	str	r0, [sp, #0]
 8000dbe:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8000dc2:	2240      	movs	r2, #64	; 0x40
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	2178      	movs	r1, #120	; 0x78
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <oled_write_long_data+0x1c>)
 8000dca:	f002 fbb9 	bl	8003540 <HAL_I2C_Mem_Write>
}
 8000dce:	b005      	add	sp, #20
 8000dd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dd4:	20003ef8 	.word	0x20003ef8

08000dd8 <oled_init>:
 * @par         修改日志
 *               Ver0.0.1:
                     XinC_Guo, 2018/07/18, 初始化版本\n
 */
void oled_init(void)
{
 8000dd8:	b508      	push	{r3, lr}

    //oled配置
    oled_write_cmd(TURN_OFF_CMD);
 8000dda:	20ae      	movs	r0, #174	; 0xae
 8000ddc:	f7ff ffd8 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0xAE);//关显示
 8000de0:	20ae      	movs	r0, #174	; 0xae
 8000de2:	f7ff ffd5 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0X20);//低列地址
 8000de6:	2020      	movs	r0, #32
 8000de8:	f7ff ffd2 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0X10);//高列地址
 8000dec:	2010      	movs	r0, #16
 8000dee:	f7ff ffcf 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0XB0);//
 8000df2:	20b0      	movs	r0, #176	; 0xb0
 8000df4:	f7ff ffcc 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0XC8);
 8000df8:	20c8      	movs	r0, #200	; 0xc8
 8000dfa:	f7ff ffc9 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0X00);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff ffc6 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0X10);
 8000e04:	2010      	movs	r0, #16
 8000e06:	f7ff ffc3 	bl	8000d90 <oled_write_cmd>
    //设置行显示的开始地址(0-63)
    //40-47: (01xxxxx)
    oled_write_cmd(0X40);
 8000e0a:	2040      	movs	r0, #64	; 0x40
 8000e0c:	f7ff ffc0 	bl	8000d90 <oled_write_cmd>
    //设置对比度
    oled_write_cmd(0X81);
 8000e10:	2081      	movs	r0, #129	; 0x81
 8000e12:	f7ff ffbd 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0XFF);//这个值越大，屏幕越亮(和上条指令一起使用)(0x00-0xff)
 8000e16:	20ff      	movs	r0, #255	; 0xff
 8000e18:	f7ff ffba 	bl	8000d90 <oled_write_cmd>

    oled_write_cmd(0XA1);//0xA1: 左右反置，  0xA0: 正常显示（默认0xA0）
 8000e1c:	20a1      	movs	r0, #161	; 0xa1
 8000e1e:	f7ff ffb7 	bl	8000d90 <oled_write_cmd>
    //0xA6: 表示正常显示（在面板上1表示点亮，0表示不亮）
    //0xA7: 表示逆显示（在面板上0表示点亮，1表示不亮）
    oled_write_cmd(0XA6);
 8000e22:	20a6      	movs	r0, #166	; 0xa6
 8000e24:	f7ff ffb4 	bl	8000d90 <oled_write_cmd>

    oled_write_cmd(0XA8);//设置多路复用率（1-64）
 8000e28:	20a8      	movs	r0, #168	; 0xa8
 8000e2a:	f7ff ffb1 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0X3F);//（0x01-0x3f）(默认为3f)
 8000e2e:	203f      	movs	r0, #63	; 0x3f
 8000e30:	f7ff ffae 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0XA4);
 8000e34:	20a4      	movs	r0, #164	; 0xa4
 8000e36:	f7ff ffab 	bl	8000d90 <oled_write_cmd>
    //设置显示抵消移位映射内存计数器
    oled_write_cmd(0XD3);
 8000e3a:	20d3      	movs	r0, #211	; 0xd3
 8000e3c:	f7ff ffa8 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0X00);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff ffa5 	bl	8000d90 <oled_write_cmd>
    //设置显示时钟分频因子/振荡器频率
    oled_write_cmd(0XD5);
 8000e46:	20d5      	movs	r0, #213	; 0xd5
 8000e48:	f7ff ffa2 	bl	8000d90 <oled_write_cmd>
    //低4位定义显示时钟(屏幕的刷新时间)（默认：0000）分频因子= [3:0]+1
    //高4位定义振荡器频率（默认：1000）
    oled_write_cmd(0XF0);
 8000e4c:	20f0      	movs	r0, #240	; 0xf0
 8000e4e:	f7ff ff9f 	bl	8000d90 <oled_write_cmd>
    //时钟预充电周期
    oled_write_cmd(0XD9);
 8000e52:	20d9      	movs	r0, #217	; 0xd9
 8000e54:	f7ff ff9c 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0X22);
 8000e58:	2022      	movs	r0, #34	; 0x22
 8000e5a:	f7ff ff99 	bl	8000d90 <oled_write_cmd>
    //设置COM硬件应脚配置
    oled_write_cmd(0XDA);
 8000e5e:	20da      	movs	r0, #218	; 0xda
 8000e60:	f7ff ff96 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0X12);
 8000e64:	2012      	movs	r0, #18
 8000e66:	f7ff ff93 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0XDB);
 8000e6a:	20db      	movs	r0, #219	; 0xdb
 8000e6c:	f7ff ff90 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0X20);
 8000e70:	2020      	movs	r0, #32
 8000e72:	f7ff ff8d 	bl	8000d90 <oled_write_cmd>
    //电荷泵设置（初始化时必须打开，否则看不到显示）
    oled_write_cmd(0X8D);
 8000e76:	208d      	movs	r0, #141	; 0x8d
 8000e78:	f7ff ff8a 	bl	8000d90 <oled_write_cmd>
    oled_write_cmd(0X14);
 8000e7c:	2014      	movs	r0, #20
 8000e7e:	f7ff ff87 	bl	8000d90 <oled_write_cmd>
    //开显示
    oled_write_cmd(0XAF);

}
 8000e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    oled_write_cmd(0XAF);
 8000e86:	20af      	movs	r0, #175	; 0xaf
 8000e88:	f7ff bf82 	b.w	8000d90 <oled_write_cmd>

08000e8c <oled_update_screen>:
 * @par         修改日志
 *               Ver0.0.1:
                     XinC_Guo, 2018/07/18, 初始化版本\n
 */
void oled_update_screen(void)
{
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	24b0      	movs	r4, #176	; 0xb0
 8000e90:	4d0a      	ldr	r5, [pc, #40]	; (8000ebc <oled_update_screen+0x30>)
    uint8_t line_index;
    for(line_index=0    ;   line_index<8   ;  line_index++)
    {
        oled_write_cmd(0xb0+line_index);
 8000e92:	4620      	mov	r0, r4
 8000e94:	f7ff ff7c 	bl	8000d90 <oled_write_cmd>
        oled_write_cmd(0x00);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff ff79 	bl	8000d90 <oled_write_cmd>
    for(line_index=0    ;   line_index<8   ;  line_index++)
 8000e9e:	3401      	adds	r4, #1
        oled_write_cmd(0x10);
 8000ea0:	2010      	movs	r0, #16
 8000ea2:	f7ff ff75 	bl	8000d90 <oled_write_cmd>
    for(line_index=0    ;   line_index<8   ;  line_index++)
 8000ea6:	b2e4      	uxtb	r4, r4

        //数组设置的时候是按一行一行设置，但是写入的时候是按1列8行为一个字节写入
        oled_write_long_data(&g_oled_buffer[SSD1306_WIDTH * line_index],SSD1306_WIDTH);
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	f7ff ff84 	bl	8000db8 <oled_write_long_data>
    for(line_index=0    ;   line_index<8   ;  line_index++)
 8000eb0:	2cb8      	cmp	r4, #184	; 0xb8
 8000eb2:	f105 0580 	add.w	r5, r5, #128	; 0x80
 8000eb6:	d1ec      	bne.n	8000e92 <oled_update_screen+0x6>
    }
}
 8000eb8:	bd38      	pop	{r3, r4, r5, pc}
 8000eba:	bf00      	nop
 8000ebc:	20003f60 	.word	0x20003f60

08000ec0 <oled_clear>:
 *               Ver0.0.1:
                     XinC_Guo, 2018/07/18, 初始化版本\n
 */

void oled_clear(void)
{
 8000ec0:	b508      	push	{r3, lr}
    //清0缓存
    memset(g_oled_buffer,SSD1306_COLOR_BLACK,sizeof(g_oled_buffer));
 8000ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <oled_clear+0x18>)
 8000eca:	f003 fe21 	bl	8004b10 <memset>
    oled_update_screen();
}
 8000ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    oled_update_screen();
 8000ed2:	f7ff bfdb 	b.w	8000e8c <oled_update_screen>
 8000ed6:	bf00      	nop
 8000ed8:	20003f60 	.word	0x20003f60

08000edc <oled_drawpixel>:
 * @param[in]   color   色值0/1
 * @retval
 */
void oled_drawpixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
    if (
 8000edc:	287f      	cmp	r0, #127	; 0x7f
{
 8000ede:	b530      	push	{r4, r5, lr}
    if (
 8000ee0:	d811      	bhi.n	8000f06 <oled_drawpixel+0x2a>
            x >= SSD1306_WIDTH ||
 8000ee2:	293f      	cmp	r1, #63	; 0x3f
 8000ee4:	d80f      	bhi.n	8000f06 <oled_drawpixel+0x2a>
    {
        return;
    }
    if (color == SSD1306_COLOR_WHITE)
    {
        g_oled_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);//保留同一列的其他数字，值其中一位为1
 8000ee6:	2401      	movs	r4, #1
 8000ee8:	08cb      	lsrs	r3, r1, #3
 8000eea:	4d07      	ldr	r5, [pc, #28]	; (8000f08 <oled_drawpixel+0x2c>)
 8000eec:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8000ef0:	f001 0107 	and.w	r1, r1, #7
 8000ef4:	562b      	ldrsb	r3, [r5, r0]
 8000ef6:	fa04 f101 	lsl.w	r1, r4, r1
 8000efa:	b249      	sxtb	r1, r1
    if (color == SSD1306_COLOR_WHITE)
 8000efc:	42a2      	cmp	r2, r4
        g_oled_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);//保留同一列的其他数字，值其中一位为1
 8000efe:	bf0c      	ite	eq
 8000f00:	430b      	orreq	r3, r1
    }
    else
    {
        g_oled_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f02:	438b      	bicne	r3, r1
 8000f04:	542b      	strb	r3, [r5, r0]
    }
}
 8000f06:	bd30      	pop	{r4, r5, pc}
 8000f08:	20003f60 	.word	0x20003f60

08000f0c <oled_show_char>:
 * @param[in]   font 显示的字形
 * @param[in]   color 颜色  1显示 0不显示
 * @retval
*/
char oled_show_char(uint16_t x,uint16_t y,char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8000f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f10:	461d      	mov	r5, r3
    uint32_t i, b, j;
    if ( SSD1306_WIDTH <= (oled.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (oled.CurrentY + Font->FontHeight) )
 8000f12:	4c21      	ldr	r4, [pc, #132]	; (8000f98 <oled_show_char+0x8c>)
{
 8000f14:	4616      	mov	r6, r2
    if ( SSD1306_WIDTH <= (oled.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (oled.CurrentY + Font->FontHeight) )
 8000f16:	8823      	ldrh	r3, [r4, #0]
 8000f18:	682a      	ldr	r2, [r5, #0]
{
 8000f1a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    if ( SSD1306_WIDTH <= (oled.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (oled.CurrentY + Font->FontHeight) )
 8000f1e:	4413      	add	r3, r2
 8000f20:	2b7f      	cmp	r3, #127	; 0x7f
 8000f22:	d837      	bhi.n	8000f94 <oled_show_char+0x88>
 8000f24:	8863      	ldrh	r3, [r4, #2]
 8000f26:	686a      	ldr	r2, [r5, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f2c:	d832      	bhi.n	8000f94 <oled_show_char+0x88>
    {
        return 0;
    }
    if(0 == is_show_str)
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <oled_show_char+0x90>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b90b      	cbnz	r3, 8000f38 <oled_show_char+0x2c>
    oled.CurrentX = x;
 8000f34:	8020      	strh	r0, [r4, #0]
    oled.CurrentY = y;
 8000f36:	8061      	strh	r1, [r4, #2]

    for (i = 0; i < Font->FontHeight; i++)
    {

        b = DATA [(ch - 32) * Font->FontHeight + i];
        for (j = 0; j < Font->FontWidth; j++)
 8000f38:	2700      	movs	r7, #0
        b = DATA [(ch - 32) * Font->FontHeight + i];
 8000f3a:	f1a6 0a20 	sub.w	sl, r6, #32
    for (i = 0; i < Font->FontHeight; i++)
 8000f3e:	686b      	ldr	r3, [r5, #4]
 8000f40:	42bb      	cmp	r3, r7
 8000f42:	d806      	bhi.n	8000f52 <oled_show_char+0x46>
            {
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t)!color);
            }
        }
    }
    oled.CurrentX += Font->FontWidth;
 8000f44:	8822      	ldrh	r2, [r4, #0]
 8000f46:	682b      	ldr	r3, [r5, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	8023      	strh	r3, [r4, #0]
    if(0 == is_show_str)
    {
        //oled_update_screen();
    }
    return ch;
}
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (j = 0; j < Font->FontWidth; j++)
 8000f52:	f04f 0900 	mov.w	r9, #0
        b = DATA [(ch - 32) * Font->FontHeight + i];
 8000f56:	fb03 730a 	mla	r3, r3, sl, r7
 8000f5a:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <oled_show_char+0x94>)
 8000f5c:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
        for (j = 0; j < Font->FontWidth; j++)
 8000f60:	682a      	ldr	r2, [r5, #0]
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f62:	8820      	ldrh	r0, [r4, #0]
        for (j = 0; j < Font->FontWidth; j++)
 8000f64:	4591      	cmp	r9, r2
 8000f66:	d301      	bcc.n	8000f6c <oled_show_char+0x60>
    for (i = 0; i < Font->FontHeight; i++)
 8000f68:	3701      	adds	r7, #1
 8000f6a:	e7e8      	b.n	8000f3e <oled_show_char+0x32>
            if ((b << j) & 0x80)
 8000f6c:	fa0b f209 	lsl.w	r2, fp, r9
 8000f70:	0613      	lsls	r3, r2, #24
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f72:	bf58      	it	pl
 8000f74:	fab8 f288 	clzpl	r2, r8
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f78:	8861      	ldrh	r1, [r4, #2]
 8000f7a:	4448      	add	r0, r9
 8000f7c:	4439      	add	r1, r7
 8000f7e:	bf48      	it	mi
 8000f80:	4642      	movmi	r2, r8
 8000f82:	b280      	uxth	r0, r0
 8000f84:	b289      	uxth	r1, r1
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f86:	bf58      	it	pl
 8000f88:	0952      	lsrpl	r2, r2, #5
 8000f8a:	f7ff ffa7 	bl	8000edc <oled_drawpixel>
        for (j = 0; j < Font->FontWidth; j++)
 8000f8e:	f109 0901 	add.w	r9, r9, #1
 8000f92:	e7e5      	b.n	8000f60 <oled_show_char+0x54>
        return 0;
 8000f94:	2600      	movs	r6, #0
 8000f96:	e7d9      	b.n	8000f4c <oled_show_char+0x40>
 8000f98:	20004362 	.word	0x20004362
 8000f9c:	20004360 	.word	0x20004360
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <oled_show_china>:
 * @param[in]   font 显示的字形
 * @param[in]   color 颜色  1显示 0不显示
 * @retval
*/
char oled_show_china(uint16_t x,uint16_t y,int ch, SSD1306_COLOR_t color)
{
 8000fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa8:	461f      	mov	r7, r3
    uint32_t i, b, j;

	  if(0 == is_show_str)
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <oled_show_china+0xc4>)
{
 8000fac:	4614      	mov	r4, r2
	  if(0 == is_show_str)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800106c <oled_show_china+0xc8>
 8000fb4:	b91b      	cbnz	r3, 8000fbe <oled_show_china+0x1a>
    oled.CurrentX = x;
 8000fb6:	f8a8 0000 	strh.w	r0, [r8]
    oled.CurrentY = y;
 8000fba:	f8a8 1002 	strh.w	r1, [r8, #2]
    {
        oled_gotoXY(x,y);
    }
    if ( SSD1306_WIDTH <= (oled.CurrentX + 16) || SSD1306_HEIGHT <= (oled.CurrentY + 16) )
 8000fbe:	f8b8 5000 	ldrh.w	r5, [r8]
 8000fc2:	2d6f      	cmp	r5, #111	; 0x6f
 8000fc4:	d84e      	bhi.n	8001064 <oled_show_china+0xc0>
 8000fc6:	f8b8 a002 	ldrh.w	sl, [r8, #2]
 8000fca:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
 8000fce:	d849      	bhi.n	8001064 <oled_show_china+0xc0>
 8000fd0:	4e27      	ldr	r6, [pc, #156]	; (8001070 <oled_show_china+0xcc>)
 8000fd2:	f10a 0910 	add.w	r9, sl, #16
 8000fd6:	f105 0308 	add.w	r3, r5, #8
 8000fda:	eb06 16c4 	add.w	r6, r6, r4, lsl #7
 8000fde:	fa1f f989 	uxth.w	r9, r9
 8000fe2:	9301      	str	r3, [sp, #4]

    for (i = 0; i < 16; i++)
    {

        b = hanzi [ch*32 + i*2];
        for (j = 0; j < 8; j++)
 8000fe4:	f04f 0b00 	mov.w	fp, #0
        b = hanzi [ch*32 + i*2];
 8000fe8:	6833      	ldr	r3, [r6, #0]
 8000fea:	9300      	str	r3, [sp, #0]
        {
            if ((b << j) & 0x80)
 8000fec:	9b00      	ldr	r3, [sp, #0]
            {
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t) color);
 8000fee:	eb05 000b 	add.w	r0, r5, fp
            if ((b << j) & 0x80)
 8000ff2:	fa03 f20b 	lsl.w	r2, r3, fp
 8000ff6:	0612      	lsls	r2, r2, #24
            }
            else
            {
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000ff8:	bf56      	itet	pl
 8000ffa:	fab7 f287 	clzpl	r2, r7
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t) color);
 8000ffe:	463a      	movmi	r2, r7
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001000:	0952      	lsrpl	r2, r2, #5
 8001002:	4651      	mov	r1, sl
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t) color);
 8001004:	b280      	uxth	r0, r0
        for (j = 0; j < 8; j++)
 8001006:	f10b 0b01 	add.w	fp, fp, #1
                oled_drawpixel(oled.CurrentX + j, (oled.CurrentY + i), (SSD1306_COLOR_t)!color);
 800100a:	f7ff ff67 	bl	8000edc <oled_drawpixel>
        for (j = 0; j < 8; j++)
 800100e:	f1bb 0f08 	cmp.w	fp, #8
 8001012:	d1eb      	bne.n	8000fec <oled_show_china+0x48>
            }
        }
				b = hanzi [ch*32 + i*2 +1];
				for (j = 0; j < 8; j++)
 8001014:	f04f 0b00 	mov.w	fp, #0
				b = hanzi [ch*32 + i*2 +1];
 8001018:	6873      	ldr	r3, [r6, #4]
 800101a:	9300      	str	r3, [sp, #0]
        {
            if ((b << j) & 0x80)
 800101c:	9b01      	ldr	r3, [sp, #4]
            {
                oled_drawpixel(oled.CurrentX + j + 8, (oled.CurrentY + i), (SSD1306_COLOR_t) color);
            }
            else
            {
                oled_drawpixel(oled.CurrentX + j + 8, (oled.CurrentY + i), (SSD1306_COLOR_t)!color);
 800101e:	4651      	mov	r1, sl
 8001020:	eb03 000b 	add.w	r0, r3, fp
            if ((b << j) & 0x80)
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	b280      	uxth	r0, r0
 8001028:	fa03 f20b 	lsl.w	r2, r3, fp
 800102c:	0613      	lsls	r3, r2, #24
                oled_drawpixel(oled.CurrentX + j + 8, (oled.CurrentY + i), (SSD1306_COLOR_t)!color);
 800102e:	bf56      	itet	pl
 8001030:	fab7 f287 	clzpl	r2, r7
                oled_drawpixel(oled.CurrentX + j + 8, (oled.CurrentY + i), (SSD1306_COLOR_t) color);
 8001034:	463a      	movmi	r2, r7
                oled_drawpixel(oled.CurrentX + j + 8, (oled.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001036:	0952      	lsrpl	r2, r2, #5
				for (j = 0; j < 8; j++)
 8001038:	f10b 0b01 	add.w	fp, fp, #1
                oled_drawpixel(oled.CurrentX + j + 8, (oled.CurrentY + i), (SSD1306_COLOR_t)!color);
 800103c:	f7ff ff4e 	bl	8000edc <oled_drawpixel>
				for (j = 0; j < 8; j++)
 8001040:	f1bb 0f08 	cmp.w	fp, #8
 8001044:	d1ea      	bne.n	800101c <oled_show_china+0x78>
    for (i = 0; i < 16; i++)
 8001046:	f10a 0101 	add.w	r1, sl, #1
 800104a:	fa1f fa81 	uxth.w	sl, r1
 800104e:	45d1      	cmp	r9, sl
 8001050:	f106 0608 	add.w	r6, r6, #8
 8001054:	d1c6      	bne.n	8000fe4 <oled_show_china+0x40>
            }
        }
    }
    oled.CurrentX += 16;
 8001056:	3510      	adds	r5, #16
 8001058:	f8a8 5000 	strh.w	r5, [r8]
    if(0 == is_show_str)
    {
        //oled_update_screen();
    }
    return ch;
 800105c:	b2e0      	uxtb	r0, r4
}
 800105e:	b003      	add	sp, #12
 8001060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8001064:	2000      	movs	r0, #0
 8001066:	e7fa      	b.n	800105e <oled_show_china+0xba>
 8001068:	20004360 	.word	0x20004360
 800106c:	20004362 	.word	0x20004362
 8001070:	200017c0 	.word	0x200017c0

08001074 <oled_show_str>:
 * @param[in]   font 显示的字形
 * @param[in]   color 颜色  1显示 0不显示
 * @retval
 */
char oled_show_str(uint16_t x,uint16_t y, char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8001074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001078:	4698      	mov	r8, r3
    is_show_str=1;
 800107a:	2301      	movs	r3, #1
{
 800107c:	4605      	mov	r5, r0
 800107e:	460e      	mov	r6, r1
    is_show_str=1;
 8001080:	4f0e      	ldr	r7, [pc, #56]	; (80010bc <oled_show_str+0x48>)
{
 8001082:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
    is_show_str=1;
 8001086:	703b      	strb	r3, [r7, #0]
    oled.CurrentX = x;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <oled_show_str+0x4c>)
 800108a:	1e54      	subs	r4, r2, #1
 800108c:	8018      	strh	r0, [r3, #0]
    oled.CurrentY = y;
 800108e:	8059      	strh	r1, [r3, #2]
    oled_gotoXY(x,y);
    while (*str)
 8001090:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8001094:	b90a      	cbnz	r2, 800109a <oled_show_str+0x26>
            is_show_str=0;
            return *str;
        }
        str++;
    }
    is_show_str=0;
 8001096:	703a      	strb	r2, [r7, #0]
    //oled_update_screen();
    return *str;
 8001098:	e00b      	b.n	80010b2 <oled_show_str+0x3e>
        if (oled_show_char(x,y,*str, Font, color) != *str)
 800109a:	4643      	mov	r3, r8
 800109c:	4631      	mov	r1, r6
 800109e:	4628      	mov	r0, r5
 80010a0:	f8cd 9000 	str.w	r9, [sp]
 80010a4:	f7ff ff32 	bl	8000f0c <oled_show_char>
 80010a8:	7822      	ldrb	r2, [r4, #0]
 80010aa:	4290      	cmp	r0, r2
 80010ac:	d0f0      	beq.n	8001090 <oled_show_str+0x1c>
            is_show_str=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	703b      	strb	r3, [r7, #0]
}
 80010b2:	4610      	mov	r0, r2
 80010b4:	b003      	add	sp, #12
 80010b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010ba:	bf00      	nop
 80010bc:	20004360 	.word	0x20004360
 80010c0:	20004362 	.word	0x20004362

080010c4 <OLED_ShowNumber>:
函数功能：显示2个数字
入口参数：x,y :起点坐标; len :数字的位数; size:字体大小; mode:模式, 0,填充模式, 1,叠加模式; num:数值(0~4294967295);
返回  值：无
**************************************************************************/
void OLED_ShowNumber(unsigned char x,unsigned char y,unsigned int num,unsigned char len,unsigned char size)
{
 80010c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char t,temp;
    unsigned char enshow=0;
    for(t=0;t<len;t++)
 80010c8:	2600      	movs	r6, #0
 80010ca:	4604      	mov	r4, r0
    unsigned char enshow=0;
 80010cc:	46b3      	mov	fp, r6
 80010ce:	f04f 0a0a 	mov.w	sl, #10
        temp=(num/oled_pow(10,len-t-1))%10;
        if(enshow==0&&t<(len-1))
        {
            if(temp==0)
            {
                oled_show_char(x+(size/2)*t,y,' ',&fontone,SSD1306_COLOR_WHITE);
 80010d2:	4689      	mov	r9, r1
{
 80010d4:	b085      	sub	sp, #20
                continue;
            }else enshow=1;

        }
        oled_show_char(x+(size/2)*t,y,temp+'0',&fontone,SSD1306_COLOR_WHITE);
 80010d6:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
{
 80010da:	9203      	str	r2, [sp, #12]
 80010dc:	1e5f      	subs	r7, r3, #1
        oled_show_char(x+(size/2)*t,y,temp+'0',&fontone,SSD1306_COLOR_WHITE);
 80010de:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80010e2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8001150 <OLED_ShowNumber+0x8c>
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	b2fd      	uxtb	r5, r7
    for(t=0;t<len;t++)
 80010ea:	2dff      	cmp	r5, #255	; 0xff
 80010ec:	d125      	bne.n	800113a <OLED_ShowNumber+0x76>
    }
}
 80010ee:	b005      	add	sp, #20
 80010f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(n--)result*=m;
 80010f4:	fb0a f202 	mul.w	r2, sl, r2
 80010f8:	3801      	subs	r0, #1
 80010fa:	b2c0      	uxtb	r0, r0
 80010fc:	28ff      	cmp	r0, #255	; 0xff
 80010fe:	d1f9      	bne.n	80010f4 <OLED_ShowNumber+0x30>
        temp=(num/oled_pow(10,len-t-1))%10;
 8001100:	9b03      	ldr	r3, [sp, #12]
 8001102:	fbb3 f2f2 	udiv	r2, r3, r2
 8001106:	fbb2 f0fa 	udiv	r0, r2, sl
 800110a:	fb0a 2210 	mls	r2, sl, r0, r2
 800110e:	b2d0      	uxtb	r0, r2
        if(enshow==0&&t<(len-1))
 8001110:	f1bb 0f00 	cmp.w	fp, #0
 8001114:	d115      	bne.n	8001142 <OLED_ShowNumber+0x7e>
 8001116:	42b7      	cmp	r7, r6
 8001118:	dd13      	ble.n	8001142 <OLED_ShowNumber+0x7e>
            if(temp==0)
 800111a:	2301      	movs	r3, #1
 800111c:	b982      	cbnz	r2, 8001140 <OLED_ShowNumber+0x7c>
                oled_show_char(x+(size/2)*t,y,' ',&fontone,SSD1306_COLOR_WHITE);
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2220      	movs	r2, #32
 8001122:	4643      	mov	r3, r8
        oled_show_char(x+(size/2)*t,y,temp+'0',&fontone,SSD1306_COLOR_WHITE);
 8001124:	4620      	mov	r0, r4
 8001126:	4649      	mov	r1, r9
 8001128:	f7ff fef0 	bl	8000f0c <oled_show_char>
    for(t=0;t<len;t++)
 800112c:	9b02      	ldr	r3, [sp, #8]
 800112e:	3d01      	subs	r5, #1
 8001130:	441c      	add	r4, r3
 8001132:	3601      	adds	r6, #1
 8001134:	b2a4      	uxth	r4, r4
 8001136:	b2ed      	uxtb	r5, r5
 8001138:	e7d7      	b.n	80010ea <OLED_ShowNumber+0x26>
 800113a:	4628      	mov	r0, r5
    unsigned int result=1;
 800113c:	2201      	movs	r2, #1
 800113e:	e7db      	b.n	80010f8 <OLED_ShowNumber+0x34>
 8001140:	469b      	mov	fp, r3
        oled_show_char(x+(size/2)*t,y,temp+'0',&fontone,SSD1306_COLOR_WHITE);
 8001142:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8001146:	2001      	movs	r0, #1
 8001148:	4643      	mov	r3, r8
 800114a:	9000      	str	r0, [sp, #0]
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	e7e9      	b.n	8001124 <OLED_ShowNumber+0x60>
 8001150:	20003f4c 	.word	0x20003f4c

08001154 <MX_RTC_Init>:

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001154:	2300      	movs	r3, #0
{
 8001156:	b513      	push	{r0, r1, r4, lr}
  RTC_TimeTypeDef sTime = {0};
 8001158:	f8ad 3000 	strh.w	r3, [sp]
 800115c:	f88d 3002 	strb.w	r3, [sp, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001160:	9301      	str	r3, [sp, #4]
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 8001166:	4816      	ldr	r0, [pc, #88]	; (80011c0 <MX_RTC_Init+0x6c>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <MX_RTC_Init+0x70>)
 800116a:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800116e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001172:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001174:	f003 f832 	bl	80041dc <HAL_RTC_Init>
 8001178:	b108      	cbz	r0, 800117e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800117a:	f7ff fc27 	bl	80009cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 800117e:	2401      	movs	r4, #1
  sTime.Minutes = 0x1;
  sTime.Seconds = 0x1;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001180:	4669      	mov	r1, sp
 8001182:	4622      	mov	r2, r4
 8001184:	480e      	ldr	r0, [pc, #56]	; (80011c0 <MX_RTC_Init+0x6c>)
  sTime.Hours = 0x1;
 8001186:	f88d 4000 	strb.w	r4, [sp]
  sTime.Minutes = 0x1;
 800118a:	f88d 4001 	strb.w	r4, [sp, #1]
  sTime.Seconds = 0x1;
 800118e:	f88d 4002 	strb.w	r4, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001192:	f002 fe76 	bl	8003e82 <HAL_RTC_SetTime>
 8001196:	b108      	cbz	r0, 800119c <MX_RTC_Init+0x48>
  {
    Error_Handler();
 8001198:	f7ff fc18 	bl	80009cc <Error_Handler>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
  DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.Date = 0x1;
  DateToUpdate.Year = 0x1;

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800119c:	2201      	movs	r2, #1
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <MX_RTC_Init+0x6c>)
 80011a0:	a901      	add	r1, sp, #4
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011a2:	f88d 4004 	strb.w	r4, [sp, #4]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80011a6:	f88d 4005 	strb.w	r4, [sp, #5]
  DateToUpdate.Date = 0x1;
 80011aa:	f88d 4006 	strb.w	r4, [sp, #6]
  DateToUpdate.Year = 0x1;
 80011ae:	f88d 4007 	strb.w	r4, [sp, #7]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80011b2:	f002 ff73 	bl	800409c <HAL_RTC_SetDate>
 80011b6:	b108      	cbz	r0, 80011bc <MX_RTC_Init+0x68>
  {
    Error_Handler();
 80011b8:	f7ff fc08 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011bc:	b002      	add	sp, #8
 80011be:	bd10      	pop	{r4, pc}
 80011c0:	20004368 	.word	0x20004368
 80011c4:	40002800 	.word	0x40002800

080011c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80011c8:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_RTC_MspInit+0x30>)
 80011cc:	6802      	ldr	r2, [r0, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d10f      	bne.n	80011f2 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80011d2:	f002 fa45 	bl	8003660 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_RTC_MspInit+0x34>)
 80011d8:	69da      	ldr	r2, [r3, #28]
 80011da:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80011de:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011e0:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <HAL_RTC_MspInit+0x38>)
 80011ee:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011f2:	b003      	add	sp, #12
 80011f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80011f8:	40002800 	.word	0x40002800
 80011fc:	40021000 	.word	0x40021000
 8001200:	42420000 	.word	0x42420000

08001204 <diaplaySettingAMPM>:
	oled_clear();
}

// 设置AM/PM（显示）
void diaplaySettingAMPM(void)
{
 8001204:	b537      	push	{r0, r1, r2, r4, r5, lr}
	oled_show_china(0,0,56, SSD1306_COLOR_WHITE);
 8001206:	2100      	movs	r1, #0
	oled_show_china(16,0,57, SSD1306_COLOR_WHITE);
	oled_show_str(32, 0,"AM/PM:", &fontone, SSD1306_COLOR_WHITE);
 8001208:	2401      	movs	r4, #1
 800120a:	4d19      	ldr	r5, [pc, #100]	; (8001270 <diaplaySettingAMPM+0x6c>)
	oled_show_china(0,0,56, SSD1306_COLOR_WHITE);
 800120c:	2301      	movs	r3, #1
 800120e:	2238      	movs	r2, #56	; 0x38
 8001210:	4608      	mov	r0, r1
 8001212:	f7ff fec7 	bl	8000fa4 <oled_show_china>
	oled_show_china(16,0,57, SSD1306_COLOR_WHITE);
 8001216:	2301      	movs	r3, #1
 8001218:	2239      	movs	r2, #57	; 0x39
 800121a:	2100      	movs	r1, #0
 800121c:	2010      	movs	r0, #16
 800121e:	f7ff fec1 	bl	8000fa4 <oled_show_china>
	oled_show_str(32, 0,"AM/PM:", &fontone, SSD1306_COLOR_WHITE);
 8001222:	462b      	mov	r3, r5
 8001224:	2100      	movs	r1, #0
 8001226:	4a13      	ldr	r2, [pc, #76]	; (8001274 <diaplaySettingAMPM+0x70>)
 8001228:	9400      	str	r4, [sp, #0]
 800122a:	2020      	movs	r0, #32
 800122c:	f7ff ff22 	bl	8001074 <oled_show_str>
	oled_show_str(0, 20,"KEY1:", &fontone, SSD1306_COLOR_WHITE);
 8001230:	462b      	mov	r3, r5
 8001232:	2114      	movs	r1, #20
 8001234:	4a10      	ldr	r2, [pc, #64]	; (8001278 <diaplaySettingAMPM+0x74>)
 8001236:	9400      	str	r4, [sp, #0]
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ff1b 	bl	8001074 <oled_show_str>
	oled_show_china(40,20,1, SSD1306_COLOR_WHITE);
 800123e:	4623      	mov	r3, r4
 8001240:	4622      	mov	r2, r4
 8001242:	2114      	movs	r1, #20
 8001244:	2028      	movs	r0, #40	; 0x28
 8001246:	f7ff fead 	bl	8000fa4 <oled_show_china>
	oled_show_str(0, 40,"KEY2:", &fontone, SSD1306_COLOR_WHITE);
 800124a:	462b      	mov	r3, r5
 800124c:	2128      	movs	r1, #40	; 0x28
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <diaplaySettingAMPM+0x78>)
 8001250:	9400      	str	r4, [sp, #0]
 8001252:	2000      	movs	r0, #0
 8001254:	f7ff ff0e 	bl	8001074 <oled_show_str>
	oled_show_china(40,40,60, SSD1306_COLOR_WHITE);
 8001258:	2128      	movs	r1, #40	; 0x28
 800125a:	4623      	mov	r3, r4
 800125c:	223c      	movs	r2, #60	; 0x3c
 800125e:	4608      	mov	r0, r1
 8001260:	f7ff fea0 	bl	8000fa4 <oled_show_china>
	oled_update_screen();
}
 8001264:	b003      	add	sp, #12
 8001266:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	oled_update_screen();
 800126a:	f7ff be0f 	b.w	8000e8c <oled_update_screen>
 800126e:	bf00      	nop
 8001270:	20003f4c 	.word	0x20003f4c
 8001274:	08004bb6 	.word	0x08004bb6
 8001278:	08004bbd 	.word	0x08004bbd
 800127c:	08004bc3 	.word	0x08004bc3

08001280 <settingAMPM>:
{
 8001280:	b538      	push	{r3, r4, r5, lr}
	uint8_t keyValueAMPM = readKeyValue();
 8001282:	f7ff fa59 	bl	8000738 <readKeyValue>
 8001286:	4605      	mov	r5, r0
	uint8_t commandFromBluetooth = returnFlagBluetooth();
 8001288:	f7ff fc46 	bl	8000b18 <returnFlagBluetooth>
 800128c:	4604      	mov	r4, r0
	clearBluetoothCommand();
 800128e:	f7ff fc49 	bl	8000b24 <clearBluetoothCommand>
	oled_clear();
 8001292:	f7ff fe15 	bl	8000ec0 <oled_clear>
	while((keyValueAMPM != 1) && (keyValueAMPM != 2) &&
 8001296:	1e6b      	subs	r3, r5, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d911      	bls.n	80012c2 <settingAMPM+0x42>
 800129e:	2c10      	cmp	r4, #16
 80012a0:	d01e      	beq.n	80012e0 <settingAMPM+0x60>
			(commandFromBluetooth != 16) && (commandFromBluetooth != 17))
 80012a2:	2c11      	cmp	r4, #17
 80012a4:	d102      	bne.n	80012ac <settingAMPM+0x2c>
		flagAMPM = 0;
 80012a6:	2200      	movs	r2, #0
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <settingAMPM+0x68>)
 80012aa:	e01b      	b.n	80012e4 <settingAMPM+0x64>
		diaplaySettingAMPM();
 80012ac:	f7ff ffaa 	bl	8001204 <diaplaySettingAMPM>
		keyValueAMPM = readKeyValue();
 80012b0:	f7ff fa42 	bl	8000738 <readKeyValue>
 80012b4:	4605      	mov	r5, r0
		commandFromBluetooth = returnFlagBluetooth();
 80012b6:	f7ff fc2f 	bl	8000b18 <returnFlagBluetooth>
 80012ba:	4604      	mov	r4, r0
		clearBluetoothCommand();
 80012bc:	f7ff fc32 	bl	8000b24 <clearBluetoothCommand>
 80012c0:	e7e9      	b.n	8001296 <settingAMPM+0x16>
	switch(keyValueAMPM)
 80012c2:	2d01      	cmp	r5, #1
		flagAMPM = 0;
 80012c4:	bf18      	it	ne
 80012c6:	2200      	movne	r2, #0
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <settingAMPM+0x68>)
		flagAMPM = 1;
 80012ca:	bf0c      	ite	eq
 80012cc:	701d      	strbeq	r5, [r3, #0]
		flagAMPM = 0;
 80012ce:	701a      	strbne	r2, [r3, #0]
	switch(commandFromBluetooth)
 80012d0:	2c10      	cmp	r4, #16
 80012d2:	d005      	beq.n	80012e0 <settingAMPM+0x60>
 80012d4:	2c11      	cmp	r4, #17
 80012d6:	d0e6      	beq.n	80012a6 <settingAMPM+0x26>
}
 80012d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	oled_clear();
 80012dc:	f7ff bdf0 	b.w	8000ec0 <oled_clear>
		flagAMPM = 1;
 80012e0:	2201      	movs	r2, #1
 80012e2:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <settingAMPM+0x68>)
		flagAMPM = 0;
 80012e4:	701a      	strb	r2, [r3, #0]
		break;
 80012e6:	e7f7      	b.n	80012d8 <settingAMPM+0x58>
 80012e8:	20003f54 	.word	0x20003f54

080012ec <setDateAndTimeShow>:

// 实时显示设置情况
void setDateAndTimeShow(int settingFlag)
{
 80012ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// 设置时间日期（显示）
	oled_show_china(0,0,56, SSD1306_COLOR_WHITE);
 80012ee:	2100      	movs	r1, #0
 80012f0:	2301      	movs	r3, #1
 80012f2:	2238      	movs	r2, #56	; 0x38
 80012f4:	4608      	mov	r0, r1
 80012f6:	f7ff fe55 	bl	8000fa4 <oled_show_china>
	oled_show_china(16,0,57, SSD1306_COLOR_WHITE);
 80012fa:	2301      	movs	r3, #1
 80012fc:	2239      	movs	r2, #57	; 0x39
 80012fe:	2100      	movs	r1, #0
 8001300:	2010      	movs	r0, #16
 8001302:	f7ff fe4f 	bl	8000fa4 <oled_show_china>
	oled_show_china(32,0,31, SSD1306_COLOR_WHITE);
 8001306:	2301      	movs	r3, #1
 8001308:	221f      	movs	r2, #31
 800130a:	2100      	movs	r1, #0
 800130c:	2020      	movs	r0, #32
 800130e:	f7ff fe49 	bl	8000fa4 <oled_show_china>
	oled_show_china(48,0,32, SSD1306_COLOR_WHITE);
 8001312:	2301      	movs	r3, #1
 8001314:	2220      	movs	r2, #32
 8001316:	2100      	movs	r1, #0
 8001318:	2030      	movs	r0, #48	; 0x30
 800131a:	f7ff fe43 	bl	8000fa4 <oled_show_china>
	oled_show_china(64,0,64, SSD1306_COLOR_WHITE);
 800131e:	2240      	movs	r2, #64	; 0x40
	oled_show_china(80,0,65, SSD1306_COLOR_WHITE);

	// 基本显示内容
	OLED_ShowNumber(0,20,2,1,8);
 8001320:	2508      	movs	r5, #8
	oled_show_china(64,0,64, SSD1306_COLOR_WHITE);
 8001322:	2301      	movs	r3, #1
 8001324:	2100      	movs	r1, #0
 8001326:	4610      	mov	r0, r2
 8001328:	f7ff fe3c 	bl	8000fa4 <oled_show_china>
	oled_show_china(80,0,65, SSD1306_COLOR_WHITE);
 800132c:	2301      	movs	r3, #1
 800132e:	2241      	movs	r2, #65	; 0x41
 8001330:	2100      	movs	r1, #0
 8001332:	2050      	movs	r0, #80	; 0x50
 8001334:	f7ff fe36 	bl	8000fa4 <oled_show_china>
	OLED_ShowNumber(10,20,0,1,8);
	if(tempArray[0] > 9)
 8001338:	4c64      	ldr	r4, [pc, #400]	; (80014cc <setDateAndTimeShow+0x1e0>)
	OLED_ShowNumber(0,20,2,1,8);
 800133a:	2301      	movs	r3, #1
 800133c:	2202      	movs	r2, #2
 800133e:	2114      	movs	r1, #20
 8001340:	2000      	movs	r0, #0
 8001342:	9500      	str	r5, [sp, #0]
 8001344:	f7ff febe 	bl	80010c4 <OLED_ShowNumber>
	OLED_ShowNumber(10,20,0,1,8);
 8001348:	2301      	movs	r3, #1
 800134a:	2200      	movs	r2, #0
 800134c:	2114      	movs	r1, #20
 800134e:	200a      	movs	r0, #10
 8001350:	9500      	str	r5, [sp, #0]
 8001352:	f7ff feb7 	bl	80010c4 <OLED_ShowNumber>
	if(tempArray[0] > 9)
 8001356:	7823      	ldrb	r3, [r4, #0]
 8001358:	2b09      	cmp	r3, #9
 800135a:	d963      	bls.n	8001424 <setDateAndTimeShow+0x138>
	{
		OLED_ShowNumber(20,20,tempArray[0],2,16);
 800135c:	2310      	movs	r3, #16
 800135e:	2114      	movs	r1, #20
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	4608      	mov	r0, r1
 8001364:	2302      	movs	r3, #2
 8001366:	7822      	ldrb	r2, [r4, #0]
	{
		OLED_ShowNumber(20,20,0,1,8);
		OLED_ShowNumber(30,20,tempArray[0],1,8);
	}

	oled_show_char(40, 20,'.', &fontone, SSD1306_COLOR_WHITE);
 8001368:	2501      	movs	r5, #1
		OLED_ShowNumber(30,20,tempArray[0],1,8);
 800136a:	f7ff feab 	bl	80010c4 <OLED_ShowNumber>
	oled_show_char(40, 20,'.', &fontone, SSD1306_COLOR_WHITE);
 800136e:	4b58      	ldr	r3, [pc, #352]	; (80014d0 <setDateAndTimeShow+0x1e4>)
 8001370:	222e      	movs	r2, #46	; 0x2e
 8001372:	2114      	movs	r1, #20
 8001374:	2028      	movs	r0, #40	; 0x28
 8001376:	9500      	str	r5, [sp, #0]
 8001378:	f7ff fdc8 	bl	8000f0c <oled_show_char>

	if(tempArray[1] > 9)
 800137c:	7863      	ldrb	r3, [r4, #1]
 800137e:	2b09      	cmp	r3, #9
 8001380:	d95d      	bls.n	800143e <setDateAndTimeShow+0x152>
	{
		OLED_ShowNumber(50,20,tempArray[1],2,16);
 8001382:	2310      	movs	r3, #16
 8001384:	2114      	movs	r1, #20
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2032      	movs	r0, #50	; 0x32
 800138a:	2302      	movs	r3, #2
 800138c:	7862      	ldrb	r2, [r4, #1]
	{
		OLED_ShowNumber(50,20,0,1,8);
		OLED_ShowNumber(60,20,tempArray[1],1,8);
	}

	oled_show_char(70, 20,'.', &fontone, SSD1306_COLOR_WHITE);
 800138e:	2501      	movs	r5, #1
		OLED_ShowNumber(60,20,tempArray[1],1,8);
 8001390:	f7ff fe98 	bl	80010c4 <OLED_ShowNumber>
	oled_show_char(70, 20,'.', &fontone, SSD1306_COLOR_WHITE);
 8001394:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <setDateAndTimeShow+0x1e4>)
 8001396:	222e      	movs	r2, #46	; 0x2e
 8001398:	2114      	movs	r1, #20
 800139a:	2046      	movs	r0, #70	; 0x46
 800139c:	9500      	str	r5, [sp, #0]
 800139e:	f7ff fdb5 	bl	8000f0c <oled_show_char>

	if(tempArray[2] > 9)
 80013a2:	78a3      	ldrb	r3, [r4, #2]
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	d958      	bls.n	800145a <setDateAndTimeShow+0x16e>
	{
		OLED_ShowNumber(80,20,tempArray[2],2,16);
 80013a8:	2310      	movs	r3, #16
 80013aa:	2114      	movs	r1, #20
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2050      	movs	r0, #80	; 0x50
 80013b0:	2302      	movs	r3, #2
 80013b2:	78a2      	ldrb	r2, [r4, #2]
	}
	else
	{
		OLED_ShowNumber(80,20,0,1,8);
		OLED_ShowNumber(90,20,tempArray[2],1,8);
 80013b4:	f7ff fe86 	bl	80010c4 <OLED_ShowNumber>
	}

	if(tempArray[3] > 9)
 80013b8:	78e3      	ldrb	r3, [r4, #3]
 80013ba:	2b09      	cmp	r3, #9
 80013bc:	d95b      	bls.n	8001476 <setDateAndTimeShow+0x18a>
	{
		OLED_ShowNumber(20,40,tempArray[3],2,16);
 80013be:	2310      	movs	r3, #16
 80013c0:	2128      	movs	r1, #40	; 0x28
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2014      	movs	r0, #20
 80013c6:	2302      	movs	r3, #2
 80013c8:	78e2      	ldrb	r2, [r4, #3]
	}
	else
	{
		OLED_ShowNumber(20,40,0,1,8);
		OLED_ShowNumber(30,40,tempArray[3],1,8);
 80013ca:	f7ff fe7b 	bl	80010c4 <OLED_ShowNumber>
	}

	oled_show_char(40, 40,':', &fontone, SSD1306_COLOR_WHITE);
 80013ce:	2501      	movs	r5, #1
 80013d0:	2128      	movs	r1, #40	; 0x28
 80013d2:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <setDateAndTimeShow+0x1e4>)
 80013d4:	223a      	movs	r2, #58	; 0x3a
 80013d6:	4608      	mov	r0, r1
 80013d8:	9500      	str	r5, [sp, #0]
 80013da:	f7ff fd97 	bl	8000f0c <oled_show_char>

	if(tempArray[4] > 9)
 80013de:	7923      	ldrb	r3, [r4, #4]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d956      	bls.n	8001492 <setDateAndTimeShow+0x1a6>
	{
		OLED_ShowNumber(50,40,tempArray[4],2,16);
 80013e4:	2310      	movs	r3, #16
 80013e6:	2128      	movs	r1, #40	; 0x28
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2032      	movs	r0, #50	; 0x32
 80013ec:	2302      	movs	r3, #2
 80013ee:	7922      	ldrb	r2, [r4, #4]
	{
		OLED_ShowNumber(50,40,0,1,8);
		OLED_ShowNumber(60,40,tempArray[4],1,8);
	}

	oled_show_char(70, 40,':', &fontone, SSD1306_COLOR_WHITE);
 80013f0:	2501      	movs	r5, #1
		OLED_ShowNumber(60,40,tempArray[4],1,8);
 80013f2:	f7ff fe67 	bl	80010c4 <OLED_ShowNumber>
	oled_show_char(70, 40,':', &fontone, SSD1306_COLOR_WHITE);
 80013f6:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <setDateAndTimeShow+0x1e4>)
 80013f8:	223a      	movs	r2, #58	; 0x3a
 80013fa:	2128      	movs	r1, #40	; 0x28
 80013fc:	2046      	movs	r0, #70	; 0x46
 80013fe:	9500      	str	r5, [sp, #0]
 8001400:	f7ff fd84 	bl	8000f0c <oled_show_char>

	if(tempArray[5] > 9)
 8001404:	7963      	ldrb	r3, [r4, #5]
 8001406:	2b09      	cmp	r3, #9
 8001408:	d951      	bls.n	80014ae <setDateAndTimeShow+0x1c2>
	{
		OLED_ShowNumber(80,40,tempArray[5],2,16);
 800140a:	2310      	movs	r3, #16
 800140c:	2128      	movs	r1, #40	; 0x28
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2050      	movs	r0, #80	; 0x50
 8001412:	2302      	movs	r3, #2
 8001414:	7962      	ldrb	r2, [r4, #5]
	}
	else
	{
		OLED_ShowNumber(80,40,0,1,8);
		OLED_ShowNumber(90,40,tempArray[5],1,8);
 8001416:	f7ff fe55 	bl	80010c4 <OLED_ShowNumber>
	}

	oled_update_screen();
}
 800141a:	b002      	add	sp, #8
 800141c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	oled_update_screen();
 8001420:	f7ff bd34 	b.w	8000e8c <oled_update_screen>
		OLED_ShowNumber(20,20,0,1,8);
 8001424:	2114      	movs	r1, #20
 8001426:	2301      	movs	r3, #1
 8001428:	4608      	mov	r0, r1
 800142a:	2200      	movs	r2, #0
 800142c:	9500      	str	r5, [sp, #0]
 800142e:	f7ff fe49 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(30,20,tempArray[0],1,8);
 8001432:	2301      	movs	r3, #1
 8001434:	2114      	movs	r1, #20
 8001436:	201e      	movs	r0, #30
 8001438:	7822      	ldrb	r2, [r4, #0]
 800143a:	9500      	str	r5, [sp, #0]
 800143c:	e794      	b.n	8001368 <setDateAndTimeShow+0x7c>
		OLED_ShowNumber(50,20,0,1,8);
 800143e:	2608      	movs	r6, #8
 8001440:	462b      	mov	r3, r5
 8001442:	2200      	movs	r2, #0
 8001444:	2114      	movs	r1, #20
 8001446:	2032      	movs	r0, #50	; 0x32
 8001448:	9600      	str	r6, [sp, #0]
 800144a:	f7ff fe3b 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(60,20,tempArray[1],1,8);
 800144e:	462b      	mov	r3, r5
 8001450:	2114      	movs	r1, #20
 8001452:	203c      	movs	r0, #60	; 0x3c
 8001454:	7862      	ldrb	r2, [r4, #1]
 8001456:	9600      	str	r6, [sp, #0]
 8001458:	e799      	b.n	800138e <setDateAndTimeShow+0xa2>
		OLED_ShowNumber(80,20,0,1,8);
 800145a:	2608      	movs	r6, #8
 800145c:	462b      	mov	r3, r5
 800145e:	2200      	movs	r2, #0
 8001460:	2114      	movs	r1, #20
 8001462:	2050      	movs	r0, #80	; 0x50
 8001464:	9600      	str	r6, [sp, #0]
 8001466:	f7ff fe2d 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(90,20,tempArray[2],1,8);
 800146a:	462b      	mov	r3, r5
 800146c:	2114      	movs	r1, #20
 800146e:	205a      	movs	r0, #90	; 0x5a
 8001470:	78a2      	ldrb	r2, [r4, #2]
 8001472:	9600      	str	r6, [sp, #0]
 8001474:	e79e      	b.n	80013b4 <setDateAndTimeShow+0xc8>
		OLED_ShowNumber(20,40,0,1,8);
 8001476:	2508      	movs	r5, #8
 8001478:	2301      	movs	r3, #1
 800147a:	2200      	movs	r2, #0
 800147c:	2128      	movs	r1, #40	; 0x28
 800147e:	2014      	movs	r0, #20
 8001480:	9500      	str	r5, [sp, #0]
 8001482:	f7ff fe1f 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(30,40,tempArray[3],1,8);
 8001486:	2301      	movs	r3, #1
 8001488:	2128      	movs	r1, #40	; 0x28
 800148a:	201e      	movs	r0, #30
 800148c:	78e2      	ldrb	r2, [r4, #3]
 800148e:	9500      	str	r5, [sp, #0]
 8001490:	e79b      	b.n	80013ca <setDateAndTimeShow+0xde>
		OLED_ShowNumber(50,40,0,1,8);
 8001492:	2608      	movs	r6, #8
 8001494:	462b      	mov	r3, r5
 8001496:	2200      	movs	r2, #0
 8001498:	2128      	movs	r1, #40	; 0x28
 800149a:	2032      	movs	r0, #50	; 0x32
 800149c:	9600      	str	r6, [sp, #0]
 800149e:	f7ff fe11 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(60,40,tempArray[4],1,8);
 80014a2:	462b      	mov	r3, r5
 80014a4:	2128      	movs	r1, #40	; 0x28
 80014a6:	203c      	movs	r0, #60	; 0x3c
 80014a8:	7922      	ldrb	r2, [r4, #4]
 80014aa:	9600      	str	r6, [sp, #0]
 80014ac:	e7a0      	b.n	80013f0 <setDateAndTimeShow+0x104>
		OLED_ShowNumber(80,40,0,1,8);
 80014ae:	2608      	movs	r6, #8
 80014b0:	462b      	mov	r3, r5
 80014b2:	2200      	movs	r2, #0
 80014b4:	2128      	movs	r1, #40	; 0x28
 80014b6:	2050      	movs	r0, #80	; 0x50
 80014b8:	9600      	str	r6, [sp, #0]
 80014ba:	f7ff fe03 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(90,40,tempArray[5],1,8);
 80014be:	462b      	mov	r3, r5
 80014c0:	2128      	movs	r1, #40	; 0x28
 80014c2:	205a      	movs	r0, #90	; 0x5a
 80014c4:	7962      	ldrb	r2, [r4, #5]
 80014c6:	9600      	str	r6, [sp, #0]
 80014c8:	e7a5      	b.n	8001416 <setDateAndTimeShow+0x12a>
 80014ca:	bf00      	nop
 80014cc:	20003ec8 	.word	0x20003ec8
 80014d0:	20003f4c 	.word	0x20003f4c

080014d4 <dealCrossingDay>:
}

// 处理设置时间跨越一天的情况
void dealCrossingDay(uint8_t incOrDes)
{
	if(incOrDes == INCREASE)	// 增加一天
 80014d4:	4b5e      	ldr	r3, [pc, #376]	; (8001650 <dealCrossingDay+0x17c>)
 80014d6:	2801      	cmp	r0, #1
	{
		if(LEAP_YEAR && FEBURARY && (tempArray[2] == 29)){	// 闰年二月
 80014d8:	781a      	ldrb	r2, [r3, #0]
	if(incOrDes == INCREASE)	// 增加一天
 80014da:	d156      	bne.n	800158a <dealCrossingDay+0xb6>
		if(LEAP_YEAR && FEBURARY && (tempArray[2] == 29)){	// 闰年二月
 80014dc:	0792      	lsls	r2, r2, #30
 80014de:	d10b      	bne.n	80014f8 <dealCrossingDay+0x24>
 80014e0:	785a      	ldrb	r2, [r3, #1]
 80014e2:	2a02      	cmp	r2, #2
 80014e4:	d108      	bne.n	80014f8 <dealCrossingDay+0x24>
 80014e6:	789a      	ldrb	r2, [r3, #2]
 80014e8:	2a1d      	cmp	r2, #29
 80014ea:	d105      	bne.n	80014f8 <dealCrossingDay+0x24>
			tempArray[1]++;
 80014ec:	785a      	ldrb	r2, [r3, #1]
 80014ee:	3201      	adds	r2, #1
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	705a      	strb	r2, [r3, #1]
			tempArray[2] = 1;
 80014f4:	7098      	strb	r0, [r3, #2]
			return;
 80014f6:	4770      	bx	lr
		}

		if(COMMON_YEAR && FEBURARY && (tempArray[2] == 28)){	// 平年二月
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	0790      	lsls	r0, r2, #30
 80014fc:	d00b      	beq.n	8001516 <dealCrossingDay+0x42>
 80014fe:	785a      	ldrb	r2, [r3, #1]
 8001500:	2a02      	cmp	r2, #2
 8001502:	d108      	bne.n	8001516 <dealCrossingDay+0x42>
 8001504:	789a      	ldrb	r2, [r3, #2]
 8001506:	2a1c      	cmp	r2, #28
 8001508:	d105      	bne.n	8001516 <dealCrossingDay+0x42>
				return;
			}
		}

		if(SMALL_MONTH_INC && (tempArray[2] == 30)){	// 小月
			tempArray[1]++;
 800150a:	785a      	ldrb	r2, [r3, #1]
 800150c:	3201      	adds	r2, #1
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	705a      	strb	r2, [r3, #1]
			tempArray[2] = 1;
 8001512:	2201      	movs	r2, #1
 8001514:	e024      	b.n	8001560 <dealCrossingDay+0x8c>
		if(BIG_MONTH_INC && (tempArray[2] == 31)){	// 大月
 8001516:	785a      	ldrb	r2, [r3, #1]
 8001518:	2a01      	cmp	r2, #1
 800151a:	d011      	beq.n	8001540 <dealCrossingDay+0x6c>
 800151c:	785a      	ldrb	r2, [r3, #1]
 800151e:	2a03      	cmp	r2, #3
 8001520:	d00e      	beq.n	8001540 <dealCrossingDay+0x6c>
 8001522:	785a      	ldrb	r2, [r3, #1]
 8001524:	2a05      	cmp	r2, #5
 8001526:	d00b      	beq.n	8001540 <dealCrossingDay+0x6c>
 8001528:	785a      	ldrb	r2, [r3, #1]
 800152a:	2a07      	cmp	r2, #7
 800152c:	d008      	beq.n	8001540 <dealCrossingDay+0x6c>
 800152e:	785a      	ldrb	r2, [r3, #1]
 8001530:	2a08      	cmp	r2, #8
 8001532:	d005      	beq.n	8001540 <dealCrossingDay+0x6c>
 8001534:	785a      	ldrb	r2, [r3, #1]
 8001536:	2a0a      	cmp	r2, #10
 8001538:	d002      	beq.n	8001540 <dealCrossingDay+0x6c>
 800153a:	785a      	ldrb	r2, [r3, #1]
 800153c:	2a0c      	cmp	r2, #12
 800153e:	d111      	bne.n	8001564 <dealCrossingDay+0x90>
 8001540:	789a      	ldrb	r2, [r3, #2]
 8001542:	2a1f      	cmp	r2, #31
 8001544:	d10e      	bne.n	8001564 <dealCrossingDay+0x90>
			if((tempArray[1] == 12)){	// 十二月
 8001546:	785a      	ldrb	r2, [r3, #1]
 8001548:	2a0c      	cmp	r2, #12
 800154a:	d1de      	bne.n	800150a <dealCrossingDay+0x36>
				if(tempArray[0] == 99){
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	2a63      	cmp	r2, #99	; 0x63
					tempArray[0] = 0;
 8001550:	bf0f      	iteee	eq
 8001552:	2200      	moveq	r2, #0
					tempArray[0]++;
 8001554:	781a      	ldrbne	r2, [r3, #0]
 8001556:	3201      	addne	r2, #1
 8001558:	b2d2      	uxtbne	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
				tempArray[1] = 1;
 800155c:	2201      	movs	r2, #1
 800155e:	705a      	strb	r2, [r3, #1]
			tempArray[1]--;
			tempArray[2] = 30;
			return;
		}

		tempArray[2]--;	// 不符合前面的条件，项目值减1
 8001560:	709a      	strb	r2, [r3, #2]
		return;
	}
}
 8001562:	4770      	bx	lr
		if(SMALL_MONTH_INC && (tempArray[2] == 30)){	// 小月
 8001564:	785a      	ldrb	r2, [r3, #1]
 8001566:	2a04      	cmp	r2, #4
 8001568:	d008      	beq.n	800157c <dealCrossingDay+0xa8>
 800156a:	785a      	ldrb	r2, [r3, #1]
 800156c:	2a06      	cmp	r2, #6
 800156e:	d005      	beq.n	800157c <dealCrossingDay+0xa8>
 8001570:	785a      	ldrb	r2, [r3, #1]
 8001572:	2a09      	cmp	r2, #9
 8001574:	d002      	beq.n	800157c <dealCrossingDay+0xa8>
 8001576:	785a      	ldrb	r2, [r3, #1]
 8001578:	2a0b      	cmp	r2, #11
 800157a:	d102      	bne.n	8001582 <dealCrossingDay+0xae>
 800157c:	789a      	ldrb	r2, [r3, #2]
 800157e:	2a1e      	cmp	r2, #30
 8001580:	d0c3      	beq.n	800150a <dealCrossingDay+0x36>
		tempArray[2]++;	// 不符合前面的条件，项目值加1
 8001582:	789a      	ldrb	r2, [r3, #2]
 8001584:	3201      	adds	r2, #1
		tempArray[2]--;	// 不符合前面的条件，项目值减1
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	e7ea      	b.n	8001560 <dealCrossingDay+0x8c>
		if(LEAP_YEAR && MARCH && (tempArray[2] == 1)){	// 闰年三月
 800158a:	0791      	lsls	r1, r2, #30
 800158c:	d10b      	bne.n	80015a6 <dealCrossingDay+0xd2>
 800158e:	785a      	ldrb	r2, [r3, #1]
 8001590:	2a03      	cmp	r2, #3
 8001592:	d108      	bne.n	80015a6 <dealCrossingDay+0xd2>
 8001594:	789a      	ldrb	r2, [r3, #2]
 8001596:	2a01      	cmp	r2, #1
 8001598:	d105      	bne.n	80015a6 <dealCrossingDay+0xd2>
			tempArray[1]--;
 800159a:	785a      	ldrb	r2, [r3, #1]
 800159c:	3a01      	subs	r2, #1
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	705a      	strb	r2, [r3, #1]
			tempArray[2] = 29;
 80015a2:	221d      	movs	r2, #29
 80015a4:	e7dc      	b.n	8001560 <dealCrossingDay+0x8c>
		if(COMMON_YEAR && MARCH && (tempArray[2] == 1)){	// 平年三月
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	0792      	lsls	r2, r2, #30
 80015aa:	d00b      	beq.n	80015c4 <dealCrossingDay+0xf0>
 80015ac:	785a      	ldrb	r2, [r3, #1]
 80015ae:	2a03      	cmp	r2, #3
 80015b0:	d108      	bne.n	80015c4 <dealCrossingDay+0xf0>
 80015b2:	789a      	ldrb	r2, [r3, #2]
 80015b4:	2a01      	cmp	r2, #1
 80015b6:	d105      	bne.n	80015c4 <dealCrossingDay+0xf0>
			tempArray[1]--;
 80015b8:	785a      	ldrb	r2, [r3, #1]
 80015ba:	3a01      	subs	r2, #1
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	705a      	strb	r2, [r3, #1]
			tempArray[2] = 28;
 80015c0:	221c      	movs	r2, #28
 80015c2:	e7cd      	b.n	8001560 <dealCrossingDay+0x8c>
		if(BIG_MONTH_DEC && (tempArray[2] == 1)){	// 大月后
 80015c4:	785a      	ldrb	r2, [r3, #1]
 80015c6:	2a02      	cmp	r2, #2
 80015c8:	d011      	beq.n	80015ee <dealCrossingDay+0x11a>
 80015ca:	785a      	ldrb	r2, [r3, #1]
 80015cc:	2a04      	cmp	r2, #4
 80015ce:	d00e      	beq.n	80015ee <dealCrossingDay+0x11a>
 80015d0:	785a      	ldrb	r2, [r3, #1]
 80015d2:	2a06      	cmp	r2, #6
 80015d4:	d00b      	beq.n	80015ee <dealCrossingDay+0x11a>
 80015d6:	785a      	ldrb	r2, [r3, #1]
 80015d8:	2a08      	cmp	r2, #8
 80015da:	d008      	beq.n	80015ee <dealCrossingDay+0x11a>
 80015dc:	785a      	ldrb	r2, [r3, #1]
 80015de:	2a09      	cmp	r2, #9
 80015e0:	d005      	beq.n	80015ee <dealCrossingDay+0x11a>
 80015e2:	785a      	ldrb	r2, [r3, #1]
 80015e4:	2a0b      	cmp	r2, #11
 80015e6:	d002      	beq.n	80015ee <dealCrossingDay+0x11a>
 80015e8:	785a      	ldrb	r2, [r3, #1]
 80015ea:	2a01      	cmp	r2, #1
 80015ec:	d118      	bne.n	8001620 <dealCrossingDay+0x14c>
 80015ee:	789a      	ldrb	r2, [r3, #2]
 80015f0:	2a01      	cmp	r2, #1
 80015f2:	b2d1      	uxtb	r1, r2
 80015f4:	d114      	bne.n	8001620 <dealCrossingDay+0x14c>
			if((tempArray[1] == 1)){	// 十二月后
 80015f6:	785a      	ldrb	r2, [r3, #1]
 80015f8:	2a01      	cmp	r2, #1
 80015fa:	d10b      	bne.n	8001614 <dealCrossingDay+0x140>
				if(tempArray[0] == 0){
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	b92a      	cbnz	r2, 800160c <dealCrossingDay+0x138>
					tempArray[0] = 99;
 8001600:	2263      	movs	r2, #99	; 0x63
					tempArray[0]--;
 8001602:	701a      	strb	r2, [r3, #0]
				tempArray[1] = 12;
 8001604:	220c      	movs	r2, #12
 8001606:	705a      	strb	r2, [r3, #1]
				tempArray[2] = 31;
 8001608:	221f      	movs	r2, #31
 800160a:	e7a9      	b.n	8001560 <dealCrossingDay+0x8c>
					tempArray[0]--;
 800160c:	781a      	ldrb	r2, [r3, #0]
 800160e:	3a01      	subs	r2, #1
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	e7f6      	b.n	8001602 <dealCrossingDay+0x12e>
				tempArray[1]--;
 8001614:	785a      	ldrb	r2, [r3, #1]
 8001616:	3a01      	subs	r2, #1
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	705a      	strb	r2, [r3, #1]
				tempArray[2] = 1;
 800161c:	7099      	strb	r1, [r3, #2]
				return;
 800161e:	4770      	bx	lr
		if(SMALL_MONTH_DEC && (tempArray[2] == 1)){	// 小月
 8001620:	785a      	ldrb	r2, [r3, #1]
 8001622:	2a05      	cmp	r2, #5
 8001624:	d008      	beq.n	8001638 <dealCrossingDay+0x164>
 8001626:	785a      	ldrb	r2, [r3, #1]
 8001628:	2a07      	cmp	r2, #7
 800162a:	d005      	beq.n	8001638 <dealCrossingDay+0x164>
 800162c:	785a      	ldrb	r2, [r3, #1]
 800162e:	2a0a      	cmp	r2, #10
 8001630:	d002      	beq.n	8001638 <dealCrossingDay+0x164>
 8001632:	785a      	ldrb	r2, [r3, #1]
 8001634:	2a0c      	cmp	r2, #12
 8001636:	d108      	bne.n	800164a <dealCrossingDay+0x176>
 8001638:	789a      	ldrb	r2, [r3, #2]
 800163a:	2a01      	cmp	r2, #1
 800163c:	d105      	bne.n	800164a <dealCrossingDay+0x176>
			tempArray[1]--;
 800163e:	785a      	ldrb	r2, [r3, #1]
 8001640:	3a01      	subs	r2, #1
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	705a      	strb	r2, [r3, #1]
			tempArray[2] = 30;
 8001646:	221e      	movs	r2, #30
 8001648:	e78a      	b.n	8001560 <dealCrossingDay+0x8c>
		tempArray[2]--;	// 不符合前面的条件，项目值减1
 800164a:	789a      	ldrb	r2, [r3, #2]
 800164c:	3a01      	subs	r2, #1
 800164e:	e79a      	b.n	8001586 <dealCrossingDay+0xb2>
 8001650:	20003ec8 	.word	0x20003ec8

08001654 <Increase>:
	settingFlag -= 1;
 8001654:	3801      	subs	r0, #1
{
 8001656:	b510      	push	{r4, lr}
	switch(settingFlag)
 8001658:	2805      	cmp	r0, #5
 800165a:	d80d      	bhi.n	8001678 <Increase+0x24>
 800165c:	e8df f000 	tbb	[pc, r0]
 8001660:	70200d03 	.word	0x70200d03
 8001664:	8d7a      	.short	0x8d7a
		if(tempArray[settingFlag] == 99)
 8001666:	4a55      	ldr	r2, [pc, #340]	; (80017bc <Increase+0x168>)
 8001668:	7813      	ldrb	r3, [r2, #0]
 800166a:	2b63      	cmp	r3, #99	; 0x63
			tempArray[settingFlag] = 0;
 800166c:	bf0f      	iteee	eq
 800166e:	2300      	moveq	r3, #0
		tempArray[settingFlag]++;
 8001670:	7813      	ldrbne	r3, [r2, #0]
 8001672:	3301      	addne	r3, #1
 8001674:	b2db      	uxtbne	r3, r3
 8001676:	7013      	strb	r3, [r2, #0]
}
 8001678:	bd10      	pop	{r4, pc}
		if(tempArray[settingFlag] == 12)
 800167a:	4b50      	ldr	r3, [pc, #320]	; (80017bc <Increase+0x168>)
 800167c:	785a      	ldrb	r2, [r3, #1]
 800167e:	2a0c      	cmp	r2, #12
 8001680:	d10a      	bne.n	8001698 <Increase+0x44>
			if(tempArray[0] == 99){
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	2a63      	cmp	r2, #99	; 0x63
				tempArray[0] = 0;
 8001686:	bf0f      	iteee	eq
 8001688:	2200      	moveq	r2, #0
				tempArray[0]++;
 800168a:	781a      	ldrbne	r2, [r3, #0]
 800168c:	3201      	addne	r2, #1
 800168e:	b2d2      	uxtbne	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]
			tempArray[settingFlag] = 1;
 8001692:	2201      	movs	r2, #1
		tempArray[settingFlag]++;
 8001694:	705a      	strb	r2, [r3, #1]
		return;
 8001696:	e7ef      	b.n	8001678 <Increase+0x24>
		tempArray[settingFlag]++;
 8001698:	785a      	ldrb	r2, [r3, #1]
 800169a:	3201      	adds	r2, #1
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	e7f9      	b.n	8001694 <Increase+0x40>
		if(FEBURARY)	// 二月
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <Increase+0x168>)
 80016a2:	785a      	ldrb	r2, [r3, #1]
 80016a4:	2a02      	cmp	r2, #2
 80016a6:	d111      	bne.n	80016cc <Increase+0x78>
			if(LEAP_YEAR && (tempArray[settingFlag] == 29))	// 闰年
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	0791      	lsls	r1, r2, #30
 80016ac:	d108      	bne.n	80016c0 <Increase+0x6c>
 80016ae:	789a      	ldrb	r2, [r3, #2]
 80016b0:	2a1d      	cmp	r2, #29
 80016b2:	d105      	bne.n	80016c0 <Increase+0x6c>
			tempArray[1]++;
 80016b4:	785a      	ldrb	r2, [r3, #1]
 80016b6:	3201      	adds	r2, #1
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	705a      	strb	r2, [r3, #1]
			tempArray[settingFlag] = 1;
 80016bc:	2201      	movs	r2, #1
 80016be:	e02a      	b.n	8001716 <Increase+0xc2>
			if(COMMON_YEAR && (tempArray[settingFlag] == 28))	// 平年
 80016c0:	781a      	ldrb	r2, [r3, #0]
 80016c2:	0792      	lsls	r2, r2, #30
 80016c4:	d002      	beq.n	80016cc <Increase+0x78>
 80016c6:	789a      	ldrb	r2, [r3, #2]
 80016c8:	2a1c      	cmp	r2, #28
 80016ca:	d0f3      	beq.n	80016b4 <Increase+0x60>
		if(BIG_MONTH_INC && (tempArray[settingFlag] == 31)){	// 大月
 80016cc:	785a      	ldrb	r2, [r3, #1]
 80016ce:	2a01      	cmp	r2, #1
 80016d0:	d011      	beq.n	80016f6 <Increase+0xa2>
 80016d2:	785a      	ldrb	r2, [r3, #1]
 80016d4:	2a03      	cmp	r2, #3
 80016d6:	d00e      	beq.n	80016f6 <Increase+0xa2>
 80016d8:	785a      	ldrb	r2, [r3, #1]
 80016da:	2a05      	cmp	r2, #5
 80016dc:	d00b      	beq.n	80016f6 <Increase+0xa2>
 80016de:	785a      	ldrb	r2, [r3, #1]
 80016e0:	2a07      	cmp	r2, #7
 80016e2:	d008      	beq.n	80016f6 <Increase+0xa2>
 80016e4:	785a      	ldrb	r2, [r3, #1]
 80016e6:	2a08      	cmp	r2, #8
 80016e8:	d005      	beq.n	80016f6 <Increase+0xa2>
 80016ea:	785a      	ldrb	r2, [r3, #1]
 80016ec:	2a0a      	cmp	r2, #10
 80016ee:	d002      	beq.n	80016f6 <Increase+0xa2>
 80016f0:	785a      	ldrb	r2, [r3, #1]
 80016f2:	2a0c      	cmp	r2, #12
 80016f4:	d111      	bne.n	800171a <Increase+0xc6>
 80016f6:	789a      	ldrb	r2, [r3, #2]
 80016f8:	2a1f      	cmp	r2, #31
 80016fa:	d10e      	bne.n	800171a <Increase+0xc6>
			if((tempArray[1] == 12)){	// 十二月
 80016fc:	785a      	ldrb	r2, [r3, #1]
 80016fe:	2a0c      	cmp	r2, #12
 8001700:	d1d8      	bne.n	80016b4 <Increase+0x60>
				if(tempArray[0] == 99){
 8001702:	781a      	ldrb	r2, [r3, #0]
 8001704:	2a63      	cmp	r2, #99	; 0x63
					tempArray[0] = 0;
 8001706:	bf0f      	iteee	eq
 8001708:	2200      	moveq	r2, #0
					tempArray[0]++;
 800170a:	781a      	ldrbne	r2, [r3, #0]
 800170c:	3201      	addne	r2, #1
 800170e:	b2d2      	uxtbne	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
				tempArray[1] = 1;
 8001712:	2201      	movs	r2, #1
 8001714:	705a      	strb	r2, [r3, #1]
		tempArray[settingFlag]++;	// 不符合前面的条件，项目值加1
 8001716:	709a      	strb	r2, [r3, #2]
		return;
 8001718:	e7ae      	b.n	8001678 <Increase+0x24>
		if(SMALL_MONTH_INC && (tempArray[settingFlag] == 30)){	// 小月
 800171a:	785a      	ldrb	r2, [r3, #1]
 800171c:	2a04      	cmp	r2, #4
 800171e:	d008      	beq.n	8001732 <Increase+0xde>
 8001720:	785a      	ldrb	r2, [r3, #1]
 8001722:	2a06      	cmp	r2, #6
 8001724:	d005      	beq.n	8001732 <Increase+0xde>
 8001726:	785a      	ldrb	r2, [r3, #1]
 8001728:	2a09      	cmp	r2, #9
 800172a:	d002      	beq.n	8001732 <Increase+0xde>
 800172c:	785a      	ldrb	r2, [r3, #1]
 800172e:	2a0b      	cmp	r2, #11
 8001730:	d102      	bne.n	8001738 <Increase+0xe4>
 8001732:	789a      	ldrb	r2, [r3, #2]
 8001734:	2a1e      	cmp	r2, #30
 8001736:	d0bd      	beq.n	80016b4 <Increase+0x60>
		tempArray[settingFlag]++;	// 不符合前面的条件，项目值加1
 8001738:	789a      	ldrb	r2, [r3, #2]
 800173a:	3201      	adds	r2, #1
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	e7ea      	b.n	8001716 <Increase+0xc2>
		if(tempArray[settingFlag] == 23)
 8001740:	4a1e      	ldr	r2, [pc, #120]	; (80017bc <Increase+0x168>)
 8001742:	78d3      	ldrb	r3, [r2, #3]
 8001744:	2b17      	cmp	r3, #23
			tempArray[settingFlag] = 0;
 8001746:	bf0f      	iteee	eq
 8001748:	2300      	moveq	r3, #0
		tempArray[settingFlag]++;
 800174a:	78d3      	ldrbne	r3, [r2, #3]
 800174c:	3301      	addne	r3, #1
 800174e:	b2db      	uxtbne	r3, r3
 8001750:	70d3      	strb	r3, [r2, #3]
		return;
 8001752:	e791      	b.n	8001678 <Increase+0x24>
		if(tempArray[settingFlag] == 59)
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <Increase+0x168>)
 8001756:	791a      	ldrb	r2, [r3, #4]
 8001758:	2a3b      	cmp	r2, #59	; 0x3b
 800175a:	d10a      	bne.n	8001772 <Increase+0x11e>
			if(tempArray[3] == 23){
 800175c:	78da      	ldrb	r2, [r3, #3]
 800175e:	2a17      	cmp	r2, #23
				tempArray[3] = 0;
 8001760:	bf0f      	iteee	eq
 8001762:	2200      	moveq	r2, #0
				tempArray[3]++;
 8001764:	78da      	ldrbne	r2, [r3, #3]
 8001766:	3201      	addne	r2, #1
 8001768:	b2d2      	uxtbne	r2, r2
 800176a:	70da      	strb	r2, [r3, #3]
			tempArray[settingFlag] = 0;
 800176c:	2200      	movs	r2, #0
		tempArray[settingFlag]++;
 800176e:	711a      	strb	r2, [r3, #4]
		return;
 8001770:	e782      	b.n	8001678 <Increase+0x24>
		tempArray[settingFlag]++;
 8001772:	791a      	ldrb	r2, [r3, #4]
 8001774:	3201      	adds	r2, #1
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	e7f9      	b.n	800176e <Increase+0x11a>
		if(tempArray[settingFlag] == 59)
 800177a:	4c10      	ldr	r4, [pc, #64]	; (80017bc <Increase+0x168>)
 800177c:	7963      	ldrb	r3, [r4, #5]
 800177e:	2b3b      	cmp	r3, #59	; 0x3b
 8001780:	d118      	bne.n	80017b4 <Increase+0x160>
			if(tempArray[4] == 59){
 8001782:	7923      	ldrb	r3, [r4, #4]
 8001784:	2b3b      	cmp	r3, #59	; 0x3b
 8001786:	d111      	bne.n	80017ac <Increase+0x158>
				if(tempArray[3] == 23){
 8001788:	78e3      	ldrb	r3, [r4, #3]
 800178a:	2b17      	cmp	r3, #23
 800178c:	d109      	bne.n	80017a2 <Increase+0x14e>
					tempArray[3] = 0;
 800178e:	2300      	movs	r3, #0
					dealCrossingDay(INCREASE);
 8001790:	2001      	movs	r0, #1
					tempArray[3] = 0;
 8001792:	70e3      	strb	r3, [r4, #3]
					dealCrossingDay(INCREASE);
 8001794:	f7ff fe9e 	bl	80014d4 <dealCrossingDay>
				tempArray[4] = 0;
 8001798:	2300      	movs	r3, #0
				tempArray[4]++;
 800179a:	7123      	strb	r3, [r4, #4]
			tempArray[settingFlag] = 0;
 800179c:	2300      	movs	r3, #0
		tempArray[settingFlag]++;
 800179e:	7163      	strb	r3, [r4, #5]
		return;
 80017a0:	e76a      	b.n	8001678 <Increase+0x24>
					tempArray[3]++;
 80017a2:	78e3      	ldrb	r3, [r4, #3]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	70e3      	strb	r3, [r4, #3]
 80017aa:	e7f5      	b.n	8001798 <Increase+0x144>
				tempArray[4]++;
 80017ac:	7923      	ldrb	r3, [r4, #4]
 80017ae:	3301      	adds	r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	e7f2      	b.n	800179a <Increase+0x146>
		tempArray[settingFlag]++;
 80017b4:	7963      	ldrb	r3, [r4, #5]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	e7f0      	b.n	800179e <Increase+0x14a>
 80017bc:	20003ec8 	.word	0x20003ec8

080017c0 <Decrease>:
	settingFlag -= 1;
 80017c0:	3801      	subs	r0, #1
{
 80017c2:	b510      	push	{r4, lr}
	switch(settingFlag)
 80017c4:	2805      	cmp	r0, #5
 80017c6:	d809      	bhi.n	80017dc <Decrease+0x1c>
 80017c8:	e8df f000 	tbb	[pc, r0]
 80017cc:	81200d03 	.word	0x81200d03
 80017d0:	9d8b      	.short	0x9d8b
			if(tempArray[settingFlag] == 0)
 80017d2:	4a5c      	ldr	r2, [pc, #368]	; (8001944 <Decrease+0x184>)
 80017d4:	7813      	ldrb	r3, [r2, #0]
 80017d6:	b913      	cbnz	r3, 80017de <Decrease+0x1e>
				tempArray[settingFlag] = 99;
 80017d8:	2363      	movs	r3, #99	; 0x63
			tempArray[settingFlag]--;
 80017da:	7013      	strb	r3, [r2, #0]
}
 80017dc:	bd10      	pop	{r4, pc}
			tempArray[settingFlag]--;
 80017de:	7813      	ldrb	r3, [r2, #0]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	e7f9      	b.n	80017da <Decrease+0x1a>
			if(tempArray[settingFlag] == 1)
 80017e6:	4b57      	ldr	r3, [pc, #348]	; (8001944 <Decrease+0x184>)
 80017e8:	785a      	ldrb	r2, [r3, #1]
 80017ea:	2a01      	cmp	r2, #1
 80017ec:	d10a      	bne.n	8001804 <Decrease+0x44>
				if(tempArray[0] == 0){
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	b922      	cbnz	r2, 80017fc <Decrease+0x3c>
					tempArray[0] = 99;
 80017f2:	2263      	movs	r2, #99	; 0x63
					tempArray[0]--;
 80017f4:	701a      	strb	r2, [r3, #0]
				tempArray[settingFlag] = 12;
 80017f6:	220c      	movs	r2, #12
			tempArray[settingFlag]--;
 80017f8:	705a      	strb	r2, [r3, #1]
			return;
 80017fa:	e7ef      	b.n	80017dc <Decrease+0x1c>
					tempArray[0]--;
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	3a01      	subs	r2, #1
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	e7f7      	b.n	80017f4 <Decrease+0x34>
			tempArray[settingFlag]--;
 8001804:	785a      	ldrb	r2, [r3, #1]
 8001806:	3a01      	subs	r2, #1
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	e7f5      	b.n	80017f8 <Decrease+0x38>
			if(MARCH)	// 三月
 800180c:	4b4d      	ldr	r3, [pc, #308]	; (8001944 <Decrease+0x184>)
 800180e:	785a      	ldrb	r2, [r3, #1]
 8001810:	2a03      	cmp	r2, #3
 8001812:	d118      	bne.n	8001846 <Decrease+0x86>
				if(LEAP_YEAR && (tempArray[settingFlag] == 1))	// 闰年
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	0791      	lsls	r1, r2, #30
 8001818:	d109      	bne.n	800182e <Decrease+0x6e>
 800181a:	789a      	ldrb	r2, [r3, #2]
 800181c:	2a01      	cmp	r2, #1
 800181e:	d106      	bne.n	800182e <Decrease+0x6e>
					tempArray[1]--;
 8001820:	785a      	ldrb	r2, [r3, #1]
 8001822:	3a01      	subs	r2, #1
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	705a      	strb	r2, [r3, #1]
					tempArray[settingFlag] = 29;
 8001828:	221d      	movs	r2, #29
			tempArray[settingFlag]--;	// 不符合前面的条件，项目值减1
 800182a:	709a      	strb	r2, [r3, #2]
			return;
 800182c:	e7d6      	b.n	80017dc <Decrease+0x1c>
				if(COMMON_YEAR && (tempArray[settingFlag] == 1))	// 平年
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	0792      	lsls	r2, r2, #30
 8001832:	d008      	beq.n	8001846 <Decrease+0x86>
 8001834:	789a      	ldrb	r2, [r3, #2]
 8001836:	2a01      	cmp	r2, #1
 8001838:	d105      	bne.n	8001846 <Decrease+0x86>
					tempArray[1]--;
 800183a:	785a      	ldrb	r2, [r3, #1]
 800183c:	3a01      	subs	r2, #1
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	705a      	strb	r2, [r3, #1]
					tempArray[settingFlag] = 28;
 8001842:	221c      	movs	r2, #28
 8001844:	e7f1      	b.n	800182a <Decrease+0x6a>
			if(BIG_MONTH_DEC && (tempArray[settingFlag] == 1)){	// 大月后
 8001846:	785a      	ldrb	r2, [r3, #1]
 8001848:	2a02      	cmp	r2, #2
 800184a:	d011      	beq.n	8001870 <Decrease+0xb0>
 800184c:	785a      	ldrb	r2, [r3, #1]
 800184e:	2a04      	cmp	r2, #4
 8001850:	d00e      	beq.n	8001870 <Decrease+0xb0>
 8001852:	785a      	ldrb	r2, [r3, #1]
 8001854:	2a06      	cmp	r2, #6
 8001856:	d00b      	beq.n	8001870 <Decrease+0xb0>
 8001858:	785a      	ldrb	r2, [r3, #1]
 800185a:	2a08      	cmp	r2, #8
 800185c:	d008      	beq.n	8001870 <Decrease+0xb0>
 800185e:	785a      	ldrb	r2, [r3, #1]
 8001860:	2a09      	cmp	r2, #9
 8001862:	d005      	beq.n	8001870 <Decrease+0xb0>
 8001864:	785a      	ldrb	r2, [r3, #1]
 8001866:	2a0b      	cmp	r2, #11
 8001868:	d002      	beq.n	8001870 <Decrease+0xb0>
 800186a:	785a      	ldrb	r2, [r3, #1]
 800186c:	2a01      	cmp	r2, #1
 800186e:	d115      	bne.n	800189c <Decrease+0xdc>
 8001870:	789a      	ldrb	r2, [r3, #2]
 8001872:	2a01      	cmp	r2, #1
 8001874:	d112      	bne.n	800189c <Decrease+0xdc>
				if((tempArray[1] == 1)){	// 十二月后
 8001876:	785a      	ldrb	r2, [r3, #1]
 8001878:	2a01      	cmp	r2, #1
 800187a:	d10b      	bne.n	8001894 <Decrease+0xd4>
					if(tempArray[0] == 0){
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	b92a      	cbnz	r2, 800188c <Decrease+0xcc>
						tempArray[0] = 99;
 8001880:	2263      	movs	r2, #99	; 0x63
						tempArray[0]--;
 8001882:	701a      	strb	r2, [r3, #0]
					tempArray[1] = 12;
 8001884:	220c      	movs	r2, #12
 8001886:	705a      	strb	r2, [r3, #1]
					tempArray[settingFlag] = 31;
 8001888:	221f      	movs	r2, #31
 800188a:	e7ce      	b.n	800182a <Decrease+0x6a>
						tempArray[0]--;
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	3a01      	subs	r2, #1
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	e7f6      	b.n	8001882 <Decrease+0xc2>
					tempArray[1]--;
 8001894:	785a      	ldrb	r2, [r3, #1]
 8001896:	3a01      	subs	r2, #1
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	e7f4      	b.n	8001886 <Decrease+0xc6>
			if(SMALL_MONTH_DEC && (tempArray[settingFlag] == 1)){	// 小月
 800189c:	785a      	ldrb	r2, [r3, #1]
 800189e:	2a05      	cmp	r2, #5
 80018a0:	d008      	beq.n	80018b4 <Decrease+0xf4>
 80018a2:	785a      	ldrb	r2, [r3, #1]
 80018a4:	2a07      	cmp	r2, #7
 80018a6:	d005      	beq.n	80018b4 <Decrease+0xf4>
 80018a8:	785a      	ldrb	r2, [r3, #1]
 80018aa:	2a0a      	cmp	r2, #10
 80018ac:	d002      	beq.n	80018b4 <Decrease+0xf4>
 80018ae:	785a      	ldrb	r2, [r3, #1]
 80018b0:	2a0c      	cmp	r2, #12
 80018b2:	d108      	bne.n	80018c6 <Decrease+0x106>
 80018b4:	789a      	ldrb	r2, [r3, #2]
 80018b6:	2a01      	cmp	r2, #1
 80018b8:	d105      	bne.n	80018c6 <Decrease+0x106>
				tempArray[1]--;
 80018ba:	785a      	ldrb	r2, [r3, #1]
 80018bc:	3a01      	subs	r2, #1
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	705a      	strb	r2, [r3, #1]
				tempArray[settingFlag] = 30;
 80018c2:	221e      	movs	r2, #30
 80018c4:	e7b1      	b.n	800182a <Decrease+0x6a>
			tempArray[settingFlag]--;	// 不符合前面的条件，项目值减1
 80018c6:	789a      	ldrb	r2, [r3, #2]
 80018c8:	3a01      	subs	r2, #1
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	e7ad      	b.n	800182a <Decrease+0x6a>
			if(tempArray[settingFlag] == 0)
 80018ce:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <Decrease+0x184>)
 80018d0:	78d3      	ldrb	r3, [r2, #3]
 80018d2:	b913      	cbnz	r3, 80018da <Decrease+0x11a>
				tempArray[settingFlag] = 23;
 80018d4:	2317      	movs	r3, #23
			tempArray[settingFlag]--;
 80018d6:	70d3      	strb	r3, [r2, #3]
			return;
 80018d8:	e780      	b.n	80017dc <Decrease+0x1c>
			tempArray[settingFlag]--;
 80018da:	78d3      	ldrb	r3, [r2, #3]
 80018dc:	3b01      	subs	r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	e7f9      	b.n	80018d6 <Decrease+0x116>
			if(tempArray[settingFlag] == 0)
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <Decrease+0x184>)
 80018e4:	791a      	ldrb	r2, [r3, #4]
 80018e6:	b952      	cbnz	r2, 80018fe <Decrease+0x13e>
				if(tempArray[3] == 0){
 80018e8:	78da      	ldrb	r2, [r3, #3]
 80018ea:	b922      	cbnz	r2, 80018f6 <Decrease+0x136>
					tempArray[3] = 23;
 80018ec:	2217      	movs	r2, #23
					tempArray[3]--;
 80018ee:	70da      	strb	r2, [r3, #3]
				tempArray[settingFlag] = 59;
 80018f0:	223b      	movs	r2, #59	; 0x3b
			tempArray[settingFlag]--;
 80018f2:	711a      	strb	r2, [r3, #4]
			return;
 80018f4:	e772      	b.n	80017dc <Decrease+0x1c>
					tempArray[3]--;
 80018f6:	78da      	ldrb	r2, [r3, #3]
 80018f8:	3a01      	subs	r2, #1
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	e7f7      	b.n	80018ee <Decrease+0x12e>
			tempArray[settingFlag]--;
 80018fe:	791a      	ldrb	r2, [r3, #4]
 8001900:	3a01      	subs	r2, #1
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	e7f5      	b.n	80018f2 <Decrease+0x132>
			if(tempArray[settingFlag] == 0)
 8001906:	4c0f      	ldr	r4, [pc, #60]	; (8001944 <Decrease+0x184>)
 8001908:	7963      	ldrb	r3, [r4, #5]
 800190a:	b9bb      	cbnz	r3, 800193c <Decrease+0x17c>
				if(tempArray[4] == 0){
 800190c:	7923      	ldrb	r3, [r4, #4]
 800190e:	b98b      	cbnz	r3, 8001934 <Decrease+0x174>
					if(tempArray[3] == 0){
 8001910:	78e3      	ldrb	r3, [r4, #3]
 8001912:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8001916:	b943      	cbnz	r3, 800192a <Decrease+0x16a>
						tempArray[3] = 23;
 8001918:	2317      	movs	r3, #23
 800191a:	70e3      	strb	r3, [r4, #3]
						dealCrossingDay(DECREASE);
 800191c:	f7ff fdda 	bl	80014d4 <dealCrossingDay>
					tempArray[4] = 59;
 8001920:	233b      	movs	r3, #59	; 0x3b
					tempArray[4]--;
 8001922:	7123      	strb	r3, [r4, #4]
				tempArray[settingFlag] = 59;
 8001924:	233b      	movs	r3, #59	; 0x3b
			tempArray[settingFlag]--;
 8001926:	7163      	strb	r3, [r4, #5]
			return;
 8001928:	e758      	b.n	80017dc <Decrease+0x1c>
						tempArray[3]--;
 800192a:	78e3      	ldrb	r3, [r4, #3]
 800192c:	3b01      	subs	r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	70e3      	strb	r3, [r4, #3]
 8001932:	e7f5      	b.n	8001920 <Decrease+0x160>
					tempArray[4]--;
 8001934:	7923      	ldrb	r3, [r4, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	e7f2      	b.n	8001922 <Decrease+0x162>
			tempArray[settingFlag]--;
 800193c:	7963      	ldrb	r3, [r4, #5]
 800193e:	3b01      	subs	r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	e7f0      	b.n	8001926 <Decrease+0x166>
 8001944:	20003ec8 	.word	0x20003ec8

08001948 <extranceDateAndTime>:
{
 8001948:	b537      	push	{r0, r1, r2, r4, r5, lr}
	loadSettingOrignalValue();		// 将设置模式装载初值设置为当前时间
 800194a:	f7ff f8bd 	bl	8000ac8 <loadSettingOrignalValue>
	oled_clear();
 800194e:	f7ff fab7 	bl	8000ec0 <oled_clear>
	setDateAndTimeShow(0);		// 显示装载的初值
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fcca 	bl	80012ec <setDateAndTimeShow>
	int settingFlag = 1;
 8001958:	2401      	movs	r4, #1
			switch(readKeyValue())
 800195a:	f7fe feed 	bl	8000738 <readKeyValue>
 800195e:	3801      	subs	r0, #1
 8001960:	2803      	cmp	r0, #3
 8001962:	d808      	bhi.n	8001976 <extranceDateAndTime+0x2e>
 8001964:	e8df f000 	tbb	[pc, r0]
 8001968:	1a1b1604 	.word	0x1a1b1604
		settingFlag++;
 800196c:	461c      	mov	r4, r3
 800196e:	e7f4      	b.n	800195a <extranceDateAndTime+0x12>
				Increase(settingFlag);
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff fe6f 	bl	8001654 <Increase>
				oled_clear();
 8001976:	f7ff faa3 	bl	8000ec0 <oled_clear>
				setDateAndTimeShow(settingFlag);
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff fcb6 	bl	80012ec <setDateAndTimeShow>
				break;
 8001980:	2500      	movs	r5, #0
			switch(returnFlagBluetooth())
 8001982:	f7ff f8c9 	bl	8000b18 <returnFlagBluetooth>
 8001986:	3801      	subs	r0, #1
 8001988:	2803      	cmp	r0, #3
 800198a:	d862      	bhi.n	8001a52 <extranceDateAndTime+0x10a>
 800198c:	e8df f000 	tbb	[pc, r0]
 8001990:	5d1a1609 	.word	0x5d1a1609
				Decrease(settingFlag);
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff ff13 	bl	80017c0 <Decrease>
				oled_clear();
 800199a:	e7ec      	b.n	8001976 <extranceDateAndTime+0x2e>
				settingFlag -= 2;
 800199c:	3c02      	subs	r4, #2
			switch(readKeyValue())
 800199e:	2501      	movs	r5, #1
 80019a0:	e7ef      	b.n	8001982 <extranceDateAndTime+0x3a>
				Increase(settingFlag);
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff fe56 	bl	8001654 <Increase>
				oled_clear();
 80019a8:	f7ff fa8a 	bl	8000ec0 <oled_clear>
				setDateAndTimeShow(settingFlag);
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff fc9d 	bl	80012ec <setDateAndTimeShow>
				clearBluetoothCommand();
 80019b2:	f7ff f8b7 	bl	8000b24 <clearBluetoothCommand>
		while(settedFlag == 0)
 80019b6:	2d00      	cmp	r5, #0
 80019b8:	d0cf      	beq.n	800195a <extranceDateAndTime+0x12>
 80019ba:	e005      	b.n	80019c8 <extranceDateAndTime+0x80>
				Decrease(settingFlag);
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff feff 	bl	80017c0 <Decrease>
 80019c2:	e7f1      	b.n	80019a8 <extranceDateAndTime+0x60>
				clearBluetoothCommand();
 80019c4:	f7ff f8ae 	bl	8000b24 <clearBluetoothCommand>
	while((settingFlag < 7) && (settingFlag > 0))
 80019c8:	2c05      	cmp	r4, #5
		settingFlag++;
 80019ca:	f104 0301 	add.w	r3, r4, #1
	while((settingFlag < 7) && (settingFlag > 0))
 80019ce:	d9cd      	bls.n	800196c <extranceDateAndTime+0x24>
	if(settingFlag > 0)		// 设置AM/PM
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dd35      	ble.n	8001a40 <extranceDateAndTime+0xf8>
		RTC_DateTypeDef RTC_DateStructure = {0, tempArray[1],tempArray[2],tempArray[0]};
 80019d4:	2400      	movs	r4, #0
		settingAMPM();
 80019d6:	f7ff fc53 	bl	8001280 <settingAMPM>
		RTC_TimeTypeDef RTC_TimeStructure = {tempArray[3],tempArray[4],tempArray[5]};
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <extranceDateAndTime+0x11c>)
		HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 80019dc:	4669      	mov	r1, sp
		RTC_TimeTypeDef RTC_TimeStructure = {tempArray[3],tempArray[4],tempArray[5]};
 80019de:	78da      	ldrb	r2, [r3, #3]
		HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 80019e0:	4821      	ldr	r0, [pc, #132]	; (8001a68 <extranceDateAndTime+0x120>)
		RTC_TimeTypeDef RTC_TimeStructure = {tempArray[3],tempArray[4],tempArray[5]};
 80019e2:	f88d 2000 	strb.w	r2, [sp]
 80019e6:	791a      	ldrb	r2, [r3, #4]
		RTC_DateTypeDef RTC_DateStructure = {0, tempArray[1],tempArray[2],tempArray[0]};
 80019e8:	f88d 4004 	strb.w	r4, [sp, #4]
		RTC_TimeTypeDef RTC_TimeStructure = {tempArray[3],tempArray[4],tempArray[5]};
 80019ec:	f88d 2001 	strb.w	r2, [sp, #1]
 80019f0:	795a      	ldrb	r2, [r3, #5]
 80019f2:	f88d 2002 	strb.w	r2, [sp, #2]
		RTC_DateTypeDef RTC_DateStructure = {0, tempArray[1],tempArray[2],tempArray[0]};
 80019f6:	785a      	ldrb	r2, [r3, #1]
 80019f8:	f88d 2005 	strb.w	r2, [sp, #5]
 80019fc:	789a      	ldrb	r2, [r3, #2]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	f88d 2006 	strb.w	r2, [sp, #6]
		HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8001a04:	4622      	mov	r2, r4
		RTC_DateTypeDef RTC_DateStructure = {0, tempArray[1],tempArray[2],tempArray[0]};
 8001a06:	f88d 3007 	strb.w	r3, [sp, #7]
		HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8001a0a:	f002 fa3a 	bl	8003e82 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &RTC_DateStructure, RTC_FORMAT_BIN);
 8001a0e:	4622      	mov	r2, r4
 8001a10:	a901      	add	r1, sp, #4
 8001a12:	4815      	ldr	r0, [pc, #84]	; (8001a68 <extranceDateAndTime+0x120>)
 8001a14:	f002 fb42 	bl	800409c <HAL_RTC_SetDate>
		HAL_RTC_GetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8001a18:	4622      	mov	r2, r4
 8001a1a:	4669      	mov	r1, sp
 8001a1c:	4812      	ldr	r0, [pc, #72]	; (8001a68 <extranceDateAndTime+0x120>)
 8001a1e:	f002 fa7f 	bl	8003f20 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RTC_DateStructure, RTC_FORMAT_BIN);
 8001a22:	4622      	mov	r2, r4
 8001a24:	a901      	add	r1, sp, #4
 8001a26:	4810      	ldr	r0, [pc, #64]	; (8001a68 <extranceDateAndTime+0x120>)
 8001a28:	f002 fb90 	bl	800414c <HAL_RTC_GetDate>
		HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	4669      	mov	r1, sp
 8001a30:	480d      	ldr	r0, [pc, #52]	; (8001a68 <extranceDateAndTime+0x120>)
 8001a32:	f002 fa26 	bl	8003e82 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &RTC_DateStructure, RTC_FORMAT_BIN);
 8001a36:	4622      	mov	r2, r4
 8001a38:	480b      	ldr	r0, [pc, #44]	; (8001a68 <extranceDateAndTime+0x120>)
 8001a3a:	a901      	add	r1, sp, #4
 8001a3c:	f002 fb2e 	bl	800409c <HAL_RTC_SetDate>
}
 8001a40:	b003      	add	sp, #12
 8001a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	oled_clear();
 8001a46:	f7ff ba3b 	b.w	8000ec0 <oled_clear>
				clearBluetoothCommand();
 8001a4a:	f7ff f86b 	bl	8000b24 <clearBluetoothCommand>
				settingFlag -= 2;
 8001a4e:	3c02      	subs	r4, #2
		while(settedFlag == 0)
 8001a50:	e7ba      	b.n	80019c8 <extranceDateAndTime+0x80>
				clearBluetoothCommand();
 8001a52:	f7ff f867 	bl	8000b24 <clearBluetoothCommand>
				oled_clear();
 8001a56:	f7ff fa33 	bl	8000ec0 <oled_clear>
				setDateAndTimeShow(settingFlag);
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff fc46 	bl	80012ec <setDateAndTimeShow>
				break;
 8001a60:	e7a9      	b.n	80019b6 <extranceDateAndTime+0x6e>
 8001a62:	bf00      	nop
 8001a64:	20003ec8 	.word	0x20003ec8
 8001a68:	20004368 	.word	0x20004368

08001a6c <RTC_TimeAndDate_Show>:

// 显示当前日历
void RTC_TimeAndDate_Show(void)
{
 8001a6c:	b530      	push	{r4, r5, lr}
 8001a6e:	b085      	sub	sp, #20
	RTC_TimeTypeDef RTC_TimeStructure;
	RTC_DateTypeDef RTC_DateStructure;
	HAL_RTC_GetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8001a70:	2200      	movs	r2, #0
 8001a72:	a902      	add	r1, sp, #8
 8001a74:	4891      	ldr	r0, [pc, #580]	; (8001cbc <RTC_TimeAndDate_Show+0x250>)
 8001a76:	f002 fa53 	bl	8003f20 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_DateStructure, RTC_FORMAT_BIN);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	a903      	add	r1, sp, #12
 8001a7e:	488f      	ldr	r0, [pc, #572]	; (8001cbc <RTC_TimeAndDate_Show+0x250>)
 8001a80:	f002 fb64 	bl	800414c <HAL_RTC_GetDate>

	// 年月日
	OLED_ShowNumber(0,0,2,1,8);
 8001a84:	2408      	movs	r4, #8
 8001a86:	2100      	movs	r1, #0
 8001a88:	2301      	movs	r3, #1
 8001a8a:	4608      	mov	r0, r1
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	9400      	str	r4, [sp, #0]
 8001a90:	f7ff fb18 	bl	80010c4 <OLED_ShowNumber>
	OLED_ShowNumber(10,0,0,1,8);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2301      	movs	r3, #1
 8001a98:	4611      	mov	r1, r2
 8001a9a:	200a      	movs	r0, #10
 8001a9c:	9400      	str	r4, [sp, #0]
 8001a9e:	f7ff fb11 	bl	80010c4 <OLED_ShowNumber>
	if(RTC_DateStructure.Year > 9)
 8001aa2:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001aa6:	2a09      	cmp	r2, #9
 8001aa8:	f240 8083 	bls.w	8001bb2 <RTC_TimeAndDate_Show+0x146>
	{
		OLED_ShowNumber(20,0,RTC_DateStructure.Year,2,16);
 8001aac:	2310      	movs	r3, #16
 8001aae:	2100      	movs	r1, #0
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2014      	movs	r0, #20
 8001ab4:	2302      	movs	r3, #2
	{
		OLED_ShowNumber(20,0,0,1,8);
		OLED_ShowNumber(30,0,RTC_DateStructure.Year,1,8);
	}

	oled_show_char(40, 0,'.', &fontone, SSD1306_COLOR_WHITE);
 8001ab6:	2401      	movs	r4, #1
		OLED_ShowNumber(30,0,RTC_DateStructure.Year,1,8);
 8001ab8:	f7ff fb04 	bl	80010c4 <OLED_ShowNumber>
	oled_show_char(40, 0,'.', &fontone, SSD1306_COLOR_WHITE);
 8001abc:	222e      	movs	r2, #46	; 0x2e
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2028      	movs	r0, #40	; 0x28
 8001ac2:	4b7f      	ldr	r3, [pc, #508]	; (8001cc0 <RTC_TimeAndDate_Show+0x254>)
 8001ac4:	9400      	str	r4, [sp, #0]
 8001ac6:	f7ff fa21 	bl	8000f0c <oled_show_char>

	if(RTC_DateStructure.Month > 9)
 8001aca:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001ace:	2a09      	cmp	r2, #9
 8001ad0:	d97d      	bls.n	8001bce <RTC_TimeAndDate_Show+0x162>
	{
		OLED_ShowNumber(50,0,RTC_DateStructure.Month,2,16);
 8001ad2:	2310      	movs	r3, #16
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2032      	movs	r0, #50	; 0x32
 8001ada:	2302      	movs	r3, #2
	{
		OLED_ShowNumber(50,0,0,1,8);
		OLED_ShowNumber(60,0,RTC_DateStructure.Month,1,8);
	}

	oled_show_char(70, 0,'.', &fontone, SSD1306_COLOR_WHITE);
 8001adc:	2401      	movs	r4, #1
		OLED_ShowNumber(60,0,RTC_DateStructure.Month,1,8);
 8001ade:	f7ff faf1 	bl	80010c4 <OLED_ShowNumber>
	oled_show_char(70, 0,'.', &fontone, SSD1306_COLOR_WHITE);
 8001ae2:	222e      	movs	r2, #46	; 0x2e
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2046      	movs	r0, #70	; 0x46
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <RTC_TimeAndDate_Show+0x254>)
 8001aea:	9400      	str	r4, [sp, #0]
 8001aec:	f7ff fa0e 	bl	8000f0c <oled_show_char>

	if(RTC_DateStructure.Date > 9)
 8001af0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8001af4:	2a09      	cmp	r2, #9
 8001af6:	d979      	bls.n	8001bec <RTC_TimeAndDate_Show+0x180>
	{
		OLED_ShowNumber(80,0,RTC_DateStructure.Date,2,16);
 8001af8:	2310      	movs	r3, #16
 8001afa:	2100      	movs	r1, #0
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2050      	movs	r0, #80	; 0x50
 8001b00:	2302      	movs	r3, #2
	}
	else
	{
		OLED_ShowNumber(80,0,0,1,8);
		OLED_ShowNumber(90,0,RTC_DateStructure.Date,1,8);
 8001b02:	f7ff fadf 	bl	80010c4 <OLED_ShowNumber>
	}

	// 时分秒
	if(flagAMPM ==1)
 8001b06:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <RTC_TimeAndDate_Show+0x258>)
	{		// 开AM/PM模式
		if(RTC_TimeStructure.Hours >= 12)	// PM
 8001b08:	f89d 2008 	ldrb.w	r2, [sp, #8]
	if(flagAMPM ==1)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	b2dc      	uxtb	r4, r3
 8001b12:	f040 80a4 	bne.w	8001c5e <RTC_TimeAndDate_Show+0x1f2>
		if(RTC_TimeStructure.Hours >= 12)	// PM
 8001b16:	2a0b      	cmp	r2, #11
			{
				oled_show_str(0,20,"PM", &fontone, SSD1306_COLOR_WHITE);
 8001b18:	4b69      	ldr	r3, [pc, #420]	; (8001cc0 <RTC_TimeAndDate_Show+0x254>)
 8001b1a:	9400      	str	r4, [sp, #0]
		if(RTC_TimeStructure.Hours >= 12)	// PM
 8001b1c:	f240 8085 	bls.w	8001c2a <RTC_TimeAndDate_Show+0x1be>
				oled_show_str(0,20,"PM", &fontone, SSD1306_COLOR_WHITE);
 8001b20:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <RTC_TimeAndDate_Show+0x25c>)
 8001b22:	2114      	movs	r1, #20
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff faa5 	bl	8001074 <oled_show_str>
				if((RTC_TimeStructure.Hours - 12) > 9)
 8001b2a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001b2e:	2a15      	cmp	r2, #21
 8001b30:	d96b      	bls.n	8001c0a <RTC_TimeAndDate_Show+0x19e>
				{
					OLED_ShowNumber(20,20,(RTC_TimeStructure.Hours - 12),2,16);
 8001b32:	2310      	movs	r3, #16
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2302      	movs	r3, #2
 8001b38:	3a0c      	subs	r2, #12
	}
	else
	{		// 关AM/PM模式
		if(RTC_TimeStructure.Hours > 9)
		{
			OLED_ShowNumber(20,20,RTC_TimeStructure.Hours,2,16);
 8001b3a:	2114      	movs	r1, #20
 8001b3c:	4608      	mov	r0, r1
			OLED_ShowNumber(20,20,0,1,8);
			OLED_ShowNumber(30,20,RTC_TimeStructure.Hours,1,8);
		}
	}

	oled_show_char(40, 20,':', &fontone, SSD1306_COLOR_WHITE);
 8001b3e:	2401      	movs	r4, #1
			OLED_ShowNumber(30,20,RTC_TimeStructure.Hours,1,8);
 8001b40:	f7ff fac0 	bl	80010c4 <OLED_ShowNumber>
	oled_show_char(40, 20,':', &fontone, SSD1306_COLOR_WHITE);
 8001b44:	223a      	movs	r2, #58	; 0x3a
 8001b46:	2114      	movs	r1, #20
 8001b48:	2028      	movs	r0, #40	; 0x28
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <RTC_TimeAndDate_Show+0x254>)
 8001b4c:	9400      	str	r4, [sp, #0]
 8001b4e:	f7ff f9dd 	bl	8000f0c <oled_show_char>

	if(RTC_TimeStructure.Minutes > 9)
 8001b52:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001b56:	2a09      	cmp	r2, #9
 8001b58:	f240 808d 	bls.w	8001c76 <RTC_TimeAndDate_Show+0x20a>
	{
		OLED_ShowNumber(50,20,RTC_TimeStructure.Minutes,2,16);
 8001b5c:	2310      	movs	r3, #16
 8001b5e:	2114      	movs	r1, #20
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2032      	movs	r0, #50	; 0x32
 8001b64:	2302      	movs	r3, #2
	{
		OLED_ShowNumber(50,20,0,1,8);
		OLED_ShowNumber(60,20,RTC_TimeStructure.Minutes,1,8);
	}

	oled_show_char(70, 20,':', &fontone, SSD1306_COLOR_WHITE);
 8001b66:	2401      	movs	r4, #1
		OLED_ShowNumber(60,20,RTC_TimeStructure.Minutes,1,8);
 8001b68:	f7ff faac 	bl	80010c4 <OLED_ShowNumber>
	oled_show_char(70, 20,':', &fontone, SSD1306_COLOR_WHITE);
 8001b6c:	223a      	movs	r2, #58	; 0x3a
 8001b6e:	2114      	movs	r1, #20
 8001b70:	2046      	movs	r0, #70	; 0x46
 8001b72:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <RTC_TimeAndDate_Show+0x254>)
 8001b74:	9400      	str	r4, [sp, #0]
 8001b76:	f7ff f9c9 	bl	8000f0c <oled_show_char>

	if(RTC_TimeStructure.Seconds > 9)
 8001b7a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001b7e:	2a09      	cmp	r2, #9
 8001b80:	f240 8088 	bls.w	8001c94 <RTC_TimeAndDate_Show+0x228>
	{
		OLED_ShowNumber(80,20,RTC_TimeStructure.Seconds,2,16);
 8001b84:	2310      	movs	r3, #16
 8001b86:	2114      	movs	r1, #20
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2050      	movs	r0, #80	; 0x50
 8001b8c:	2302      	movs	r3, #2
	}
	else
	{
		OLED_ShowNumber(80,20,0,1,8);
		OLED_ShowNumber(90,20,RTC_TimeStructure.Seconds,1,8);
 8001b8e:	f7ff fa99 	bl	80010c4 <OLED_ShowNumber>
	}

	// 星期
	if(RTC_DateStructure.WeekDay == RTC_WEEKDAY_SUNDAY)
 8001b92:	2308      	movs	r3, #8
 8001b94:	f89d 000c 	ldrb.w	r0, [sp, #12]
	{
		OLED_ShowNumber(0,40,7,1,8);
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2301      	movs	r3, #1
	if(RTC_DateStructure.WeekDay == RTC_WEEKDAY_SUNDAY)
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	f040 8088 	bne.w	8001cb2 <RTC_TimeAndDate_Show+0x246>
		OLED_ShowNumber(0,40,7,1,8);
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	2128      	movs	r1, #40	; 0x28
	}
	else
	{
		OLED_ShowNumber(0,40,RTC_DateStructure.WeekDay,1,8);
 8001ba6:	f7ff fa8d 	bl	80010c4 <OLED_ShowNumber>
	}

	oled_update_screen();
 8001baa:	f7ff f96f 	bl	8000e8c <oled_update_screen>
}
 8001bae:	b005      	add	sp, #20
 8001bb0:	bd30      	pop	{r4, r5, pc}
		OLED_ShowNumber(20,0,0,1,8);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	2014      	movs	r0, #20
 8001bba:	9400      	str	r4, [sp, #0]
 8001bbc:	f7ff fa82 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(30,0,RTC_DateStructure.Year,1,8);
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	201e      	movs	r0, #30
 8001bc6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001bca:	9400      	str	r4, [sp, #0]
 8001bcc:	e773      	b.n	8001ab6 <RTC_TimeAndDate_Show+0x4a>
		OLED_ShowNumber(50,0,0,1,8);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2508      	movs	r5, #8
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4623      	mov	r3, r4
 8001bd6:	2032      	movs	r0, #50	; 0x32
 8001bd8:	9500      	str	r5, [sp, #0]
 8001bda:	f7ff fa73 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(60,0,RTC_DateStructure.Month,1,8);
 8001bde:	4623      	mov	r3, r4
 8001be0:	2100      	movs	r1, #0
 8001be2:	203c      	movs	r0, #60	; 0x3c
 8001be4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001be8:	9500      	str	r5, [sp, #0]
 8001bea:	e777      	b.n	8001adc <RTC_TimeAndDate_Show+0x70>
		OLED_ShowNumber(80,0,0,1,8);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2508      	movs	r5, #8
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	2050      	movs	r0, #80	; 0x50
 8001bf6:	9500      	str	r5, [sp, #0]
 8001bf8:	f7ff fa64 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(90,0,RTC_DateStructure.Date,1,8);
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	2100      	movs	r1, #0
 8001c00:	205a      	movs	r0, #90	; 0x5a
 8001c02:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8001c06:	9500      	str	r5, [sp, #0]
 8001c08:	e77b      	b.n	8001b02 <RTC_TimeAndDate_Show+0x96>
					OLED_ShowNumber(20,20,0,1,8);
 8001c0a:	2508      	movs	r5, #8
 8001c0c:	2114      	movs	r1, #20
 8001c0e:	4623      	mov	r3, r4
 8001c10:	2200      	movs	r2, #0
 8001c12:	4608      	mov	r0, r1
 8001c14:	9500      	str	r5, [sp, #0]
 8001c16:	f7ff fa55 	bl	80010c4 <OLED_ShowNumber>
					OLED_ShowNumber(30,20,(RTC_TimeStructure.Hours - 12),1,8);
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001c20:	9500      	str	r5, [sp, #0]
 8001c22:	3a0c      	subs	r2, #12
			OLED_ShowNumber(30,20,RTC_TimeStructure.Hours,1,8);
 8001c24:	2114      	movs	r1, #20
 8001c26:	201e      	movs	r0, #30
 8001c28:	e789      	b.n	8001b3e <RTC_TimeAndDate_Show+0xd2>
				oled_show_str(0,20,"AM", &fontone, SSD1306_COLOR_WHITE);
 8001c2a:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <RTC_TimeAndDate_Show+0x260>)
 8001c2c:	2114      	movs	r1, #20
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f7ff fa20 	bl	8001074 <oled_show_str>
				if(RTC_TimeStructure.Hours > 9)
 8001c34:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001c38:	2a09      	cmp	r2, #9
 8001c3a:	d903      	bls.n	8001c44 <RTC_TimeAndDate_Show+0x1d8>
			OLED_ShowNumber(20,20,RTC_TimeStructure.Hours,2,16);
 8001c3c:	2310      	movs	r3, #16
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2302      	movs	r3, #2
 8001c42:	e77a      	b.n	8001b3a <RTC_TimeAndDate_Show+0xce>
					OLED_ShowNumber(20,20,0,1,8);
 8001c44:	2508      	movs	r5, #8
 8001c46:	2114      	movs	r1, #20
 8001c48:	4623      	mov	r3, r4
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	9500      	str	r5, [sp, #0]
 8001c50:	f7ff fa38 	bl	80010c4 <OLED_ShowNumber>
					OLED_ShowNumber(30,20,RTC_TimeStructure.Hours,1,8);
 8001c54:	9500      	str	r5, [sp, #0]
			OLED_ShowNumber(30,20,RTC_TimeStructure.Hours,1,8);
 8001c56:	2301      	movs	r3, #1
 8001c58:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001c5c:	e7e2      	b.n	8001c24 <RTC_TimeAndDate_Show+0x1b8>
		if(RTC_TimeStructure.Hours > 9)
 8001c5e:	2a09      	cmp	r2, #9
 8001c60:	d8ec      	bhi.n	8001c3c <RTC_TimeAndDate_Show+0x1d0>
			OLED_ShowNumber(20,20,0,1,8);
 8001c62:	2408      	movs	r4, #8
 8001c64:	2114      	movs	r1, #20
 8001c66:	2301      	movs	r3, #1
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4608      	mov	r0, r1
 8001c6c:	9400      	str	r4, [sp, #0]
 8001c6e:	f7ff fa29 	bl	80010c4 <OLED_ShowNumber>
			OLED_ShowNumber(30,20,RTC_TimeStructure.Hours,1,8);
 8001c72:	9400      	str	r4, [sp, #0]
 8001c74:	e7ef      	b.n	8001c56 <RTC_TimeAndDate_Show+0x1ea>
		OLED_ShowNumber(50,20,0,1,8);
 8001c76:	2508      	movs	r5, #8
 8001c78:	4623      	mov	r3, r4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2114      	movs	r1, #20
 8001c7e:	2032      	movs	r0, #50	; 0x32
 8001c80:	9500      	str	r5, [sp, #0]
 8001c82:	f7ff fa1f 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(60,20,RTC_TimeStructure.Minutes,1,8);
 8001c86:	4623      	mov	r3, r4
 8001c88:	2114      	movs	r1, #20
 8001c8a:	203c      	movs	r0, #60	; 0x3c
 8001c8c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001c90:	9500      	str	r5, [sp, #0]
 8001c92:	e768      	b.n	8001b66 <RTC_TimeAndDate_Show+0xfa>
		OLED_ShowNumber(80,20,0,1,8);
 8001c94:	2508      	movs	r5, #8
 8001c96:	4623      	mov	r3, r4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2114      	movs	r1, #20
 8001c9c:	2050      	movs	r0, #80	; 0x50
 8001c9e:	9500      	str	r5, [sp, #0]
 8001ca0:	f7ff fa10 	bl	80010c4 <OLED_ShowNumber>
		OLED_ShowNumber(90,20,RTC_TimeStructure.Seconds,1,8);
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	2114      	movs	r1, #20
 8001ca8:	205a      	movs	r0, #90	; 0x5a
 8001caa:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001cae:	9500      	str	r5, [sp, #0]
 8001cb0:	e76d      	b.n	8001b8e <RTC_TimeAndDate_Show+0x122>
		OLED_ShowNumber(0,40,RTC_DateStructure.WeekDay,1,8);
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	2128      	movs	r1, #40	; 0x28
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	e775      	b.n	8001ba6 <RTC_TimeAndDate_Show+0x13a>
 8001cba:	bf00      	nop
 8001cbc:	20004368 	.word	0x20004368
 8001cc0:	20003f4c 	.word	0x20003f4c
 8001cc4:	20003f54 	.word	0x20003f54
 8001cc8:	08004bc9 	.word	0x08004bc9
 8001ccc:	08004bcc 	.word	0x08004bcc

08001cd0 <showSolarTermsScreen2>:
	oled_update_screen();
}

// 切屏2：节气部分
void showSolarTermsScreen2(void)
{
 8001cd0:	b510      	push	{r4, lr}
	loadSettingOrignalValue();
 8001cd2:	f7fe fef9 	bl	8000ac8 <loadSettingOrignalValue>

	switch(tempArray[1])
 8001cd6:	4b88      	ldr	r3, [pc, #544]	; (8001ef8 <showSolarTermsScreen2+0x228>)
 8001cd8:	785a      	ldrb	r2, [r3, #1]
 8001cda:	3a01      	subs	r2, #1
 8001cdc:	2a0b      	cmp	r2, #11
 8001cde:	f200 810a 	bhi.w	8001ef6 <showSolarTermsScreen2+0x226>
 8001ce2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001ce6:	000c      	.short	0x000c
 8001ce8:	0044002c 	.word	0x0044002c
 8001cec:	0074005c 	.word	0x0074005c
 8001cf0:	00a4008c 	.word	0x00a4008c
 8001cf4:	00c800b6 	.word	0x00c800b6
 8001cf8:	00ec00d4 	.word	0x00ec00d4
 8001cfc:	00fe      	.short	0x00fe
	{
	case 1:		// 一月
		if(tempArray[2] <= 5){     //1月5日小寒，1月20日大寒
 8001cfe:	789a      	ldrb	r2, [r3, #2]
 8001d00:	2a05      	cmp	r2, #5
 8001d02:	d80d      	bhi.n	8001d20 <showSolarTermsScreen2+0x50>
			oled_show_china(20,20,12, SSD1306_COLOR_WHITE);
 8001d04:	2301      	movs	r3, #1
 8001d06:	220c      	movs	r2, #12
			oled_show_china(40,20,25, SSD1306_COLOR_WHITE);        //小寒
		}

		else if(tempArray[2] <= 20){
			oled_show_china(20,20,18, SSD1306_COLOR_WHITE);
 8001d08:	2114      	movs	r1, #20
 8001d0a:	4608      	mov	r0, r1
 8001d0c:	f7ff f94a 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,25, SSD1306_COLOR_WHITE);       //大寒
 8001d10:	2301      	movs	r3, #1
 8001d12:	2219      	movs	r2, #25
			oled_show_china(20,20,12, SSD1306_COLOR_WHITE);
			oled_show_china(40,20,25, SSD1306_COLOR_WHITE);        //小寒
		}
		break;
	}
}
 8001d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			oled_show_china(40,20,17, SSD1306_COLOR_WHITE);       //冬至
 8001d18:	2114      	movs	r1, #20
 8001d1a:	2028      	movs	r0, #40	; 0x28
 8001d1c:	f7ff b942 	b.w	8000fa4 <oled_show_china>
		else if(tempArray[2] <= 20){
 8001d20:	789b      	ldrb	r3, [r3, #2]
 8001d22:	2b14      	cmp	r3, #20
 8001d24:	d802      	bhi.n	8001d2c <showSolarTermsScreen2+0x5c>
			oled_show_china(20,20,18, SSD1306_COLOR_WHITE);
 8001d26:	2301      	movs	r3, #1
 8001d28:	2212      	movs	r2, #18
 8001d2a:	e7ed      	b.n	8001d08 <showSolarTermsScreen2+0x38>
			oled_show_china(20,20,0, SSD1306_COLOR_WHITE);
 8001d2c:	2114      	movs	r1, #20
 8001d2e:	2301      	movs	r3, #1
 8001d30:	2200      	movs	r2, #0
 8001d32:	4608      	mov	r0, r1
 8001d34:	f7ff f936 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,6, SSD1306_COLOR_WHITE);        //立春
 8001d38:	2301      	movs	r3, #1
 8001d3a:	2206      	movs	r2, #6
 8001d3c:	e7ea      	b.n	8001d14 <showSolarTermsScreen2+0x44>
		if(tempArray[2] <= 4){     //2月4日立春，2月18日雨水
 8001d3e:	789a      	ldrb	r2, [r3, #2]
 8001d40:	2a04      	cmp	r2, #4
 8001d42:	d9f3      	bls.n	8001d2c <showSolarTermsScreen2+0x5c>
		else if(tempArray[2]<=18){
 8001d44:	789b      	ldrb	r3, [r3, #2]
 8001d46:	2b12      	cmp	r3, #18
 8001d48:	d808      	bhi.n	8001d5c <showSolarTermsScreen2+0x8c>
			oled_show_china(20,20,2, SSD1306_COLOR_WHITE);
 8001d4a:	2114      	movs	r1, #20
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4608      	mov	r0, r1
 8001d52:	f7ff f927 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,3, SSD1306_COLOR_WHITE);       //雨水
 8001d56:	2301      	movs	r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	e7db      	b.n	8001d14 <showSolarTermsScreen2+0x44>
			oled_show_china(20,20,4, SSD1306_COLOR_WHITE);
 8001d5c:	2114      	movs	r1, #20
 8001d5e:	2301      	movs	r3, #1
 8001d60:	2204      	movs	r2, #4
 8001d62:	4608      	mov	r0, r1
 8001d64:	f7ff f91e 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,5, SSD1306_COLOR_WHITE);        //惊蛰
 8001d68:	2301      	movs	r3, #1
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	e7d2      	b.n	8001d14 <showSolarTermsScreen2+0x44>
		if(tempArray[2] <= 6){     //3月6日惊蛰，3月21日春分
 8001d6e:	789a      	ldrb	r2, [r3, #2]
 8001d70:	2a06      	cmp	r2, #6
 8001d72:	d9f3      	bls.n	8001d5c <showSolarTermsScreen2+0x8c>
		else if(tempArray[2]<=21){
 8001d74:	789b      	ldrb	r3, [r3, #2]
 8001d76:	2b15      	cmp	r3, #21
 8001d78:	d808      	bhi.n	8001d8c <showSolarTermsScreen2+0xbc>
			oled_show_china(20,20,6, SSD1306_COLOR_WHITE);
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	2206      	movs	r2, #6
			oled_show_china(20,20,24, SSD1306_COLOR_WHITE);
 8001d7e:	2114      	movs	r1, #20
 8001d80:	4608      	mov	r0, r1
 8001d82:	f7ff f90f 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,7, SSD1306_COLOR_WHITE);       //秋分
 8001d86:	2301      	movs	r3, #1
 8001d88:	2207      	movs	r2, #7
 8001d8a:	e7c3      	b.n	8001d14 <showSolarTermsScreen2+0x44>
			oled_show_china(20,20,8, SSD1306_COLOR_WHITE);
 8001d8c:	2114      	movs	r1, #20
 8001d8e:	2301      	movs	r3, #1
 8001d90:	2208      	movs	r2, #8
 8001d92:	4608      	mov	r0, r1
 8001d94:	f7ff f906 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,9, SSD1306_COLOR_WHITE);        //清明
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2209      	movs	r2, #9
 8001d9c:	e7ba      	b.n	8001d14 <showSolarTermsScreen2+0x44>
		if(tempArray[2]<=4){     //4月4日清明，4月19日谷雨
 8001d9e:	789a      	ldrb	r2, [r3, #2]
 8001da0:	2a04      	cmp	r2, #4
 8001da2:	d9f3      	bls.n	8001d8c <showSolarTermsScreen2+0xbc>
		else if(tempArray[2]<=19){
 8001da4:	789b      	ldrb	r3, [r3, #2]
 8001da6:	2b13      	cmp	r3, #19
 8001da8:	d808      	bhi.n	8001dbc <showSolarTermsScreen2+0xec>
			oled_show_china(20,20,10, SSD1306_COLOR_WHITE);
 8001daa:	2114      	movs	r1, #20
 8001dac:	2301      	movs	r3, #1
 8001dae:	220a      	movs	r2, #10
 8001db0:	4608      	mov	r0, r1
 8001db2:	f7ff f8f7 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,2, SSD1306_COLOR_WHITE);       //谷雨
 8001db6:	2301      	movs	r3, #1
 8001db8:	2202      	movs	r2, #2
 8001dba:	e7ab      	b.n	8001d14 <showSolarTermsScreen2+0x44>
			oled_show_china(20,20,0, SSD1306_COLOR_WHITE);
 8001dbc:	2114      	movs	r1, #20
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4608      	mov	r0, r1
 8001dc4:	f7ff f8ee 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,16, SSD1306_COLOR_WHITE);        //立夏
 8001dc8:	2301      	movs	r3, #1
 8001dca:	2210      	movs	r2, #16
 8001dcc:	e7a2      	b.n	8001d14 <showSolarTermsScreen2+0x44>
		if(tempArray[2]<=5){     //5月5日立夏，5月20日小满
 8001dce:	789a      	ldrb	r2, [r3, #2]
 8001dd0:	2a05      	cmp	r2, #5
 8001dd2:	d9f3      	bls.n	8001dbc <showSolarTermsScreen2+0xec>
		else if(tempArray[2]<=20){
 8001dd4:	789b      	ldrb	r3, [r3, #2]
 8001dd6:	2b14      	cmp	r3, #20
 8001dd8:	d808      	bhi.n	8001dec <showSolarTermsScreen2+0x11c>
			oled_show_china(20,20,12, SSD1306_COLOR_WHITE);
 8001dda:	2114      	movs	r1, #20
 8001ddc:	2301      	movs	r3, #1
 8001dde:	220c      	movs	r2, #12
 8001de0:	4608      	mov	r0, r1
 8001de2:	f7ff f8df 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,13, SSD1306_COLOR_WHITE);       //小满
 8001de6:	2301      	movs	r3, #1
 8001de8:	220d      	movs	r2, #13
 8001dea:	e793      	b.n	8001d14 <showSolarTermsScreen2+0x44>
			oled_show_china(20,20,14, SSD1306_COLOR_WHITE);
 8001dec:	2114      	movs	r1, #20
 8001dee:	2301      	movs	r3, #1
 8001df0:	220e      	movs	r2, #14
 8001df2:	4608      	mov	r0, r1
 8001df4:	f7ff f8d6 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,15, SSD1306_COLOR_WHITE);        //芒种
 8001df8:	2301      	movs	r3, #1
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	e78a      	b.n	8001d14 <showSolarTermsScreen2+0x44>
		if(tempArray[2]<=5){     //6月5日芒种，6月21日夏至
 8001dfe:	789a      	ldrb	r2, [r3, #2]
 8001e00:	2a05      	cmp	r2, #5
 8001e02:	d9f3      	bls.n	8001dec <showSolarTermsScreen2+0x11c>
		else if(tempArray[2]<=21){
 8001e04:	789b      	ldrb	r3, [r3, #2]
 8001e06:	2b15      	cmp	r3, #21
 8001e08:	d808      	bhi.n	8001e1c <showSolarTermsScreen2+0x14c>
			oled_show_china(20,20,16, SSD1306_COLOR_WHITE);
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	2210      	movs	r2, #16
			oled_show_china(20,20,30, SSD1306_COLOR_WHITE);
 8001e0e:	2114      	movs	r1, #20
 8001e10:	4608      	mov	r0, r1
 8001e12:	f7ff f8c7 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,17, SSD1306_COLOR_WHITE);       //冬至
 8001e16:	2301      	movs	r3, #1
 8001e18:	2211      	movs	r2, #17
 8001e1a:	e77b      	b.n	8001d14 <showSolarTermsScreen2+0x44>
			oled_show_china(20,20,12, SSD1306_COLOR_WHITE);
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	220c      	movs	r2, #12
			oled_show_china(20,20,21, SSD1306_COLOR_WHITE);
 8001e20:	2114      	movs	r1, #20
 8001e22:	4608      	mov	r0, r1
 8001e24:	f7ff f8be 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,19, SSD1306_COLOR_WHITE);       //处暑
 8001e28:	2301      	movs	r3, #1
 8001e2a:	2213      	movs	r2, #19
 8001e2c:	e772      	b.n	8001d14 <showSolarTermsScreen2+0x44>
		if(tempArray[2]<=6){     //7月6日小暑，7月22日大暑
 8001e2e:	789a      	ldrb	r2, [r3, #2]
 8001e30:	2a06      	cmp	r2, #6
 8001e32:	d9f3      	bls.n	8001e1c <showSolarTermsScreen2+0x14c>
		else if(tempArray[2]<=22){
 8001e34:	789b      	ldrb	r3, [r3, #2]
 8001e36:	2b16      	cmp	r3, #22
 8001e38:	d802      	bhi.n	8001e40 <showSolarTermsScreen2+0x170>
			oled_show_china(20,20,18, SSD1306_COLOR_WHITE);
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	2212      	movs	r2, #18
 8001e3e:	e7ef      	b.n	8001e20 <showSolarTermsScreen2+0x150>
			oled_show_china(20,20,0, SSD1306_COLOR_WHITE);
 8001e40:	2114      	movs	r1, #20
 8001e42:	2301      	movs	r3, #1
 8001e44:	2200      	movs	r2, #0
 8001e46:	4608      	mov	r0, r1
 8001e48:	f7ff f8ac 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,24, SSD1306_COLOR_WHITE);        //立秋
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	2218      	movs	r2, #24
 8001e50:	e760      	b.n	8001d14 <showSolarTermsScreen2+0x44>
		if(tempArray[2]<=7){     //8月7日立秋，8月22日处暑
 8001e52:	789a      	ldrb	r2, [r3, #2]
 8001e54:	2a07      	cmp	r2, #7
 8001e56:	d9f3      	bls.n	8001e40 <showSolarTermsScreen2+0x170>
		else if(tempArray[2]<=22){
 8001e58:	789b      	ldrb	r3, [r3, #2]
 8001e5a:	2b16      	cmp	r3, #22
 8001e5c:	d802      	bhi.n	8001e64 <showSolarTermsScreen2+0x194>
			oled_show_china(20,20,21, SSD1306_COLOR_WHITE);
 8001e5e:	2301      	movs	r3, #1
 8001e60:	2215      	movs	r2, #21
 8001e62:	e7dd      	b.n	8001e20 <showSolarTermsScreen2+0x150>
			oled_show_china(20,20,22, SSD1306_COLOR_WHITE);
 8001e64:	2301      	movs	r3, #1
 8001e66:	2216      	movs	r2, #22
			oled_show_china(20,20,25, SSD1306_COLOR_WHITE);
 8001e68:	2114      	movs	r1, #20
 8001e6a:	4608      	mov	r0, r1
 8001e6c:	f7ff f89a 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,23, SSD1306_COLOR_WHITE);        //寒露
 8001e70:	2301      	movs	r3, #1
 8001e72:	2217      	movs	r2, #23
 8001e74:	e74e      	b.n	8001d14 <showSolarTermsScreen2+0x44>
		if(tempArray[2]<=7){     //9月7日白露，9月22日秋分
 8001e76:	789a      	ldrb	r2, [r3, #2]
 8001e78:	2a07      	cmp	r2, #7
 8001e7a:	d9f3      	bls.n	8001e64 <showSolarTermsScreen2+0x194>
		else if(tempArray[2]<=22){
 8001e7c:	789b      	ldrb	r3, [r3, #2]
 8001e7e:	2b16      	cmp	r3, #22
 8001e80:	d802      	bhi.n	8001e88 <showSolarTermsScreen2+0x1b8>
			oled_show_china(20,20,24, SSD1306_COLOR_WHITE);
 8001e82:	2301      	movs	r3, #1
 8001e84:	2218      	movs	r2, #24
 8001e86:	e77a      	b.n	8001d7e <showSolarTermsScreen2+0xae>
			oled_show_china(20,20,25, SSD1306_COLOR_WHITE);
 8001e88:	2301      	movs	r3, #1
 8001e8a:	2219      	movs	r2, #25
 8001e8c:	e7ec      	b.n	8001e68 <showSolarTermsScreen2+0x198>
		if(tempArray[2]<=7){     //10月7日寒露，10月23日霜降
 8001e8e:	789a      	ldrb	r2, [r3, #2]
 8001e90:	2a07      	cmp	r2, #7
 8001e92:	d9f9      	bls.n	8001e88 <showSolarTermsScreen2+0x1b8>
		else if(tempArray[2]<=23){
 8001e94:	789b      	ldrb	r3, [r3, #2]
 8001e96:	2b17      	cmp	r3, #23
 8001e98:	d808      	bhi.n	8001eac <showSolarTermsScreen2+0x1dc>
			oled_show_china(20,20,26, SSD1306_COLOR_WHITE);
 8001e9a:	2114      	movs	r1, #20
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	221a      	movs	r2, #26
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	f7ff f87f 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,27, SSD1306_COLOR_WHITE);       //霜降
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	221b      	movs	r2, #27
 8001eaa:	e733      	b.n	8001d14 <showSolarTermsScreen2+0x44>
			oled_show_china(20,20,0, SSD1306_COLOR_WHITE);
 8001eac:	2114      	movs	r1, #20
 8001eae:	2301      	movs	r3, #1
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4608      	mov	r0, r1
 8001eb4:	f7ff f876 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,30, SSD1306_COLOR_WHITE);        //立冬
 8001eb8:	2301      	movs	r3, #1
 8001eba:	221e      	movs	r2, #30
 8001ebc:	e72a      	b.n	8001d14 <showSolarTermsScreen2+0x44>
		if(tempArray[2]<=7){     //11月7日立冬，11月22日小雪
 8001ebe:	789a      	ldrb	r2, [r3, #2]
 8001ec0:	2a07      	cmp	r2, #7
 8001ec2:	d9f3      	bls.n	8001eac <showSolarTermsScreen2+0x1dc>
		else if(tempArray[2]<=22){
 8001ec4:	789b      	ldrb	r3, [r3, #2]
 8001ec6:	2b16      	cmp	r3, #22
 8001ec8:	d808      	bhi.n	8001edc <showSolarTermsScreen2+0x20c>
			oled_show_china(20,20,12, SSD1306_COLOR_WHITE);
 8001eca:	2301      	movs	r3, #1
 8001ecc:	220c      	movs	r2, #12
			oled_show_china(20,20,18, SSD1306_COLOR_WHITE);
 8001ece:	2114      	movs	r1, #20
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	f7ff f867 	bl	8000fa4 <oled_show_china>
			oled_show_china(40,20,29, SSD1306_COLOR_WHITE);        //大雪
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	221d      	movs	r2, #29
 8001eda:	e71b      	b.n	8001d14 <showSolarTermsScreen2+0x44>
			oled_show_china(20,20,18, SSD1306_COLOR_WHITE);
 8001edc:	2301      	movs	r3, #1
 8001ede:	2212      	movs	r2, #18
 8001ee0:	e7f5      	b.n	8001ece <showSolarTermsScreen2+0x1fe>
		if(tempArray[2]<=6){     //12月6日大雪，12月21日冬至
 8001ee2:	789a      	ldrb	r2, [r3, #2]
 8001ee4:	2a06      	cmp	r2, #6
 8001ee6:	d9f9      	bls.n	8001edc <showSolarTermsScreen2+0x20c>
		else if(tempArray[2]<=21){
 8001ee8:	789b      	ldrb	r3, [r3, #2]
 8001eea:	2b15      	cmp	r3, #21
 8001eec:	f63f af0a 	bhi.w	8001d04 <showSolarTermsScreen2+0x34>
			oled_show_china(20,20,30, SSD1306_COLOR_WHITE);
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	221e      	movs	r2, #30
 8001ef4:	e78b      	b.n	8001e0e <showSolarTermsScreen2+0x13e>
}
 8001ef6:	bd10      	pop	{r4, pc}
 8001ef8:	20003ec8 	.word	0x20003ec8

08001efc <stopMusic>:

#include "song.h"

// 停止播放音乐
void stopMusic(void)
{
 8001efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t stopArray[]={0x7E,0xFF,0x06,0x16,0x00,0x00,0x00,0xFE,0xE5,0xEF};
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <stopMusic+0x24>)
 8001f00:	ab01      	add	r3, sp, #4
 8001f02:	6810      	ldr	r0, [r2, #0]
 8001f04:	6851      	ldr	r1, [r2, #4]
 8001f06:	8912      	ldrh	r2, [r2, #8]
 8001f08:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart3,(uint8_t *)stopArray,sizeof(stopArray),0xFFFF);
 8001f0a:	a901      	add	r1, sp, #4
	uint8_t stopArray[]={0x7E,0xFF,0x06,0x16,0x00,0x00,0x00,0xFE,0xE5,0xEF};
 8001f0c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3,(uint8_t *)stopArray,sizeof(stopArray),0xFFFF);
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <stopMusic+0x28>)
 8001f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f14:	220a      	movs	r2, #10
 8001f16:	f002 fbae 	bl	8004676 <HAL_UART_Transmit>
}
 8001f1a:	b005      	add	sp, #20
 8001f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f20:	08004b40 	.word	0x08004b40
 8001f24:	200044ac 	.word	0x200044ac

08001f28 <playMusicWithParameter>:

// 播放音乐（有参、闹钟）
void playMusicWithParameter(uint8_t selectMusicId)
{
 8001f28:	b510      	push	{r4, lr}
 8001f2a:	b086      	sub	sp, #24
	uint8_t mp1[]={0x7E,0xEF,0x06,0x02,0x00,0x00,0x00,0xEF};		//上一首
 8001f2c:	466c      	mov	r4, sp
{
 8001f2e:	4602      	mov	r2, r0
	uint8_t mp1[]={0x7E,0xEF,0x06,0x02,0x00,0x00,0x00,0xEF};		//上一首
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <playMusicWithParameter+0x80>)
	uint8_t mp2[]={0x7E,0xFF,0x06,0x01,0x00,0x00,0x00,0xEF};		//下一首
	uint8_t mp3[]={0x7E,0xFF,0x06,0x16,0x00,0x00,0x00,0xEF};		//暂停


	switch(selectMusicId)
 8001f32:	2a02      	cmp	r2, #2
	uint8_t mp1[]={0x7E,0xEF,0x06,0x02,0x00,0x00,0x00,0xEF};		//上一首
 8001f34:	f8d3 000a 	ldr.w	r0, [r3, #10]
 8001f38:	f8d3 100e 	ldr.w	r1, [r3, #14]
 8001f3c:	c403      	stmia	r4!, {r0, r1}
	uint8_t mp2[]={0x7E,0xFF,0x06,0x01,0x00,0x00,0x00,0xEF};		//下一首
 8001f3e:	f8d3 0012 	ldr.w	r0, [r3, #18]
 8001f42:	f8d3 1016 	ldr.w	r1, [r3, #22]
 8001f46:	c403      	stmia	r4!, {r0, r1}
	uint8_t mp3[]={0x7E,0xFF,0x06,0x16,0x00,0x00,0x00,0xEF};		//暂停
 8001f48:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8001f4c:	f8d3 101e 	ldr.w	r1, [r3, #30]
 8001f50:	c403      	stmia	r4!, {r0, r1}
	switch(selectMusicId)
 8001f52:	d015      	beq.n	8001f80 <playMusicWithParameter+0x58>
 8001f54:	2a03      	cmp	r2, #3
 8001f56:	d021      	beq.n	8001f9c <playMusicWithParameter+0x74>
 8001f58:	2a01      	cmp	r2, #1
 8001f5a:	d10f      	bne.n	8001f7c <playMusicWithParameter+0x54>
	{
	case 1:
		if(musicId <= 1) musicId = 10;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <playMusicWithParameter+0x84>)
		else musicId--;
		HAL_UART_Transmit(&huart3,(uint8_t *)mp1,sizeof(mp1),0xFFFF);
 8001f5e:	4669      	mov	r1, sp
		if(musicId <= 1) musicId = 10;
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2a01      	cmp	r2, #1
 8001f64:	bfd2      	itee	le
 8001f66:	220a      	movle	r2, #10
		else musicId--;
 8001f68:	681a      	ldrgt	r2, [r3, #0]
 8001f6a:	f102 32ff 	addgt.w	r2, r2, #4294967295
 8001f6e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3,(uint8_t *)mp1,sizeof(mp1),0xFFFF);
 8001f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f74:	2208      	movs	r2, #8
		else musicId++;
		HAL_UART_Transmit(&huart3,(uint8_t *)mp2,sizeof(mp2),0xFFFF);
		break;

	case 3:
		HAL_UART_Transmit(&huart3,(uint8_t *)mp3,sizeof(mp3),0xFFFF);
 8001f76:	480e      	ldr	r0, [pc, #56]	; (8001fb0 <playMusicWithParameter+0x88>)
 8001f78:	f002 fb7d 	bl	8004676 <HAL_UART_Transmit>
		break;

	default:
		break;
	}
}
 8001f7c:	b006      	add	sp, #24
 8001f7e:	bd10      	pop	{r4, pc}
		if(musicId >= 10) musicId = 1;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <playMusicWithParameter+0x84>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2a09      	cmp	r2, #9
 8001f86:	bfce      	itee	gt
 8001f88:	2201      	movgt	r2, #1
		else musicId++;
 8001f8a:	681a      	ldrle	r2, [r3, #0]
 8001f8c:	3201      	addle	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3,(uint8_t *)mp2,sizeof(mp2),0xFFFF);
 8001f90:	2208      	movs	r2, #8
 8001f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f96:	eb0d 0102 	add.w	r1, sp, r2
 8001f9a:	e7ec      	b.n	8001f76 <playMusicWithParameter+0x4e>
		HAL_UART_Transmit(&huart3,(uint8_t *)mp3,sizeof(mp3),0xFFFF);
 8001f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	a904      	add	r1, sp, #16
 8001fa4:	e7e7      	b.n	8001f76 <playMusicWithParameter+0x4e>
 8001fa6:	bf00      	nop
 8001fa8:	08004b40 	.word	0x08004b40
 8001fac:	20003ec4 	.word	0x20003ec4
 8001fb0:	200044ac 	.word	0x200044ac

08001fb4 <tipsEnter>:

// 提示进入选择（闹钟）
void tipsEnter(void)
{
 8001fb4:	b513      	push	{r0, r1, r4, lr}
	oled_show_china(8,0,68, SSD1306_COLOR_WHITE);
	oled_show_str(24,0,"KEY4",&fontone,SSD1306_COLOR_WHITE);
 8001fb6:	2401      	movs	r4, #1
	oled_show_china(8,0,68, SSD1306_COLOR_WHITE);
 8001fb8:	2301      	movs	r3, #1
 8001fba:	2244      	movs	r2, #68	; 0x44
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2008      	movs	r0, #8
 8001fc0:	f7fe fff0 	bl	8000fa4 <oled_show_china>
	oled_show_str(24,0,"KEY4",&fontone,SSD1306_COLOR_WHITE);
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <tipsEnter+0x58>)
 8001fc8:	4a11      	ldr	r2, [pc, #68]	; (8002010 <tipsEnter+0x5c>)
 8001fca:	9400      	str	r4, [sp, #0]
 8001fcc:	2018      	movs	r0, #24
 8001fce:	f7ff f851 	bl	8001074 <oled_show_str>
	oled_show_china(56,0,69, SSD1306_COLOR_WHITE);
 8001fd2:	4623      	mov	r3, r4
 8001fd4:	2245      	movs	r2, #69	; 0x45
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2038      	movs	r0, #56	; 0x38
 8001fda:	f7fe ffe3 	bl	8000fa4 <oled_show_china>
	oled_show_china(72,0,70, SSD1306_COLOR_WHITE);
 8001fde:	4623      	mov	r3, r4
 8001fe0:	2246      	movs	r2, #70	; 0x46
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2048      	movs	r0, #72	; 0x48
 8001fe6:	f7fe ffdd 	bl	8000fa4 <oled_show_china>
	oled_show_china(88,0,33, SSD1306_COLOR_WHITE);
 8001fea:	4623      	mov	r3, r4
 8001fec:	2221      	movs	r2, #33	; 0x21
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2058      	movs	r0, #88	; 0x58
 8001ff2:	f7fe ffd7 	bl	8000fa4 <oled_show_china>
	oled_show_china(102,0,34, SSD1306_COLOR_WHITE);
 8001ff6:	4623      	mov	r3, r4
 8001ff8:	2222      	movs	r2, #34	; 0x22
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2066      	movs	r0, #102	; 0x66
 8001ffe:	f7fe ffd1 	bl	8000fa4 <oled_show_china>
	oled_update_screen();
}
 8002002:	b002      	add	sp, #8
 8002004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	oled_update_screen();
 8002008:	f7fe bf40 	b.w	8000e8c <oled_update_screen>
 800200c:	20003f4c 	.word	0x20003f4c
 8002010:	08004bdc 	.word	0x08004bdc

08002014 <tipsSelect>:

// 提示选择音乐中（闹钟）
void tipsSelect(void)
{
 8002014:	b537      	push	{r0, r1, r2, r4, r5, lr}
	oled_show_china(0,0,69, SSD1306_COLOR_WHITE);
 8002016:	2100      	movs	r1, #0
	oled_show_china(16,0,70, SSD1306_COLOR_WHITE);
	oled_show_china(32,0,33, SSD1306_COLOR_WHITE);
	oled_show_china(48,0,34, SSD1306_COLOR_WHITE);
	oled_show_china(64,0,38, SSD1306_COLOR_WHITE);
	oled_show_str(80,0,"...",&fontone,SSD1306_COLOR_WHITE);
 8002018:	2401      	movs	r4, #1
	oled_show_china(0,0,69, SSD1306_COLOR_WHITE);
 800201a:	2301      	movs	r3, #1
 800201c:	2245      	movs	r2, #69	; 0x45
 800201e:	4608      	mov	r0, r1
 8002020:	f7fe ffc0 	bl	8000fa4 <oled_show_china>
	oled_show_china(16,0,70, SSD1306_COLOR_WHITE);
 8002024:	2301      	movs	r3, #1
 8002026:	2246      	movs	r2, #70	; 0x46
 8002028:	2100      	movs	r1, #0
 800202a:	2010      	movs	r0, #16
 800202c:	f7fe ffba 	bl	8000fa4 <oled_show_china>
	oled_show_china(32,0,33, SSD1306_COLOR_WHITE);
 8002030:	2301      	movs	r3, #1
 8002032:	2221      	movs	r2, #33	; 0x21
 8002034:	2100      	movs	r1, #0
 8002036:	2020      	movs	r0, #32
 8002038:	f7fe ffb4 	bl	8000fa4 <oled_show_china>
	oled_show_str(80,0,"...",&fontone,SSD1306_COLOR_WHITE);
 800203c:	4d1e      	ldr	r5, [pc, #120]	; (80020b8 <tipsSelect+0xa4>)
	oled_show_china(48,0,34, SSD1306_COLOR_WHITE);
 800203e:	2301      	movs	r3, #1
 8002040:	2222      	movs	r2, #34	; 0x22
 8002042:	2100      	movs	r1, #0
 8002044:	2030      	movs	r0, #48	; 0x30
 8002046:	f7fe ffad 	bl	8000fa4 <oled_show_china>
	oled_show_china(64,0,38, SSD1306_COLOR_WHITE);
 800204a:	2301      	movs	r3, #1
 800204c:	2226      	movs	r2, #38	; 0x26
 800204e:	2100      	movs	r1, #0
 8002050:	2040      	movs	r0, #64	; 0x40
 8002052:	f7fe ffa7 	bl	8000fa4 <oled_show_china>
	oled_show_str(80,0,"...",&fontone,SSD1306_COLOR_WHITE);
 8002056:	462b      	mov	r3, r5
 8002058:	2100      	movs	r1, #0
 800205a:	4a18      	ldr	r2, [pc, #96]	; (80020bc <tipsSelect+0xa8>)
 800205c:	9400      	str	r4, [sp, #0]
 800205e:	2050      	movs	r0, #80	; 0x50
 8002060:	f7ff f808 	bl	8001074 <oled_show_str>
	oled_show_china(0,20,68, SSD1306_COLOR_WHITE);
 8002064:	4623      	mov	r3, r4
 8002066:	2244      	movs	r2, #68	; 0x44
 8002068:	2114      	movs	r1, #20
 800206a:	2000      	movs	r0, #0
 800206c:	f7fe ff9a 	bl	8000fa4 <oled_show_china>
	oled_show_str(16,20,"KEY4",&fontone,SSD1306_COLOR_WHITE);
 8002070:	462b      	mov	r3, r5
 8002072:	2114      	movs	r1, #20
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <tipsSelect+0xac>)
 8002076:	9400      	str	r4, [sp, #0]
 8002078:	2010      	movs	r0, #16
 800207a:	f7fe fffb 	bl	8001074 <oled_show_str>
	oled_show_china(48,20,62, SSD1306_COLOR_WHITE);
 800207e:	4623      	mov	r3, r4
 8002080:	223e      	movs	r2, #62	; 0x3e
 8002082:	2114      	movs	r1, #20
 8002084:	2030      	movs	r0, #48	; 0x30
 8002086:	f7fe ff8d 	bl	8000fa4 <oled_show_china>
	oled_show_china(64,20,63, SSD1306_COLOR_WHITE);
 800208a:	4623      	mov	r3, r4
 800208c:	223f      	movs	r2, #63	; 0x3f
 800208e:	2114      	movs	r1, #20
 8002090:	2040      	movs	r0, #64	; 0x40
 8002092:	f7fe ff87 	bl	8000fa4 <oled_show_china>
	oled_show_china(80,20,69, SSD1306_COLOR_WHITE);
 8002096:	4623      	mov	r3, r4
 8002098:	2245      	movs	r2, #69	; 0x45
 800209a:	2114      	movs	r1, #20
 800209c:	2050      	movs	r0, #80	; 0x50
 800209e:	f7fe ff81 	bl	8000fa4 <oled_show_china>
	oled_show_china(96,20,70, SSD1306_COLOR_WHITE);
 80020a2:	4623      	mov	r3, r4
 80020a4:	2246      	movs	r2, #70	; 0x46
 80020a6:	2114      	movs	r1, #20
 80020a8:	2060      	movs	r0, #96	; 0x60
 80020aa:	f7fe ff7b 	bl	8000fa4 <oled_show_china>
	oled_update_screen();
}
 80020ae:	b003      	add	sp, #12
 80020b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	oled_update_screen();
 80020b4:	f7fe beea 	b.w	8000e8c <oled_update_screen>
 80020b8:	20003f4c 	.word	0x20003f4c
 80020bc:	08004bcf 	.word	0x08004bcf
 80020c0:	08004bdc 	.word	0x08004bdc

080020c4 <playMusicMP3>:
	stopMusic();
}

// 播放音乐（MP3）
void playMusicMP3(uint8_t selectMusicId)
{
 80020c4:	b510      	push	{r4, lr}
 80020c6:	b086      	sub	sp, #24
	uint8_t mp1[]={0x7E,0xEF,0x06,0x02,0x00,0x00,0x00,0xEF};		//上一首
 80020c8:	466c      	mov	r4, sp
{
 80020ca:	4602      	mov	r2, r0
	uint8_t mp1[]={0x7E,0xEF,0x06,0x02,0x00,0x00,0x00,0xEF};		//上一首
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <playMusicMP3+0x5c>)
	uint8_t mp2[]={0x7E,0xFF,0x06,0x01,0x00,0x00,0x00,0xEF};		//下一首
	uint8_t mp3[]={0x7E,0xFF,0x06,0x16,0x00,0x00,0x00,0xEF};		//暂停

	switch(selectMusicId)
 80020ce:	2a02      	cmp	r2, #2
	uint8_t mp1[]={0x7E,0xEF,0x06,0x02,0x00,0x00,0x00,0xEF};		//上一首
 80020d0:	f8d3 000a 	ldr.w	r0, [r3, #10]
 80020d4:	f8d3 100e 	ldr.w	r1, [r3, #14]
 80020d8:	c403      	stmia	r4!, {r0, r1}
	uint8_t mp2[]={0x7E,0xFF,0x06,0x01,0x00,0x00,0x00,0xEF};		//下一首
 80020da:	f8d3 0012 	ldr.w	r0, [r3, #18]
 80020de:	f8d3 1016 	ldr.w	r1, [r3, #22]
 80020e2:	c403      	stmia	r4!, {r0, r1}
	uint8_t mp3[]={0x7E,0xFF,0x06,0x16,0x00,0x00,0x00,0xEF};		//暂停
 80020e4:	f8d3 001a 	ldr.w	r0, [r3, #26]
 80020e8:	f8d3 101e 	ldr.w	r1, [r3, #30]
 80020ec:	c403      	stmia	r4!, {r0, r1}
	switch(selectMusicId)
 80020ee:	d00c      	beq.n	800210a <playMusicMP3+0x46>
 80020f0:	2a03      	cmp	r2, #3
 80020f2:	d010      	beq.n	8002116 <playMusicMP3+0x52>
 80020f4:	2a01      	cmp	r2, #1
 80020f6:	d106      	bne.n	8002106 <playMusicMP3+0x42>
	{
	case 1:
		HAL_UART_Transmit(&huart3,(uint8_t *)mp1,sizeof(mp1),0xFFFF);
 80020f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020fc:	2208      	movs	r2, #8
 80020fe:	4669      	mov	r1, sp
	case 2:
		HAL_UART_Transmit(&huart3,(uint8_t *)mp2,sizeof(mp2),0xFFFF);
		break;

	case 3:
		HAL_UART_Transmit(&huart3,(uint8_t *)mp3,sizeof(mp3),0xFFFF);
 8002100:	4808      	ldr	r0, [pc, #32]	; (8002124 <playMusicMP3+0x60>)
 8002102:	f002 fab8 	bl	8004676 <HAL_UART_Transmit>
		break;

	default:
		break;
	}
}
 8002106:	b006      	add	sp, #24
 8002108:	bd10      	pop	{r4, pc}
		HAL_UART_Transmit(&huart3,(uint8_t *)mp2,sizeof(mp2),0xFFFF);
 800210a:	2208      	movs	r2, #8
 800210c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002110:	eb0d 0102 	add.w	r1, sp, r2
 8002114:	e7f4      	b.n	8002100 <playMusicMP3+0x3c>
		HAL_UART_Transmit(&huart3,(uint8_t *)mp3,sizeof(mp3),0xFFFF);
 8002116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800211a:	2208      	movs	r2, #8
 800211c:	a904      	add	r1, sp, #16
 800211e:	e7ef      	b.n	8002100 <playMusicMP3+0x3c>
 8002120:	08004b40 	.word	0x08004b40
 8002124:	200044ac 	.word	0x200044ac

08002128 <tipMP3>:

// 提示：MP3播放音乐中
void tipMP3(void)
{
 8002128:	b537      	push	{r0, r1, r2, r4, r5, lr}
	oled_show_str(0,0,"MP3",&fontone,SSD1306_COLOR_WHITE);
 800212a:	2401      	movs	r4, #1
 800212c:	2100      	movs	r1, #0
 800212e:	4d13      	ldr	r5, [pc, #76]	; (800217c <tipMP3+0x54>)
 8002130:	4608      	mov	r0, r1
 8002132:	462b      	mov	r3, r5
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <tipMP3+0x58>)
 8002136:	9400      	str	r4, [sp, #0]
 8002138:	f7fe ff9c 	bl	8001074 <oled_show_str>
	oled_show_china(24,0,33, SSD1306_COLOR_WHITE);
 800213c:	4623      	mov	r3, r4
 800213e:	2221      	movs	r2, #33	; 0x21
 8002140:	2100      	movs	r1, #0
 8002142:	2018      	movs	r0, #24
 8002144:	f7fe ff2e 	bl	8000fa4 <oled_show_china>
	oled_show_china(40,0,34, SSD1306_COLOR_WHITE);
 8002148:	4623      	mov	r3, r4
 800214a:	2222      	movs	r2, #34	; 0x22
 800214c:	2100      	movs	r1, #0
 800214e:	2028      	movs	r0, #40	; 0x28
 8002150:	f7fe ff28 	bl	8000fa4 <oled_show_china>
	oled_show_str(56,0,"...",&fontone,SSD1306_COLOR_WHITE);
 8002154:	462b      	mov	r3, r5
 8002156:	2100      	movs	r1, #0
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <tipMP3+0x5c>)
 800215a:	9400      	str	r4, [sp, #0]
 800215c:	2038      	movs	r0, #56	; 0x38
 800215e:	f7fe ff89 	bl	8001074 <oled_show_str>
	oled_show_str(0,20,"EXIT:KEY4",&fontone,SSD1306_COLOR_WHITE);
 8002162:	462b      	mov	r3, r5
 8002164:	2114      	movs	r1, #20
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <tipMP3+0x60>)
 8002168:	9400      	str	r4, [sp, #0]
 800216a:	2000      	movs	r0, #0
 800216c:	f7fe ff82 	bl	8001074 <oled_show_str>
	oled_update_screen();
}
 8002170:	b003      	add	sp, #12
 8002172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	oled_update_screen();
 8002176:	f7fe be89 	b.w	8000e8c <oled_update_screen>
 800217a:	bf00      	nop
 800217c:	20003f4c 	.word	0x20003f4c
 8002180:	08004bd3 	.word	0x08004bd3
 8002184:	08004bcf 	.word	0x08004bcf
 8002188:	08004bd7 	.word	0x08004bd7

0800218c <alarmClockMusic>:

// 闹钟播放
void alarmClockMusic(void)
{
 800218c:	b500      	push	{lr}
 800218e:	b095      	sub	sp, #84	; 0x54
	uint8_t music1[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x01,0xEF};
 8002190:	466a      	mov	r2, sp
 8002192:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <alarmClockMusic+0xf4>)
 8002194:	f8d3 0022 	ldr.w	r0, [r3, #34]	; 0x22
 8002198:	f8d3 1026 	ldr.w	r1, [r3, #38]	; 0x26
 800219c:	c203      	stmia	r2!, {r0, r1}
	uint8_t music2[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x02,0xEF};
 800219e:	f8d3 002a 	ldr.w	r0, [r3, #42]	; 0x2a
 80021a2:	f8d3 102e 	ldr.w	r1, [r3, #46]	; 0x2e
 80021a6:	c203      	stmia	r2!, {r0, r1}
	uint8_t music3[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x03,0xEF};
 80021a8:	f8d3 0032 	ldr.w	r0, [r3, #50]	; 0x32
 80021ac:	f8d3 1036 	ldr.w	r1, [r3, #54]	; 0x36
 80021b0:	c203      	stmia	r2!, {r0, r1}
	uint8_t music4[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x04,0xEF};
 80021b2:	f8d3 003a 	ldr.w	r0, [r3, #58]	; 0x3a
 80021b6:	f8d3 103e 	ldr.w	r1, [r3, #62]	; 0x3e
 80021ba:	c203      	stmia	r2!, {r0, r1}
	uint8_t music5[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x05,0xEF};
 80021bc:	f8d3 0042 	ldr.w	r0, [r3, #66]	; 0x42
 80021c0:	f8d3 1046 	ldr.w	r1, [r3, #70]	; 0x46
 80021c4:	c203      	stmia	r2!, {r0, r1}
	uint8_t music6[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x06,0xEF};
 80021c6:	f8d3 004a 	ldr.w	r0, [r3, #74]	; 0x4a
 80021ca:	f8d3 104e 	ldr.w	r1, [r3, #78]	; 0x4e
 80021ce:	c203      	stmia	r2!, {r0, r1}
	uint8_t music7[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x07,0xEF};
 80021d0:	f8d3 0052 	ldr.w	r0, [r3, #82]	; 0x52
 80021d4:	f8d3 1056 	ldr.w	r1, [r3, #86]	; 0x56
 80021d8:	c203      	stmia	r2!, {r0, r1}
	uint8_t music8[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x08,0xEF};
 80021da:	f8d3 005a 	ldr.w	r0, [r3, #90]	; 0x5a
 80021de:	f8d3 105e 	ldr.w	r1, [r3, #94]	; 0x5e
 80021e2:	c203      	stmia	r2!, {r0, r1}
	uint8_t music9[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x09,0xEF};
 80021e4:	f8d3 0062 	ldr.w	r0, [r3, #98]	; 0x62
 80021e8:	f8d3 1066 	ldr.w	r1, [r3, #102]	; 0x66
 80021ec:	c203      	stmia	r2!, {r0, r1}
	uint8_t music10[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x10,0xEF};
 80021ee:	f8d3 006a 	ldr.w	r0, [r3, #106]	; 0x6a
 80021f2:	f8d3 106e 	ldr.w	r1, [r3, #110]	; 0x6e
	switch(musicId)
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <alarmClockMusic+0xf8>)
	uint8_t music10[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x10,0xEF};
 80021f8:	c203      	stmia	r2!, {r0, r1}
	switch(musicId)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	2b09      	cmp	r3, #9
 8002200:	d80d      	bhi.n	800221e <alarmClockMusic+0x92>
 8002202:	e8df f003 	tbb	[pc, r3]
 8002206:	0f05      	.short	0x0f05
 8002208:	241f1a15 	.word	0x241f1a15
 800220c:	38332e29 	.word	0x38332e29
	{
	case 1:
		HAL_UART_Transmit(&huart3,(uint8_t *)music1,sizeof(music1),0xFFFF);
 8002210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002214:	2208      	movs	r2, #8
 8002216:	4669      	mov	r1, sp
	case 9:
		HAL_UART_Transmit(&huart3,(uint8_t *)music9,sizeof(music9),0xFFFF);
		break;

	case 10:
		HAL_UART_Transmit(&huart3,(uint8_t *)music10,sizeof(music10),0xFFFF);
 8002218:	481b      	ldr	r0, [pc, #108]	; (8002288 <alarmClockMusic+0xfc>)
 800221a:	f002 fa2c 	bl	8004676 <HAL_UART_Transmit>

	default:
		break;

	}
}
 800221e:	b015      	add	sp, #84	; 0x54
 8002220:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_UART_Transmit(&huart3,(uint8_t *)music2,sizeof(music2),0xFFFF);
 8002224:	2208      	movs	r2, #8
 8002226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800222a:	eb0d 0102 	add.w	r1, sp, r2
 800222e:	e7f3      	b.n	8002218 <alarmClockMusic+0x8c>
		HAL_UART_Transmit(&huart3,(uint8_t *)music3,sizeof(music3),0xFFFF);
 8002230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002234:	2208      	movs	r2, #8
 8002236:	a904      	add	r1, sp, #16
 8002238:	e7ee      	b.n	8002218 <alarmClockMusic+0x8c>
		HAL_UART_Transmit(&huart3,(uint8_t *)music4,sizeof(music4),0xFFFF);
 800223a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223e:	2208      	movs	r2, #8
 8002240:	a906      	add	r1, sp, #24
 8002242:	e7e9      	b.n	8002218 <alarmClockMusic+0x8c>
		HAL_UART_Transmit(&huart3,(uint8_t *)music5,sizeof(music5),0xFFFF);
 8002244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002248:	2208      	movs	r2, #8
 800224a:	a908      	add	r1, sp, #32
 800224c:	e7e4      	b.n	8002218 <alarmClockMusic+0x8c>
		HAL_UART_Transmit(&huart3,(uint8_t *)music6,sizeof(music6),0xFFFF);
 800224e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002252:	2208      	movs	r2, #8
 8002254:	a90a      	add	r1, sp, #40	; 0x28
 8002256:	e7df      	b.n	8002218 <alarmClockMusic+0x8c>
		HAL_UART_Transmit(&huart3,(uint8_t *)music7,sizeof(music7),0xFFFF);
 8002258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225c:	2208      	movs	r2, #8
 800225e:	a90c      	add	r1, sp, #48	; 0x30
 8002260:	e7da      	b.n	8002218 <alarmClockMusic+0x8c>
		HAL_UART_Transmit(&huart3,(uint8_t *)music8,sizeof(music8),0xFFFF);
 8002262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002266:	2208      	movs	r2, #8
 8002268:	a90e      	add	r1, sp, #56	; 0x38
 800226a:	e7d5      	b.n	8002218 <alarmClockMusic+0x8c>
		HAL_UART_Transmit(&huart3,(uint8_t *)music9,sizeof(music9),0xFFFF);
 800226c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002270:	2208      	movs	r2, #8
 8002272:	a910      	add	r1, sp, #64	; 0x40
 8002274:	e7d0      	b.n	8002218 <alarmClockMusic+0x8c>
		HAL_UART_Transmit(&huart3,(uint8_t *)music10,sizeof(music10),0xFFFF);
 8002276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800227a:	2208      	movs	r2, #8
 800227c:	a912      	add	r1, sp, #72	; 0x48
 800227e:	e7cb      	b.n	8002218 <alarmClockMusic+0x8c>
 8002280:	08004b40 	.word	0x08004b40
 8002284:	20003ec4 	.word	0x20003ec4
 8002288:	200044ac 	.word	0x200044ac

0800228c <resetMusic>:

//重置音乐
void resetMusic(void)
{
 800228c:	b507      	push	{r0, r1, r2, lr}
	musicId = 1;
 800228e:	2201      	movs	r2, #1
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <resetMusic+0x34>)
 8002292:	601a      	str	r2, [r3, #0]
	uint8_t reset[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x01,0xEF};
 8002294:	466b      	mov	r3, sp
 8002296:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <resetMusic+0x38>)
 8002298:	f8d2 0022 	ldr.w	r0, [r2, #34]	; 0x22
 800229c:	f8d2 1026 	ldr.w	r1, [r2, #38]	; 0x26
	HAL_UART_Transmit(&huart3,(uint8_t *)reset,sizeof(reset),0xFFFF);
 80022a0:	2208      	movs	r2, #8
	uint8_t reset[]={0x7E,0xFF,0x06,0x03,0x00,0x00,0x01,0xEF};
 80022a2:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart3,(uint8_t *)reset,sizeof(reset),0xFFFF);
 80022a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a8:	4669      	mov	r1, sp
 80022aa:	4807      	ldr	r0, [pc, #28]	; (80022c8 <resetMusic+0x3c>)
 80022ac:	f002 f9e3 	bl	8004676 <HAL_UART_Transmit>
	HAL_Delay(100);
 80022b0:	2064      	movs	r0, #100	; 0x64
 80022b2:	f000 fd8f 	bl	8002dd4 <HAL_Delay>
	stopMusic();
 80022b6:	f7ff fe21 	bl	8001efc <stopMusic>
}
 80022ba:	b003      	add	sp, #12
 80022bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80022c0:	20003ec4 	.word	0x20003ec4
 80022c4:	08004b40 	.word	0x08004b40
 80022c8:	200044ac 	.word	0x200044ac

080022cc <selectSong>:
{
 80022cc:	b538      	push	{r3, r4, r5, lr}
	int keyValueInAlarmClock= readKeyValue();
 80022ce:	f7fe fa33 	bl	8000738 <readKeyValue>
 80022d2:	4605      	mov	r5, r0
	uint8_t commandFromBluetooth = returnFlagBluetooth();
 80022d4:	f7fe fc20 	bl	8000b18 <returnFlagBluetooth>
 80022d8:	4604      	mov	r4, r0
	clearBluetoothCommand();
 80022da:	f7fe fc23 	bl	8000b24 <clearBluetoothCommand>
	oled_clear();
 80022de:	f7fe fdef 	bl	8000ec0 <oled_clear>
	resetMusic();
 80022e2:	f7ff ffd3 	bl	800228c <resetMusic>
	while((keyValueInAlarmClock != 4) && (commandFromBluetooth != 11))
 80022e6:	2d04      	cmp	r5, #4
 80022e8:	d001      	beq.n	80022ee <selectSong+0x22>
 80022ea:	2c0b      	cmp	r4, #11
 80022ec:	d111      	bne.n	8002312 <selectSong+0x46>
	keyValueInAlarmClock = readKeyValue();
 80022ee:	f7fe fa23 	bl	8000738 <readKeyValue>
 80022f2:	4605      	mov	r5, r0
	commandFromBluetooth = returnFlagBluetooth();
 80022f4:	f7fe fc10 	bl	8000b18 <returnFlagBluetooth>
 80022f8:	4604      	mov	r4, r0
	clearBluetoothCommand();
 80022fa:	f7fe fc13 	bl	8000b24 <clearBluetoothCommand>
	oled_clear();
 80022fe:	f7fe fddf 	bl	8000ec0 <oled_clear>
	while((keyValueInAlarmClock != 4) && (commandFromBluetooth != 22))
 8002302:	2d04      	cmp	r5, #4
 8002304:	d001      	beq.n	800230a <selectSong+0x3e>
 8002306:	2c16      	cmp	r4, #22
 8002308:	d10e      	bne.n	8002328 <selectSong+0x5c>
}
 800230a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	stopMusic();
 800230e:	f7ff bdf5 	b.w	8001efc <stopMusic>
		tipsEnter();
 8002312:	f7ff fe4f 	bl	8001fb4 <tipsEnter>
		keyValueInAlarmClock= readKeyValue();
 8002316:	f7fe fa0f 	bl	8000738 <readKeyValue>
 800231a:	4605      	mov	r5, r0
		commandFromBluetooth = returnFlagBluetooth();
 800231c:	f7fe fbfc 	bl	8000b18 <returnFlagBluetooth>
 8002320:	4604      	mov	r4, r0
		clearBluetoothCommand();
 8002322:	f7fe fbff 	bl	8000b24 <clearBluetoothCommand>
 8002326:	e7de      	b.n	80022e6 <selectSong+0x1a>
		tipsSelect();
 8002328:	f7ff fe74 	bl	8002014 <tipsSelect>
		if((keyValueInAlarmClock == 1) || (keyValueInAlarmClock == 2) || (keyValueInAlarmClock == 3))
 800232c:	1e6b      	subs	r3, r5, #1
 800232e:	2b02      	cmp	r3, #2
 8002330:	d802      	bhi.n	8002338 <selectSong+0x6c>
			playMusicWithParameter(keyValueInAlarmClock);
 8002332:	b2e8      	uxtb	r0, r5
 8002334:	f7ff fdf8 	bl	8001f28 <playMusicWithParameter>
		if((commandFromBluetooth == 19) || (commandFromBluetooth == 20) || (commandFromBluetooth == 21))
 8002338:	f1a4 0313 	sub.w	r3, r4, #19
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d804      	bhi.n	800234c <selectSong+0x80>
			playMusicWithParameter(commandFromBluetooth - 18);
 8002342:	f1a4 0012 	sub.w	r0, r4, #18
 8002346:	b2c0      	uxtb	r0, r0
 8002348:	f7ff fdee 	bl	8001f28 <playMusicWithParameter>
		keyValueInAlarmClock= readKeyValue();
 800234c:	f7fe f9f4 	bl	8000738 <readKeyValue>
 8002350:	4605      	mov	r5, r0
		commandFromBluetooth = returnFlagBluetooth();
 8002352:	f7fe fbe1 	bl	8000b18 <returnFlagBluetooth>
 8002356:	4604      	mov	r4, r0
		clearBluetoothCommand();
 8002358:	f7fe fbe4 	bl	8000b24 <clearBluetoothCommand>
 800235c:	e7d1      	b.n	8002302 <selectSong+0x36>

0800235e <selectMusicMP3>:
{
 800235e:	b538      	push	{r3, r4, r5, lr}
	int keyValueInAlarmClock= readKeyValue();
 8002360:	f7fe f9ea 	bl	8000738 <readKeyValue>
 8002364:	4605      	mov	r5, r0
	uint8_t commandFromBluetooth = returnFlagBluetooth();
 8002366:	f7fe fbd7 	bl	8000b18 <returnFlagBluetooth>
 800236a:	4604      	mov	r4, r0
	clearBluetoothCommand();
 800236c:	f7fe fbda 	bl	8000b24 <clearBluetoothCommand>
	resetMusic();
 8002370:	f7ff ff8c 	bl	800228c <resetMusic>
	while((keyValueInAlarmClock != 4) && (commandFromBluetooth != 22))
 8002374:	2d04      	cmp	r5, #4
 8002376:	d001      	beq.n	800237c <selectMusicMP3+0x1e>
 8002378:	2c16      	cmp	r4, #22
 800237a:	d103      	bne.n	8002384 <selectMusicMP3+0x26>
}
 800237c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	stopMusic();
 8002380:	f7ff bdbc 	b.w	8001efc <stopMusic>
		tipMP3();
 8002384:	f7ff fed0 	bl	8002128 <tipMP3>
		if((keyValueInAlarmClock == 1) || (keyValueInAlarmClock == 2) || (keyValueInAlarmClock == 3))
 8002388:	1e6b      	subs	r3, r5, #1
 800238a:	2b02      	cmp	r3, #2
 800238c:	d802      	bhi.n	8002394 <selectMusicMP3+0x36>
			playMusicMP3(keyValueInAlarmClock);
 800238e:	b2e8      	uxtb	r0, r5
 8002390:	f7ff fe98 	bl	80020c4 <playMusicMP3>
		if((commandFromBluetooth == 19) || (commandFromBluetooth == 20) || (commandFromBluetooth == 21))
 8002394:	f1a4 0313 	sub.w	r3, r4, #19
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d804      	bhi.n	80023a8 <selectMusicMP3+0x4a>
			playMusicMP3(commandFromBluetooth - 18);
 800239e:	f1a4 0012 	sub.w	r0, r4, #18
 80023a2:	b2c0      	uxtb	r0, r0
 80023a4:	f7ff fe8e 	bl	80020c4 <playMusicMP3>
		keyValueInAlarmClock= readKeyValue();
 80023a8:	f7fe f9c6 	bl	8000738 <readKeyValue>
 80023ac:	4605      	mov	r5, r0
		commandFromBluetooth = returnFlagBluetooth();
 80023ae:	f7fe fbb3 	bl	8000b18 <returnFlagBluetooth>
 80023b2:	4604      	mov	r4, r0
		clearBluetoothCommand();
 80023b4:	f7fe fbb6 	bl	8000b24 <clearBluetoothCommand>
 80023b8:	e7dc      	b.n	8002374 <selectMusicMP3+0x16>
	...

080023bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_MspInit+0x2c>)
{
 80023be:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	619a      	str	r2, [r3, #24]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	f002 0201 	and.w	r2, r2, #1
 80023ce:	9200      	str	r2, [sp, #0]
 80023d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023d8:	61da      	str	r2, [r3, #28]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e4:	b002      	add	sp, #8
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000

080023ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <NMI_Handler>

080023ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler>

080023f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <MemManage_Handler>

080023f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <BusFault_Handler>

080023f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <UsageFault_Handler>

080023f6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f6:	4770      	bx	lr

080023f8 <DebugMon_Handler>:
 80023f8:	4770      	bx	lr

080023fa <PendSV_Handler>:
 80023fa:	4770      	bx	lr

080023fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fc:	f000 bcd8 	b.w	8002db0 <HAL_IncTick>

08002400 <USART1_IRQHandler>:
{
  /* USER CODE BEGIN USART1_IRQn 0 */

	uint8_t ch=0;

	if(__HAL_UART_GET_FLAG( &huart1, UART_FLAG_RXNE ) != RESET)
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <USART1_IRQHandler+0x18>)
	ch=( uint16_t)READ_REG(huart1.Instance->DR);
	WRITE_REG(huart1.Instance->DR,ch);
	}

  /* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <USART1_IRQHandler+0x18>)
	if(__HAL_UART_GET_FLAG( &huart1, UART_FLAG_RXNE ) != RESET)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	0692      	lsls	r2, r2, #26
	ch=( uint16_t)READ_REG(huart1.Instance->DR);
 800240a:	bf42      	ittt	mi
 800240c:	685a      	ldrmi	r2, [r3, #4]
	WRITE_REG(huart1.Instance->DR,ch);
 800240e:	b2d2      	uxtbmi	r2, r2
 8002410:	605a      	strmi	r2, [r3, #4]
	HAL_UART_IRQHandler(&huart1);
 8002412:	f002 b9dd 	b.w	80047d0 <HAL_UART_IRQHandler>
 8002416:	bf00      	nop
 8002418:	2000441c 	.word	0x2000441c

0800241c <USART2_IRQHandler>:
//	ch=( uint16_t)READ_REG(huart2.Instance->DR);
//	WRITE_REG(huart2.Instance->DR,ch);
//	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800241c:	4801      	ldr	r0, [pc, #4]	; (8002424 <USART2_IRQHandler+0x8>)
 800241e:	f002 b9d7 	b.w	80047d0 <HAL_UART_IRQHandler>
 8002422:	bf00      	nop
 8002424:	20004464 	.word	0x20004464

08002428 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002428:	4770      	bx	lr
	...

0800242c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800242c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242e:	2210      	movs	r2, #16
 8002430:	2100      	movs	r1, #0
 8002432:	a802      	add	r0, sp, #8
 8002434:	f002 fb6c 	bl	8004b10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800243a:	4814      	ldr	r0, [pc, #80]	; (800248c <MX_TIM3_Init+0x60>)
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <MX_TIM3_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243e:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.Prescaler = 0;
 8002442:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8002446:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244a:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002450:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002452:	f001 ff43 	bl	80042dc <HAL_TIM_Base_Init>
 8002456:	b108      	cbz	r0, 800245c <MX_TIM3_Init+0x30>
  {
    Error_Handler();
 8002458:	f7fe fab8 	bl	80009cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002460:	480a      	ldr	r0, [pc, #40]	; (800248c <MX_TIM3_Init+0x60>)
 8002462:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002464:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002466:	f001 ff6f 	bl	8004348 <HAL_TIM_ConfigClockSource>
 800246a:	b108      	cbz	r0, 8002470 <MX_TIM3_Init+0x44>
  {
    Error_Handler();
 800246c:	f7fe faae 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002470:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002472:	4669      	mov	r1, sp
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002476:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800247a:	f002 f801 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 800247e:	b108      	cbz	r0, 8002484 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002480:	f7fe faa4 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002484:	b007      	add	sp, #28
 8002486:	f85d fb04 	ldr.w	pc, [sp], #4
 800248a:	bf00      	nop
 800248c:	2000437c 	.word	0x2000437c
 8002490:	40000400 	.word	0x40000400

08002494 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8002494:	6802      	ldr	r2, [r0, #0]
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_TIM_Base_MspInit+0x24>)
{
 8002498:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 800249a:	429a      	cmp	r2, r3
 800249c:	d10a      	bne.n	80024b4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800249e:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	f042 0202 	orr.w	r2, r2, #2
 80024a8:	61da      	str	r2, [r3, #28]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80024b4:	b002      	add	sp, #8
 80024b6:	4770      	bx	lr
 80024b8:	40000400 	.word	0x40000400

080024bc <MX_USART1_UART_Init>:

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80024bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
{
 80024c0:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 115200;
 80024c2:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <MX_USART1_UART_Init+0x38>)
  huart1.Instance = USART1;
 80024c4:	4c0c      	ldr	r4, [pc, #48]	; (80024f8 <MX_USART1_UART_Init+0x3c>)
  huart1.Init.BaudRate = 115200;
 80024c6:	e9c4 2300 	strd	r2, r3, [r4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ca:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024cc:	220c      	movs	r2, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ce:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d0:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d4:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024d8:	6123      	str	r3, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024da:	61e3      	str	r3, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024dc:	f002 f89c 	bl	8004618 <HAL_UART_Init>
 80024e0:	b108      	cbz	r0, 80024e6 <MX_USART1_UART_Init+0x2a>
  {
    Error_Handler();
 80024e2:	f7fe fa73 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 80024e6:	6822      	ldr	r2, [r4, #0]
 80024e8:	68d3      	ldr	r3, [r2, #12]
 80024ea:	f043 0320 	orr.w	r3, r3, #32
 80024ee:	60d3      	str	r3, [r2, #12]

  /* USER CODE END USART1_Init 2 */

}
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	bf00      	nop
 80024f4:	40013800 	.word	0x40013800
 80024f8:	2000441c 	.word	0x2000441c

080024fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024fc:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
 80024fe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Instance = USART2;
 8002502:	480c      	ldr	r0, [pc, #48]	; (8002534 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 9600;
 8002504:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <MX_USART2_UART_Init+0x3c>)
 8002506:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800250a:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800250c:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800250e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002512:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002516:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002518:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800251a:	f002 f87d 	bl	8004618 <HAL_UART_Init>
 800251e:	b108      	cbz	r0, 8002524 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
 8002520:	f7fe fa54 	bl	80009cc <Error_Handler>

  HAL_UART_Receive_IT(&huart2, (uint8_t *)&Uart2_aRxBuffer, 1);   // 启用USART2串口的接收中断

  /* USER CODE END USART2_Init 2 */

}
 8002524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&Uart2_aRxBuffer, 1);   // 启用USART2串口的接收中断
 8002528:	2201      	movs	r2, #1
 800252a:	4904      	ldr	r1, [pc, #16]	; (800253c <MX_USART2_UART_Init+0x40>)
 800252c:	4801      	ldr	r0, [pc, #4]	; (8002534 <MX_USART2_UART_Init+0x38>)
 800252e:	f002 baba 	b.w	8004aa6 <HAL_UART_Receive_IT>
 8002532:	bf00      	nop
 8002534:	20004464 	.word	0x20004464
 8002538:	40004400 	.word	0x40004400
 800253c:	20004419 	.word	0x20004419

08002540 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002540:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
 8002542:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart3.Instance = USART3;
 8002546:	480a      	ldr	r0, [pc, #40]	; (8002570 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 9600;
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <MX_USART3_UART_Init+0x34>)
 800254a:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800254e:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002550:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002552:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002556:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 800255a:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800255c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800255e:	f002 f85b 	bl	8004618 <HAL_UART_Init>
 8002562:	b118      	cbz	r0, 800256c <MX_USART3_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002568:	f7fe ba30 	b.w	80009cc <Error_Handler>
}
 800256c:	bd08      	pop	{r3, pc}
 800256e:	bf00      	nop
 8002570:	200044ac 	.word	0x200044ac
 8002574:	40004800 	.word	0x40004800

08002578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002578:	b510      	push	{r4, lr}
 800257a:	4604      	mov	r4, r0
 800257c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257e:	2210      	movs	r2, #16
 8002580:	2100      	movs	r1, #0
 8002582:	a806      	add	r0, sp, #24
 8002584:	f002 fac4 	bl	8004b10 <memset>
  if(uartHandle->Instance==USART1)
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	4a48      	ldr	r2, [pc, #288]	; (80026ac <HAL_UART_MspInit+0x134>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d131      	bne.n	80025f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002590:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_UART_MspInit+0x138>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	f44f 7400 	mov.w	r4, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8002596:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	4846      	ldr	r0, [pc, #280]	; (80026b4 <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800259a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800259e:	619a      	str	r2, [r3, #24]
 80025a0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	a906      	add	r1, sp, #24
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025a8:	9200      	str	r2, [sp, #0]
 80025aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	f042 0204 	orr.w	r2, r2, #4
 80025b2:	619a      	str	r2, [r3, #24]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	e9cd 4306 	strd	r4, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c4:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f000 fce5 	bl	8002f98 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	4838      	ldr	r0, [pc, #224]	; (80026b4 <HAL_UART_MspInit+0x13c>)
 80025d4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	f000 fcdc 	bl	8002f98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025e0:	2025      	movs	r0, #37	; 0x25
 80025e2:	4622      	mov	r2, r4
 80025e4:	4621      	mov	r1, r4
 80025e6:	f000 fc19 	bl	8002e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ea:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(BLUETOOTH_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025ec:	f000 fc48 	bl	8002e80 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025f0:	b00a      	add	sp, #40	; 0x28
 80025f2:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 80025f4:	4a30      	ldr	r2, [pc, #192]	; (80026b8 <HAL_UART_MspInit+0x140>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d12c      	bne.n	8002654 <HAL_UART_MspInit+0xdc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025fa:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <HAL_UART_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2004      	movs	r0, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80025fe:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(BLUETOOTH_TX_GPIO_Port, &GPIO_InitStruct);
 8002600:	a906      	add	r1, sp, #24
    __HAL_RCC_USART2_CLK_ENABLE();
 8002602:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002606:	61da      	str	r2, [r3, #28]
 8002608:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260a:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 800260c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002610:	9202      	str	r2, [sp, #8]
 8002612:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	f042 0204 	orr.w	r2, r2, #4
 800261a:	619a      	str	r2, [r3, #24]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	9303      	str	r3, [sp, #12]
 8002624:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	e9cd 0306 	strd	r0, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800262c:	2303      	movs	r3, #3
    HAL_GPIO_Init(BLUETOOTH_TX_GPIO_Port, &GPIO_InitStruct);
 800262e:	4821      	ldr	r0, [pc, #132]	; (80026b4 <HAL_UART_MspInit+0x13c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002630:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(BLUETOOTH_TX_GPIO_Port, &GPIO_InitStruct);
 8002632:	f000 fcb1 	bl	8002f98 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002636:	2308      	movs	r3, #8
    HAL_GPIO_Init(BLUETOOTH_RX_GPIO_Port, &GPIO_InitStruct);
 8002638:	481e      	ldr	r0, [pc, #120]	; (80026b4 <HAL_UART_MspInit+0x13c>)
 800263a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(BLUETOOTH_RX_GPIO_Port, &GPIO_InitStruct);
 8002642:	f000 fca9 	bl	8002f98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002646:	2026      	movs	r0, #38	; 0x26
 8002648:	4622      	mov	r2, r4
 800264a:	4621      	mov	r1, r4
 800264c:	f000 fbe6 	bl	8002e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002650:	2026      	movs	r0, #38	; 0x26
 8002652:	e7cb      	b.n	80025ec <HAL_UART_MspInit+0x74>
  else if(uartHandle->Instance==USART3)
 8002654:	4a19      	ldr	r2, [pc, #100]	; (80026bc <HAL_UART_MspInit+0x144>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d1ca      	bne.n	80025f0 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART3_CLK_ENABLE();
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <HAL_UART_MspInit+0x138>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265c:	a906      	add	r1, sp, #24
    __HAL_RCC_USART3_CLK_ENABLE();
 800265e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002660:	4817      	ldr	r0, [pc, #92]	; (80026c0 <HAL_UART_MspInit+0x148>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002662:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002666:	61da      	str	r2, [r3, #28]
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800266e:	9204      	str	r2, [sp, #16]
 8002670:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	f042 0208 	orr.w	r2, r2, #8
 8002678:	619a      	str	r2, [r3, #24]
 800267a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	9305      	str	r3, [sp, #20]
 8002686:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800268e:	2303      	movs	r3, #3
 8002690:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002692:	f000 fc81 	bl	8002f98 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002696:	2300      	movs	r3, #0
 8002698:	f44f 6100 	mov.w	r1, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	4808      	ldr	r0, [pc, #32]	; (80026c0 <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800269e:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	f000 fc77 	bl	8002f98 <HAL_GPIO_Init>
}
 80026aa:	e7a1      	b.n	80025f0 <HAL_UART_MspInit+0x78>
 80026ac:	40013800 	.word	0x40013800
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40010800 	.word	0x40010800
 80026b8:	40004400 	.word	0x40004400
 80026bc:	40004800 	.word	0x40004800
 80026c0:	40010c00 	.word	0x40010c00

080026c4 <HandleBuleToothWeather>:
	return (ch);
}

void HandleBuleToothWeather(uint8_t weather)
{
	if(weather == '1'){flagWeather=1;}
 80026c4:	2831      	cmp	r0, #49	; 0x31
 80026c6:	d103      	bne.n	80026d0 <HandleBuleToothWeather+0xc>
 80026c8:	2201      	movs	r2, #1
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HandleBuleToothWeather+0x38>)
	if(weather == '2'){flagWeather=2;}
	if(weather == '3'){flagWeather=3;}
	if(weather == '4'){flagWeather=4;}
	if(weather == '5'){flagWeather=5;}
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	4770      	bx	lr
	if(weather == '2'){flagWeather=2;}
 80026d0:	2832      	cmp	r0, #50	; 0x32
 80026d2:	d006      	beq.n	80026e2 <HandleBuleToothWeather+0x1e>
	if(weather == '3'){flagWeather=3;}
 80026d4:	2833      	cmp	r0, #51	; 0x33
 80026d6:	d007      	beq.n	80026e8 <HandleBuleToothWeather+0x24>
	if(weather == '4'){flagWeather=4;}
 80026d8:	2834      	cmp	r0, #52	; 0x34
 80026da:	d008      	beq.n	80026ee <HandleBuleToothWeather+0x2a>
	if(weather == '5'){flagWeather=5;}
 80026dc:	2835      	cmp	r0, #53	; 0x35
 80026de:	d009      	beq.n	80026f4 <HandleBuleToothWeather+0x30>
 80026e0:	4770      	bx	lr
	if(weather == '2'){flagWeather=2;}
 80026e2:	2202      	movs	r2, #2
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HandleBuleToothWeather+0x38>)
 80026e6:	e7f1      	b.n	80026cc <HandleBuleToothWeather+0x8>
	if(weather == '3'){flagWeather=3;}
 80026e8:	2203      	movs	r2, #3
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <HandleBuleToothWeather+0x38>)
 80026ec:	e7ee      	b.n	80026cc <HandleBuleToothWeather+0x8>
	if(weather == '4'){flagWeather=4;}
 80026ee:	2204      	movs	r2, #4
 80026f0:	4b02      	ldr	r3, [pc, #8]	; (80026fc <HandleBuleToothWeather+0x38>)
 80026f2:	e7eb      	b.n	80026cc <HandleBuleToothWeather+0x8>
	if(weather == '5'){flagWeather=5;}
 80026f4:	2205      	movs	r2, #5
 80026f6:	4b01      	ldr	r3, [pc, #4]	; (80026fc <HandleBuleToothWeather+0x38>)
 80026f8:	e7e8      	b.n	80026cc <HandleBuleToothWeather+0x8>
 80026fa:	bf00      	nop
 80026fc:	20003f59 	.word	0x20003f59

08002700 <HandleBuleToothTemp>:

void HandleBuleToothTemp(uint8_t temp1, uint8_t temp2)
{
	flagTemp = (temp1 - 48) * 10 + (temp2 - 48);
 8002700:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002704:	3910      	subs	r1, #16
 8002706:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HandleBuleToothTemp+0x14>)
 8002708:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800270c:	b2c9      	uxtb	r1, r1
 800270e:	7019      	strb	r1, [r3, #0]
}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20003ec2 	.word	0x20003ec2

08002718 <HandleBuleToothHumi>:

void HandleBuleToothHumi(uint8_t temp1, uint8_t temp2)
{
	flagHumi = (temp1 - 48) * 10 + (temp2 - 48);
 8002718:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800271c:	3910      	subs	r1, #16
 800271e:	4b03      	ldr	r3, [pc, #12]	; (800272c <HandleBuleToothHumi+0x14>)
 8002720:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002724:	b2c9      	uxtb	r1, r1
 8002726:	7019      	strb	r1, [r3, #0]

}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20003ec1 	.word	0x20003ec1

08002730 <HandleBuleToothMonth>:
	}
}

void HandleBuleToothMonth(uint8_t temp1, uint8_t temp2)
{
	if((temp1=='0') && (temp2=='1')){flagMonth=1;}
 8002730:	2830      	cmp	r0, #48	; 0x30
 8002732:	d12f      	bne.n	8002794 <HandleBuleToothMonth+0x64>
 8002734:	2931      	cmp	r1, #49	; 0x31
 8002736:	d130      	bne.n	800279a <HandleBuleToothMonth+0x6a>
 8002738:	2201      	movs	r2, #1
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <HandleBuleToothMonth+0x88>)
	if((temp1=='0') && (temp2=='2')){flagMonth=2;}
 800273c:	701a      	strb	r2, [r3, #0]
	if((temp1=='0') && (temp2=='3')){flagMonth=3;}
	if((temp1=='0') && (temp2=='4')){flagMonth=4;}
	if((temp1=='0') && (temp2=='5')){flagMonth=5;}
	if((temp1=='0') && (temp2=='6')){flagMonth=6;}
	if((temp1=='0') && (temp2=='7')){flagMonth=7;}
	if((temp1=='0') && (temp2=='8')){flagMonth=8;}
 800273e:	2938      	cmp	r1, #56	; 0x38
 8002740:	d108      	bne.n	8002754 <HandleBuleToothMonth+0x24>
 8002742:	2208      	movs	r2, #8
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HandleBuleToothMonth+0x88>)
 8002746:	e00a      	b.n	800275e <HandleBuleToothMonth+0x2e>
	if((temp1=='0') && (temp2=='2')){flagMonth=2;}
 8002748:	2202      	movs	r2, #2
 800274a:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HandleBuleToothMonth+0x88>)
 800274c:	e7f6      	b.n	800273c <HandleBuleToothMonth+0xc>
	if((temp1=='0') && (temp2=='3')){flagMonth=3;}
 800274e:	2203      	movs	r2, #3
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HandleBuleToothMonth+0x88>)
 8002752:	701a      	strb	r2, [r3, #0]
	if((temp1=='0') && (temp2=='9')){flagMonth=9;}
 8002754:	2939      	cmp	r1, #57	; 0x39
 8002756:	d00a      	beq.n	800276e <HandleBuleToothMonth+0x3e>
 8002758:	4770      	bx	lr
	if((temp1=='0') && (temp2=='4')){flagMonth=4;}
 800275a:	2204      	movs	r2, #4
 800275c:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HandleBuleToothMonth+0x88>)
	if((temp1=='0') && (temp2=='5')){flagMonth=5;}
 800275e:	701a      	strb	r2, [r3, #0]
	if((temp1=='0') && (temp2=='8')){flagMonth=8;}
 8002760:	4770      	bx	lr
	if((temp1=='0') && (temp2=='5')){flagMonth=5;}
 8002762:	2205      	movs	r2, #5
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HandleBuleToothMonth+0x88>)
 8002766:	e7fa      	b.n	800275e <HandleBuleToothMonth+0x2e>
	if((temp1=='0') && (temp2=='6')){flagMonth=6;}
 8002768:	2206      	movs	r2, #6
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HandleBuleToothMonth+0x88>)
 800276c:	e7f7      	b.n	800275e <HandleBuleToothMonth+0x2e>
	if((temp1=='0') && (temp2=='9')){flagMonth=9;}
 800276e:	2209      	movs	r2, #9
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HandleBuleToothMonth+0x88>)
 8002772:	e7f4      	b.n	800275e <HandleBuleToothMonth+0x2e>
	if((temp1=='1') && (temp2=='0')){flagMonth=10;}
 8002774:	2930      	cmp	r1, #48	; 0x30
 8002776:	d108      	bne.n	800278a <HandleBuleToothMonth+0x5a>
 8002778:	220a      	movs	r2, #10
 800277a:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HandleBuleToothMonth+0x88>)
 800277c:	e7ef      	b.n	800275e <HandleBuleToothMonth+0x2e>
	if((temp1=='1') && (temp2=='1')){flagMonth=11;}
 800277e:	220b      	movs	r2, #11
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HandleBuleToothMonth+0x88>)
 8002782:	e7ec      	b.n	800275e <HandleBuleToothMonth+0x2e>
	if((temp1=='1') && (temp2=='2')){flagMonth=12;}
 8002784:	220c      	movs	r2, #12
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HandleBuleToothMonth+0x88>)
 8002788:	e7e9      	b.n	800275e <HandleBuleToothMonth+0x2e>
	if((temp1=='1') && (temp2=='1')){flagMonth=11;}
 800278a:	2931      	cmp	r1, #49	; 0x31
 800278c:	d0f7      	beq.n	800277e <HandleBuleToothMonth+0x4e>
	if((temp1=='1') && (temp2=='2')){flagMonth=12;}
 800278e:	2932      	cmp	r1, #50	; 0x32
 8002790:	d0f8      	beq.n	8002784 <HandleBuleToothMonth+0x54>
 8002792:	4770      	bx	lr
	if((temp1=='1') && (temp2=='0')){flagMonth=10;}
 8002794:	2831      	cmp	r0, #49	; 0x31
 8002796:	d0ed      	beq.n	8002774 <HandleBuleToothMonth+0x44>
 8002798:	4770      	bx	lr
	if((temp1=='0') && (temp2=='2')){flagMonth=2;}
 800279a:	2932      	cmp	r1, #50	; 0x32
 800279c:	d0d4      	beq.n	8002748 <HandleBuleToothMonth+0x18>
	if((temp1=='0') && (temp2=='3')){flagMonth=3;}
 800279e:	2933      	cmp	r1, #51	; 0x33
 80027a0:	d0d5      	beq.n	800274e <HandleBuleToothMonth+0x1e>
	if((temp1=='0') && (temp2=='4')){flagMonth=4;}
 80027a2:	2934      	cmp	r1, #52	; 0x34
 80027a4:	d0d9      	beq.n	800275a <HandleBuleToothMonth+0x2a>
	if((temp1=='0') && (temp2=='5')){flagMonth=5;}
 80027a6:	2935      	cmp	r1, #53	; 0x35
 80027a8:	d0db      	beq.n	8002762 <HandleBuleToothMonth+0x32>
	if((temp1=='0') && (temp2=='6')){flagMonth=6;}
 80027aa:	2936      	cmp	r1, #54	; 0x36
 80027ac:	d0dc      	beq.n	8002768 <HandleBuleToothMonth+0x38>
	if((temp1=='0') && (temp2=='7')){flagMonth=7;}
 80027ae:	2937      	cmp	r1, #55	; 0x37
 80027b0:	d1c5      	bne.n	800273e <HandleBuleToothMonth+0xe>
 80027b2:	2207      	movs	r2, #7
 80027b4:	4b00      	ldr	r3, [pc, #0]	; (80027b8 <HandleBuleToothMonth+0x88>)
 80027b6:	e7d2      	b.n	800275e <HandleBuleToothMonth+0x2e>
 80027b8:	20003f56 	.word	0x20003f56

080027bc <HandleBuleToothRun>:
{
 80027bc:	b538      	push	{r3, r4, r5, lr}
	uint8_t temp = (temp1 - 48) * 10 + (temp2 - 48);
 80027be:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80027c2:	f1a1 0410 	sub.w	r4, r1, #16
	HandleBuleToothMonth(temp3, temp4);
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f7ff ffb1 	bl	8002730 <HandleBuleToothMonth>
	if(temp != flagMonth)
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HandleBuleToothRun+0x2c>)
	uint8_t temp = (temp1 - 48) * 10 + (temp2 - 48);
 80027d0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	if(temp != flagMonth)
 80027d4:	781b      	ldrb	r3, [r3, #0]
	uint8_t temp = (temp1 - 48) * 10 + (temp2 - 48);
 80027d6:	b2e4      	uxtb	r4, r4
	if(temp != flagMonth)
 80027d8:	42a3      	cmp	r3, r4
		flagRun = 0;
 80027da:	bf14      	ite	ne
 80027dc:	2200      	movne	r2, #0
		flagRun = 1;
 80027de:	2201      	moveq	r2, #1
 80027e0:	4b02      	ldr	r3, [pc, #8]	; (80027ec <HandleBuleToothRun+0x30>)
 80027e2:	701a      	strb	r2, [r3, #0]
}
 80027e4:	bd38      	pop	{r3, r4, r5, pc}
 80027e6:	bf00      	nop
 80027e8:	20003f56 	.word	0x20003f56
 80027ec:	20003f57 	.word	0x20003f57

080027f0 <HandleBuleToothDay>:
}

void HandleBuleToothDay(uint8_t temp1, uint8_t temp2)
{
	if((temp1=='0') && (temp2=='1')){flagDay=1;}
 80027f0:	2830      	cmp	r0, #48	; 0x30
 80027f2:	f040 808c 	bne.w	800290e <HandleBuleToothDay+0x11e>
 80027f6:	2931      	cmp	r1, #49	; 0x31
 80027f8:	f040 8090 	bne.w	800291c <HandleBuleToothDay+0x12c>
 80027fc:	2201      	movs	r2, #1
 80027fe:	4b52      	ldr	r3, [pc, #328]	; (8002948 <HandleBuleToothDay+0x158>)
	if((temp1=='0') && (temp2=='2')){flagDay=2;}
 8002800:	701a      	strb	r2, [r3, #0]
	if((temp1=='0') && (temp2=='3')){flagDay=3;}
	if((temp1=='0') && (temp2=='4')){flagDay=4;}
	if((temp1=='0') && (temp2=='5')){flagDay=5;}
	if((temp1=='0') && (temp2=='6')){flagDay=6;}
	if((temp1=='0') && (temp2=='7')){flagDay=7;}
	if((temp1=='0') && (temp2=='8')){flagDay=8;}
 8002802:	2938      	cmp	r1, #56	; 0x38
 8002804:	d108      	bne.n	8002818 <HandleBuleToothDay+0x28>
 8002806:	2208      	movs	r2, #8
 8002808:	4b4f      	ldr	r3, [pc, #316]	; (8002948 <HandleBuleToothDay+0x158>)
 800280a:	e00a      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='0') && (temp2=='2')){flagDay=2;}
 800280c:	2202      	movs	r2, #2
 800280e:	4b4e      	ldr	r3, [pc, #312]	; (8002948 <HandleBuleToothDay+0x158>)
 8002810:	e7f6      	b.n	8002800 <HandleBuleToothDay+0x10>
	if((temp1=='0') && (temp2=='3')){flagDay=3;}
 8002812:	2203      	movs	r2, #3
 8002814:	4b4c      	ldr	r3, [pc, #304]	; (8002948 <HandleBuleToothDay+0x158>)
 8002816:	701a      	strb	r2, [r3, #0]
	if((temp1=='0') && (temp2=='9')){flagDay=9;}
 8002818:	2939      	cmp	r1, #57	; 0x39
 800281a:	d00a      	beq.n	8002832 <HandleBuleToothDay+0x42>
 800281c:	4770      	bx	lr
	if((temp1=='0') && (temp2=='4')){flagDay=4;}
 800281e:	2204      	movs	r2, #4
 8002820:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HandleBuleToothDay+0x158>)
	if((temp1=='0') && (temp2=='5')){flagDay=5;}
 8002822:	701a      	strb	r2, [r3, #0]
	if((temp1=='0') && (temp2=='8')){flagDay=8;}
 8002824:	4770      	bx	lr
	if((temp1=='0') && (temp2=='5')){flagDay=5;}
 8002826:	2205      	movs	r2, #5
 8002828:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HandleBuleToothDay+0x158>)
 800282a:	e7fa      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='0') && (temp2=='6')){flagDay=6;}
 800282c:	2206      	movs	r2, #6
 800282e:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HandleBuleToothDay+0x158>)
 8002830:	e7f7      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='0') && (temp2=='9')){flagDay=9;}
 8002832:	2209      	movs	r2, #9
 8002834:	4b44      	ldr	r3, [pc, #272]	; (8002948 <HandleBuleToothDay+0x158>)
 8002836:	e7f4      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='1') && (temp2=='0')){flagDay=10;}
 8002838:	2930      	cmp	r1, #48	; 0x30
 800283a:	d159      	bne.n	80028f0 <HandleBuleToothDay+0x100>
 800283c:	220a      	movs	r2, #10
 800283e:	4b42      	ldr	r3, [pc, #264]	; (8002948 <HandleBuleToothDay+0x158>)
	if((temp1=='1') && (temp2=='1')){flagDay=11;}
 8002840:	701a      	strb	r2, [r3, #0]
	if((temp1=='1') && (temp2=='2')){flagDay=12;}
	if((temp1=='1') && (temp2=='3')){flagDay=13;}
	if((temp1=='1') && (temp2=='4')){flagDay=14;}
	if((temp1=='1') && (temp2=='5')){flagDay=15;}
	if((temp1=='1') && (temp2=='6')){flagDay=16;}
	if((temp1=='1') && (temp2=='7')){flagDay=17;}
 8002842:	2937      	cmp	r1, #55	; 0x37
 8002844:	d108      	bne.n	8002858 <HandleBuleToothDay+0x68>
 8002846:	2211      	movs	r2, #17
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HandleBuleToothDay+0x158>)
 800284a:	e7ea      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='1') && (temp2=='1')){flagDay=11;}
 800284c:	220b      	movs	r2, #11
 800284e:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <HandleBuleToothDay+0x158>)
 8002850:	e7f6      	b.n	8002840 <HandleBuleToothDay+0x50>
	if((temp1=='1') && (temp2=='2')){flagDay=12;}
 8002852:	220c      	movs	r2, #12
 8002854:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <HandleBuleToothDay+0x158>)
 8002856:	701a      	strb	r2, [r3, #0]
	if((temp1=='1') && (temp2=='8')){flagDay=18;}
 8002858:	2938      	cmp	r1, #56	; 0x38
 800285a:	d00b      	beq.n	8002874 <HandleBuleToothDay+0x84>
	if((temp1=='1') && (temp2=='9')){flagDay=19;}
 800285c:	2939      	cmp	r1, #57	; 0x39
 800285e:	d00c      	beq.n	800287a <HandleBuleToothDay+0x8a>
 8002860:	4770      	bx	lr
	if((temp1=='1') && (temp2=='3')){flagDay=13;}
 8002862:	220d      	movs	r2, #13
 8002864:	4b38      	ldr	r3, [pc, #224]	; (8002948 <HandleBuleToothDay+0x158>)
 8002866:	e7dc      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='1') && (temp2=='4')){flagDay=14;}
 8002868:	220e      	movs	r2, #14
 800286a:	4b37      	ldr	r3, [pc, #220]	; (8002948 <HandleBuleToothDay+0x158>)
 800286c:	e7d9      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='1') && (temp2=='5')){flagDay=15;}
 800286e:	220f      	movs	r2, #15
 8002870:	4b35      	ldr	r3, [pc, #212]	; (8002948 <HandleBuleToothDay+0x158>)
 8002872:	e7d6      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='1') && (temp2=='8')){flagDay=18;}
 8002874:	2212      	movs	r2, #18
 8002876:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HandleBuleToothDay+0x158>)
 8002878:	e7d3      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='1') && (temp2=='9')){flagDay=19;}
 800287a:	2213      	movs	r2, #19
 800287c:	4b32      	ldr	r3, [pc, #200]	; (8002948 <HandleBuleToothDay+0x158>)
 800287e:	e7d0      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='2') && (temp2=='0')){flagDay=20;}
 8002880:	2930      	cmp	r1, #48	; 0x30
 8002882:	d126      	bne.n	80028d2 <HandleBuleToothDay+0xe2>
 8002884:	2214      	movs	r2, #20
 8002886:	4b30      	ldr	r3, [pc, #192]	; (8002948 <HandleBuleToothDay+0x158>)
	if((temp1=='2') && (temp2=='1')){flagDay=21;}
 8002888:	701a      	strb	r2, [r3, #0]
	if((temp1=='2') && (temp2=='2')){flagDay=22;}
	if((temp1=='2') && (temp2=='3')){flagDay=23;}
	if((temp1=='2') && (temp2=='4')){flagDay=24;}
	if((temp1=='2') && (temp2=='5')){flagDay=25;}
	if((temp1=='2') && (temp2=='6')){flagDay=26;}
	if((temp1=='2') && (temp2=='7')){flagDay=27;}
 800288a:	2937      	cmp	r1, #55	; 0x37
 800288c:	d108      	bne.n	80028a0 <HandleBuleToothDay+0xb0>
 800288e:	221b      	movs	r2, #27
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HandleBuleToothDay+0x158>)
 8002892:	e7c6      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='2') && (temp2=='1')){flagDay=21;}
 8002894:	2215      	movs	r2, #21
 8002896:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <HandleBuleToothDay+0x158>)
 8002898:	e7f6      	b.n	8002888 <HandleBuleToothDay+0x98>
	if((temp1=='2') && (temp2=='2')){flagDay=22;}
 800289a:	2216      	movs	r2, #22
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HandleBuleToothDay+0x158>)
 800289e:	701a      	strb	r2, [r3, #0]
	if((temp1=='2') && (temp2=='8')){flagDay=28;}
 80028a0:	2938      	cmp	r1, #56	; 0x38
 80028a2:	d00b      	beq.n	80028bc <HandleBuleToothDay+0xcc>
	if((temp1=='2') && (temp2=='9')){flagDay=29;}
 80028a4:	2939      	cmp	r1, #57	; 0x39
 80028a6:	d00c      	beq.n	80028c2 <HandleBuleToothDay+0xd2>
 80028a8:	4770      	bx	lr
	if((temp1=='2') && (temp2=='3')){flagDay=23;}
 80028aa:	2217      	movs	r2, #23
 80028ac:	4b26      	ldr	r3, [pc, #152]	; (8002948 <HandleBuleToothDay+0x158>)
 80028ae:	e7b8      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='2') && (temp2=='4')){flagDay=24;}
 80028b0:	2218      	movs	r2, #24
 80028b2:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HandleBuleToothDay+0x158>)
 80028b4:	e7b5      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='2') && (temp2=='5')){flagDay=25;}
 80028b6:	2219      	movs	r2, #25
 80028b8:	4b23      	ldr	r3, [pc, #140]	; (8002948 <HandleBuleToothDay+0x158>)
 80028ba:	e7b2      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='2') && (temp2=='8')){flagDay=28;}
 80028bc:	221c      	movs	r2, #28
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HandleBuleToothDay+0x158>)
 80028c0:	e7af      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='2') && (temp2=='9')){flagDay=29;}
 80028c2:	221d      	movs	r2, #29
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HandleBuleToothDay+0x158>)
 80028c6:	e7ac      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='3') && (temp2=='0')){flagDay=30;}
 80028c8:	2930      	cmp	r1, #48	; 0x30
 80028ca:	d126      	bne.n	800291a <HandleBuleToothDay+0x12a>
 80028cc:	221e      	movs	r2, #30
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HandleBuleToothDay+0x158>)
 80028d0:	e7a7      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='2') && (temp2=='1')){flagDay=21;}
 80028d2:	2931      	cmp	r1, #49	; 0x31
 80028d4:	d0de      	beq.n	8002894 <HandleBuleToothDay+0xa4>
	if((temp1=='2') && (temp2=='2')){flagDay=22;}
 80028d6:	2932      	cmp	r1, #50	; 0x32
 80028d8:	d0df      	beq.n	800289a <HandleBuleToothDay+0xaa>
	if((temp1=='2') && (temp2=='3')){flagDay=23;}
 80028da:	2933      	cmp	r1, #51	; 0x33
 80028dc:	d0e5      	beq.n	80028aa <HandleBuleToothDay+0xba>
	if((temp1=='2') && (temp2=='4')){flagDay=24;}
 80028de:	2934      	cmp	r1, #52	; 0x34
 80028e0:	d0e6      	beq.n	80028b0 <HandleBuleToothDay+0xc0>
	if((temp1=='2') && (temp2=='5')){flagDay=25;}
 80028e2:	2935      	cmp	r1, #53	; 0x35
 80028e4:	d0e7      	beq.n	80028b6 <HandleBuleToothDay+0xc6>
	if((temp1=='2') && (temp2=='6')){flagDay=26;}
 80028e6:	2936      	cmp	r1, #54	; 0x36
 80028e8:	d1cf      	bne.n	800288a <HandleBuleToothDay+0x9a>
 80028ea:	221a      	movs	r2, #26
 80028ec:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HandleBuleToothDay+0x158>)
 80028ee:	e798      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='1') && (temp2=='1')){flagDay=11;}
 80028f0:	2931      	cmp	r1, #49	; 0x31
 80028f2:	d0ab      	beq.n	800284c <HandleBuleToothDay+0x5c>
	if((temp1=='1') && (temp2=='2')){flagDay=12;}
 80028f4:	2932      	cmp	r1, #50	; 0x32
 80028f6:	d0ac      	beq.n	8002852 <HandleBuleToothDay+0x62>
	if((temp1=='1') && (temp2=='3')){flagDay=13;}
 80028f8:	2933      	cmp	r1, #51	; 0x33
 80028fa:	d0b2      	beq.n	8002862 <HandleBuleToothDay+0x72>
	if((temp1=='1') && (temp2=='4')){flagDay=14;}
 80028fc:	2934      	cmp	r1, #52	; 0x34
 80028fe:	d0b3      	beq.n	8002868 <HandleBuleToothDay+0x78>
	if((temp1=='1') && (temp2=='5')){flagDay=15;}
 8002900:	2935      	cmp	r1, #53	; 0x35
 8002902:	d0b4      	beq.n	800286e <HandleBuleToothDay+0x7e>
	if((temp1=='1') && (temp2=='6')){flagDay=16;}
 8002904:	2936      	cmp	r1, #54	; 0x36
 8002906:	d19c      	bne.n	8002842 <HandleBuleToothDay+0x52>
 8002908:	2210      	movs	r2, #16
 800290a:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HandleBuleToothDay+0x158>)
 800290c:	e789      	b.n	8002822 <HandleBuleToothDay+0x32>
	if((temp1=='1') && (temp2=='0')){flagDay=10;}
 800290e:	2831      	cmp	r0, #49	; 0x31
 8002910:	d092      	beq.n	8002838 <HandleBuleToothDay+0x48>
	if((temp1=='2') && (temp2=='0')){flagDay=20;}
 8002912:	2832      	cmp	r0, #50	; 0x32
 8002914:	d0b4      	beq.n	8002880 <HandleBuleToothDay+0x90>
	if((temp1=='3') && (temp2=='0')){flagDay=30;}
 8002916:	2833      	cmp	r0, #51	; 0x33
 8002918:	d0d6      	beq.n	80028c8 <HandleBuleToothDay+0xd8>
}
 800291a:	4770      	bx	lr
	if((temp1=='0') && (temp2=='2')){flagDay=2;}
 800291c:	2932      	cmp	r1, #50	; 0x32
 800291e:	f43f af75 	beq.w	800280c <HandleBuleToothDay+0x1c>
	if((temp1=='0') && (temp2=='3')){flagDay=3;}
 8002922:	2933      	cmp	r1, #51	; 0x33
 8002924:	f43f af75 	beq.w	8002812 <HandleBuleToothDay+0x22>
	if((temp1=='0') && (temp2=='4')){flagDay=4;}
 8002928:	2934      	cmp	r1, #52	; 0x34
 800292a:	f43f af78 	beq.w	800281e <HandleBuleToothDay+0x2e>
	if((temp1=='0') && (temp2=='5')){flagDay=5;}
 800292e:	2935      	cmp	r1, #53	; 0x35
 8002930:	f43f af79 	beq.w	8002826 <HandleBuleToothDay+0x36>
	if((temp1=='0') && (temp2=='6')){flagDay=6;}
 8002934:	2936      	cmp	r1, #54	; 0x36
 8002936:	f43f af79 	beq.w	800282c <HandleBuleToothDay+0x3c>
	if((temp1=='0') && (temp2=='7')){flagDay=7;}
 800293a:	2937      	cmp	r1, #55	; 0x37
 800293c:	f47f af61 	bne.w	8002802 <HandleBuleToothDay+0x12>
 8002940:	2207      	movs	r2, #7
 8002942:	4b01      	ldr	r3, [pc, #4]	; (8002948 <HandleBuleToothDay+0x158>)
 8002944:	e76d      	b.n	8002822 <HandleBuleToothDay+0x32>
 8002946:	bf00      	nop
 8002948:	20003f55 	.word	0x20003f55

0800294c <HAL_UART_RxCpltCallback>:
{
 800294c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002950:	4604      	mov	r4, r0
    LED_SET_ON;		// 蓝牙发送数据指示灯
 8002952:	2201      	movs	r2, #1
 8002954:	2102      	movs	r1, #2
 8002956:	48b8      	ldr	r0, [pc, #736]	; (8002c38 <HAL_UART_RxCpltCallback+0x2ec>)
 8002958:	f000 fbfe 	bl	8003158 <HAL_GPIO_WritePin>
    if(huart ->Instance == USART2)	// huart==&huart2 两种判断条件等价
 800295c:	6822      	ldr	r2, [r4, #0]
 800295e:	4bb7      	ldr	r3, [pc, #732]	; (8002c3c <HAL_UART_RxCpltCallback+0x2f0>)
 8002960:	429a      	cmp	r2, r3
 8002962:	f040 8134 	bne.w	8002bce <HAL_UART_RxCpltCallback+0x282>
		Uart2_RxBuffCommon[Uart2_Rx_Cnt] = Uart2_aRxBuffer;
 8002966:	4eb6      	ldr	r6, [pc, #728]	; (8002c40 <HAL_UART_RxCpltCallback+0x2f4>)
 8002968:	4ab6      	ldr	r2, [pc, #728]	; (8002c44 <HAL_UART_RxCpltCallback+0x2f8>)
 800296a:	7833      	ldrb	r3, [r6, #0]
 800296c:	7811      	ldrb	r1, [r2, #0]
		Uart2_RxBuffLunarCanlender[Uart2_Rx_Cnt] = Uart2_aRxBuffer;
 800296e:	4db6      	ldr	r5, [pc, #728]	; (8002c48 <HAL_UART_RxCpltCallback+0x2fc>)
		Uart2_RxBuffCommon[Uart2_Rx_Cnt] = Uart2_aRxBuffer;
 8002970:	4ab6      	ldr	r2, [pc, #728]	; (8002c4c <HAL_UART_RxCpltCallback+0x300>)
		Uart2_RxBuffWeather[Uart2_Rx_Cnt] = Uart2_aRxBuffer;
 8002972:	4fb7      	ldr	r7, [pc, #732]	; (8002c50 <HAL_UART_RxCpltCallback+0x304>)
		Uart2_RxBuffTime[Uart2_Rx_Cnt] = Uart2_aRxBuffer;
 8002974:	4cb7      	ldr	r4, [pc, #732]	; (8002c54 <HAL_UART_RxCpltCallback+0x308>)
		Uart2_RxBuffCommon[Uart2_Rx_Cnt] = Uart2_aRxBuffer;
 8002976:	54d1      	strb	r1, [r2, r3]
		Uart2_RxBuffLunarCanlender[Uart2_Rx_Cnt] = Uart2_aRxBuffer;
 8002978:	54e9      	strb	r1, [r5, r3]
		Uart2_RxBuffWeather[Uart2_Rx_Cnt] = Uart2_aRxBuffer;
 800297a:	54f9      	strb	r1, [r7, r3]
		Uart2_RxBuffTime[Uart2_Rx_Cnt] = Uart2_aRxBuffer;
 800297c:	54e1      	strb	r1, [r4, r3]
		Uart2_Rx_Cnt++;
 800297e:	3301      	adds	r3, #1
 8002980:	b2db      	uxtb	r3, r3
 8002982:	7033      	strb	r3, [r6, #0]
		if((Uart2_RxBuffCommon[Uart2_Rx_Cnt - 1] == tempCommon) && (Uart2_RxBuffCommon[Uart2_Rx_Cnt - 2] == tempCommon))	// 判断是否为命令结束标志
 8002984:	4413      	add	r3, r2
 8002986:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800298a:	2961      	cmp	r1, #97	; 0x61
 800298c:	d126      	bne.n	80029dc <HAL_UART_RxCpltCallback+0x90>
 800298e:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8002992:	2b61      	cmp	r3, #97	; 0x61
 8002994:	d122      	bne.n	80029dc <HAL_UART_RxCpltCallback+0x90>
			if((Uart2_RxBuffCommon[0] == '1') && (Uart2_RxBuffCommon[1] == '0'))	flagBluetooth = 0;
 8002996:	7813      	ldrb	r3, [r2, #0]
 8002998:	2b31      	cmp	r3, #49	; 0x31
 800299a:	f040 819a 	bne.w	8002cd2 <HAL_UART_RxCpltCallback+0x386>
 800299e:	7853      	ldrb	r3, [r2, #1]
 80029a0:	2b30      	cmp	r3, #48	; 0x30
 80029a2:	f040 818a 	bne.w	8002cba <HAL_UART_RxCpltCallback+0x36e>
 80029a6:	2200      	movs	r2, #0
 80029a8:	4bab      	ldr	r3, [pc, #684]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
			if((Uart2_RxBuffCommon[0] == '6') && (Uart2_RxBuffCommon[1] == '4'))	flagBluetooth = 22;
 80029aa:	701a      	strb	r2, [r3, #0]
			Uart2_Rx_Cnt = 0;		// 清空计数器
 80029ac:	f04f 0800 	mov.w	r8, #0
			memset(Uart2_RxBuffCommon,0x00,sizeof(Uart2_RxBuffCommon));		// 清空缓冲数组
 80029b0:	2215      	movs	r2, #21
 80029b2:	4641      	mov	r1, r8
 80029b4:	48a5      	ldr	r0, [pc, #660]	; (8002c4c <HAL_UART_RxCpltCallback+0x300>)
			Uart2_Rx_Cnt = 0;		// 清空计数器
 80029b6:	f886 8000 	strb.w	r8, [r6]
			memset(Uart2_RxBuffCommon,0x00,sizeof(Uart2_RxBuffCommon));		// 清空缓冲数组
 80029ba:	f002 f8a9 	bl	8004b10 <memset>
			memset(Uart2_RxBuffLunarCanlender,0x00,sizeof(Uart2_RxBuffLunarCanlender));		// 清空缓冲数组
 80029be:	2215      	movs	r2, #21
 80029c0:	4641      	mov	r1, r8
 80029c2:	48a1      	ldr	r0, [pc, #644]	; (8002c48 <HAL_UART_RxCpltCallback+0x2fc>)
 80029c4:	f002 f8a4 	bl	8004b10 <memset>
			memset(Uart2_RxBuffWeather,0x00,sizeof(Uart2_RxBuffWeather));		// 清空缓冲数组
 80029c8:	2215      	movs	r2, #21
 80029ca:	4641      	mov	r1, r8
 80029cc:	48a0      	ldr	r0, [pc, #640]	; (8002c50 <HAL_UART_RxCpltCallback+0x304>)
 80029ce:	f002 f89f 	bl	8004b10 <memset>
			memset(Uart2_RxBuffTime,0x00,sizeof(Uart2_RxBuffTime));		// 清空缓冲数组
 80029d2:	2215      	movs	r2, #21
 80029d4:	4641      	mov	r1, r8
 80029d6:	489f      	ldr	r0, [pc, #636]	; (8002c54 <HAL_UART_RxCpltCallback+0x308>)
 80029d8:	f002 f89a 	bl	8004b10 <memset>
		if((Uart2_RxBuffWeather[Uart2_Rx_Cnt - 1] == tempWeather) && (Uart2_RxBuffWeather[Uart2_Rx_Cnt - 2] == tempWeather))
 80029dc:	7833      	ldrb	r3, [r6, #0]
 80029de:	443b      	add	r3, r7
 80029e0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80029e4:	2a62      	cmp	r2, #98	; 0x62
 80029e6:	d124      	bne.n	8002a32 <HAL_UART_RxCpltCallback+0xe6>
 80029e8:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80029ec:	2b62      	cmp	r3, #98	; 0x62
 80029ee:	d120      	bne.n	8002a32 <HAL_UART_RxCpltCallback+0xe6>
			HandleBuleToothWeather(Uart2_RxBuffWeather[0]);		// 天气标志
 80029f0:	7838      	ldrb	r0, [r7, #0]
 80029f2:	f7ff fe67 	bl	80026c4 <HandleBuleToothWeather>
			HandleBuleToothTemp(Uart2_RxBuffWeather[1], Uart2_RxBuffWeather[2]);		// 温度值
 80029f6:	78b9      	ldrb	r1, [r7, #2]
 80029f8:	7878      	ldrb	r0, [r7, #1]
 80029fa:	f7ff fe81 	bl	8002700 <HandleBuleToothTemp>
			HandleBuleToothHumi(Uart2_RxBuffWeather[3], Uart2_RxBuffWeather[4]);		// 湿度值
 80029fe:	7939      	ldrb	r1, [r7, #4]
 8002a00:	78f8      	ldrb	r0, [r7, #3]
			Uart2_Rx_Cnt = 0;		// 清空计数器
 8002a02:	2700      	movs	r7, #0
			HandleBuleToothHumi(Uart2_RxBuffWeather[3], Uart2_RxBuffWeather[4]);		// 湿度值
 8002a04:	f7ff fe88 	bl	8002718 <HandleBuleToothHumi>
			memset(Uart2_RxBuffCommon,0x00,sizeof(Uart2_RxBuffCommon));		// 清空缓冲数组
 8002a08:	2215      	movs	r2, #21
 8002a0a:	4639      	mov	r1, r7
 8002a0c:	488f      	ldr	r0, [pc, #572]	; (8002c4c <HAL_UART_RxCpltCallback+0x300>)
			Uart2_Rx_Cnt = 0;		// 清空计数器
 8002a0e:	7037      	strb	r7, [r6, #0]
			memset(Uart2_RxBuffCommon,0x00,sizeof(Uart2_RxBuffCommon));		// 清空缓冲数组
 8002a10:	f002 f87e 	bl	8004b10 <memset>
			memset(Uart2_RxBuffLunarCanlender,0x00,sizeof(Uart2_RxBuffLunarCanlender));		// 清空缓冲数组
 8002a14:	2215      	movs	r2, #21
 8002a16:	4639      	mov	r1, r7
 8002a18:	488b      	ldr	r0, [pc, #556]	; (8002c48 <HAL_UART_RxCpltCallback+0x2fc>)
 8002a1a:	f002 f879 	bl	8004b10 <memset>
			memset(Uart2_RxBuffWeather,0x00,sizeof(Uart2_RxBuffWeather));		// 清空缓冲数组
 8002a1e:	2215      	movs	r2, #21
 8002a20:	4639      	mov	r1, r7
 8002a22:	488b      	ldr	r0, [pc, #556]	; (8002c50 <HAL_UART_RxCpltCallback+0x304>)
 8002a24:	f002 f874 	bl	8004b10 <memset>
			memset(Uart2_RxBuffTime,0x00,sizeof(Uart2_RxBuffTime));		// 清空缓冲数组
 8002a28:	2215      	movs	r2, #21
 8002a2a:	4639      	mov	r1, r7
 8002a2c:	4889      	ldr	r0, [pc, #548]	; (8002c54 <HAL_UART_RxCpltCallback+0x308>)
 8002a2e:	f002 f86f 	bl	8004b10 <memset>
		if((Uart2_RxBuffLunarCanlender[Uart2_Rx_Cnt - 1] == tempLunarCanlender) && (Uart2_RxBuffLunarCanlender[Uart2_Rx_Cnt - 2] == tempLunarCanlender))
 8002a32:	7833      	ldrb	r3, [r6, #0]
 8002a34:	442b      	add	r3, r5
 8002a36:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8002a3a:	2a63      	cmp	r2, #99	; 0x63
 8002a3c:	d12e      	bne.n	8002a9c <HAL_UART_RxCpltCallback+0x150>
 8002a3e:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8002a42:	2b63      	cmp	r3, #99	; 0x63
 8002a44:	d12a      	bne.n	8002a9c <HAL_UART_RxCpltCallback+0x150>
			HandleBuleToothRun(Uart2_RxBuffLunarCanlender[0],Uart2_RxBuffLunarCanlender[1],Uart2_RxBuffLunarCanlender[2],Uart2_RxBuffLunarCanlender[3]);		// 闰
 8002a46:	78eb      	ldrb	r3, [r5, #3]
 8002a48:	78aa      	ldrb	r2, [r5, #2]
 8002a4a:	7869      	ldrb	r1, [r5, #1]
 8002a4c:	7828      	ldrb	r0, [r5, #0]
 8002a4e:	f7ff feb5 	bl	80027bc <HandleBuleToothRun>
			HandleBuleToothMonth(Uart2_RxBuffLunarCanlender[2],Uart2_RxBuffLunarCanlender[3]);		// 月
 8002a52:	78e9      	ldrb	r1, [r5, #3]
 8002a54:	78a8      	ldrb	r0, [r5, #2]
 8002a56:	f7ff fe6b 	bl	8002730 <HandleBuleToothMonth>
			HandleBuleToothDay(Uart2_RxBuffLunarCanlender[4],Uart2_RxBuffLunarCanlender[5]);		// 日
 8002a5a:	7969      	ldrb	r1, [r5, #5]
 8002a5c:	7928      	ldrb	r0, [r5, #4]
			Uart2_Rx_Cnt = 0;		// 清空计数器
 8002a5e:	2500      	movs	r5, #0
			HandleBuleToothDay(Uart2_RxBuffLunarCanlender[4],Uart2_RxBuffLunarCanlender[5]);		// 日
 8002a60:	f7ff fec6 	bl	80027f0 <HandleBuleToothDay>
			HAL_UART_Transmit(&huart1, (uint8_t *)Uart2_RxBuffLunarCanlender, 6, 1000);		// 回显检测
 8002a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a68:	2206      	movs	r2, #6
 8002a6a:	4977      	ldr	r1, [pc, #476]	; (8002c48 <HAL_UART_RxCpltCallback+0x2fc>)
 8002a6c:	487b      	ldr	r0, [pc, #492]	; (8002c5c <HAL_UART_RxCpltCallback+0x310>)
 8002a6e:	f001 fe02 	bl	8004676 <HAL_UART_Transmit>
			memset(Uart2_RxBuffCommon,0x00,sizeof(Uart2_RxBuffCommon));		// 清空缓冲数组
 8002a72:	2215      	movs	r2, #21
 8002a74:	4629      	mov	r1, r5
 8002a76:	4875      	ldr	r0, [pc, #468]	; (8002c4c <HAL_UART_RxCpltCallback+0x300>)
			Uart2_Rx_Cnt = 0;		// 清空计数器
 8002a78:	7035      	strb	r5, [r6, #0]
			memset(Uart2_RxBuffCommon,0x00,sizeof(Uart2_RxBuffCommon));		// 清空缓冲数组
 8002a7a:	f002 f849 	bl	8004b10 <memset>
			memset(Uart2_RxBuffLunarCanlender,0x00,sizeof(Uart2_RxBuffLunarCanlender));		// 清空缓冲数组
 8002a7e:	2215      	movs	r2, #21
 8002a80:	4629      	mov	r1, r5
 8002a82:	4871      	ldr	r0, [pc, #452]	; (8002c48 <HAL_UART_RxCpltCallback+0x2fc>)
 8002a84:	f002 f844 	bl	8004b10 <memset>
			memset(Uart2_RxBuffWeather,0x00,sizeof(Uart2_RxBuffWeather));		// 清空缓冲数组
 8002a88:	2215      	movs	r2, #21
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	4870      	ldr	r0, [pc, #448]	; (8002c50 <HAL_UART_RxCpltCallback+0x304>)
 8002a8e:	f002 f83f 	bl	8004b10 <memset>
			memset(Uart2_RxBuffTime,0x00,sizeof(Uart2_RxBuffTime));		// 清空缓冲数组
 8002a92:	2215      	movs	r2, #21
 8002a94:	4629      	mov	r1, r5
 8002a96:	486f      	ldr	r0, [pc, #444]	; (8002c54 <HAL_UART_RxCpltCallback+0x308>)
 8002a98:	f002 f83a 	bl	8004b10 <memset>
		if((Uart2_RxBuffTime[Uart2_Rx_Cnt - 1] == tempTime) && (Uart2_RxBuffTime[Uart2_Rx_Cnt - 2] == tempTime))
 8002a9c:	7833      	ldrb	r3, [r6, #0]
 8002a9e:	4423      	add	r3, r4
 8002aa0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8002aa4:	2a64      	cmp	r2, #100	; 0x64
 8002aa6:	f040 8092 	bne.w	8002bce <HAL_UART_RxCpltCallback+0x282>
 8002aaa:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	f040 808d 	bne.w	8002bce <HAL_UART_RxCpltCallback+0x282>
			tempArray[0] = (Uart2_RxBuffTime[2] - 48) * 10 + (Uart2_RxBuffTime[3] - 48);		// 年
 8002ab4:	78e3      	ldrb	r3, [r4, #3]
 8002ab6:	78a2      	ldrb	r2, [r4, #2]
 8002ab8:	3b10      	subs	r3, #16
 8002aba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002abe:	4d68      	ldr	r5, [pc, #416]	; (8002c60 <HAL_UART_RxCpltCallback+0x314>)
 8002ac0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	702b      	strb	r3, [r5, #0]
			tempArray[1] = (Uart2_RxBuffTime[5] - 48) * 10 + (Uart2_RxBuffTime[6] - 48);		// 月
 8002ac8:	7962      	ldrb	r2, [r4, #5]
 8002aca:	79a3      	ldrb	r3, [r4, #6]
 8002acc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ad0:	3b10      	subs	r3, #16
 8002ad2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	706b      	strb	r3, [r5, #1]
			tempArray[2] = (Uart2_RxBuffTime[8] - 48) * 10 + (Uart2_RxBuffTime[9] - 48);		// 日
 8002ada:	7a22      	ldrb	r2, [r4, #8]
 8002adc:	7a63      	ldrb	r3, [r4, #9]
 8002ade:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ae2:	3b10      	subs	r3, #16
 8002ae4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	70ab      	strb	r3, [r5, #2]
			tempArray[3] = (Uart2_RxBuffTime[11] - 48) * 10 + (Uart2_RxBuffTime[12] - 48);		// 时
 8002aec:	7ae2      	ldrb	r2, [r4, #11]
 8002aee:	7b23      	ldrb	r3, [r4, #12]
 8002af0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002af4:	3b10      	subs	r3, #16
 8002af6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	70eb      	strb	r3, [r5, #3]
			tempArray[4] = (Uart2_RxBuffTime[14] - 48) * 10 + (Uart2_RxBuffTime[15] - 48);		// 分
 8002afe:	7ba2      	ldrb	r2, [r4, #14]
 8002b00:	7be3      	ldrb	r3, [r4, #15]
 8002b02:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b06:	3b10      	subs	r3, #16
 8002b08:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002b0c:	b2db      	uxtb	r3, r3
			tempArray[5] = (Uart2_RxBuffTime[17] - 48) * 10 + (Uart2_RxBuffTime[18] - 48);		// 秒
 8002b0e:	7c62      	ldrb	r2, [r4, #17]
			tempArray[4] = (Uart2_RxBuffTime[14] - 48) * 10 + (Uart2_RxBuffTime[15] - 48);		// 分
 8002b10:	712b      	strb	r3, [r5, #4]
			tempArray[5] = (Uart2_RxBuffTime[17] - 48) * 10 + (Uart2_RxBuffTime[18] - 48);		// 秒
 8002b12:	7ca3      	ldrb	r3, [r4, #18]
			RTC_DateTypeDef RTC_DateStructure = {0, tempArray[1],tempArray[2],tempArray[0]};
 8002b14:	2400      	movs	r4, #0
			tempArray[5] = (Uart2_RxBuffTime[17] - 48) * 10 + (Uart2_RxBuffTime[18] - 48);		// 秒
 8002b16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b1a:	3b10      	subs	r3, #16
 8002b1c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002b20:	b2db      	uxtb	r3, r3
			HAL_UART_Transmit(&huart1, (uint8_t *)Uart2_RxBuffTime, 19, 1000);		// 回显检测
 8002b22:	2213      	movs	r2, #19
 8002b24:	494b      	ldr	r1, [pc, #300]	; (8002c54 <HAL_UART_RxCpltCallback+0x308>)
			tempArray[5] = (Uart2_RxBuffTime[17] - 48) * 10 + (Uart2_RxBuffTime[18] - 48);		// 秒
 8002b26:	716b      	strb	r3, [r5, #5]
			HAL_UART_Transmit(&huart1, (uint8_t *)Uart2_RxBuffTime, 19, 1000);		// 回显检测
 8002b28:	484c      	ldr	r0, [pc, #304]	; (8002c5c <HAL_UART_RxCpltCallback+0x310>)
 8002b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2e:	f001 fda2 	bl	8004676 <HAL_UART_Transmit>
			RTC_TimeTypeDef RTC_TimeStructure = {tempArray[3],tempArray[4],tempArray[5]};
 8002b32:	78eb      	ldrb	r3, [r5, #3]
			HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8002b34:	4622      	mov	r2, r4
			RTC_TimeTypeDef RTC_TimeStructure = {tempArray[3],tempArray[4],tempArray[5]};
 8002b36:	f88d 3000 	strb.w	r3, [sp]
 8002b3a:	792b      	ldrb	r3, [r5, #4]
			HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8002b3c:	4669      	mov	r1, sp
			RTC_TimeTypeDef RTC_TimeStructure = {tempArray[3],tempArray[4],tempArray[5]};
 8002b3e:	f88d 3001 	strb.w	r3, [sp, #1]
 8002b42:	796b      	ldrb	r3, [r5, #5]
			HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8002b44:	4847      	ldr	r0, [pc, #284]	; (8002c64 <HAL_UART_RxCpltCallback+0x318>)
			RTC_TimeTypeDef RTC_TimeStructure = {tempArray[3],tempArray[4],tempArray[5]};
 8002b46:	f88d 3002 	strb.w	r3, [sp, #2]
			RTC_DateTypeDef RTC_DateStructure = {0, tempArray[1],tempArray[2],tempArray[0]};
 8002b4a:	786b      	ldrb	r3, [r5, #1]
 8002b4c:	f88d 4004 	strb.w	r4, [sp, #4]
 8002b50:	f88d 3005 	strb.w	r3, [sp, #5]
 8002b54:	78ab      	ldrb	r3, [r5, #2]
 8002b56:	f88d 3006 	strb.w	r3, [sp, #6]
 8002b5a:	782b      	ldrb	r3, [r5, #0]
 8002b5c:	f88d 3007 	strb.w	r3, [sp, #7]
			HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8002b60:	f001 f98f 	bl	8003e82 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &RTC_DateStructure, RTC_FORMAT_BIN);
 8002b64:	4622      	mov	r2, r4
 8002b66:	a901      	add	r1, sp, #4
 8002b68:	483e      	ldr	r0, [pc, #248]	; (8002c64 <HAL_UART_RxCpltCallback+0x318>)
 8002b6a:	f001 fa97 	bl	800409c <HAL_RTC_SetDate>
			HAL_RTC_GetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8002b6e:	4622      	mov	r2, r4
 8002b70:	4669      	mov	r1, sp
 8002b72:	483c      	ldr	r0, [pc, #240]	; (8002c64 <HAL_UART_RxCpltCallback+0x318>)
 8002b74:	f001 f9d4 	bl	8003f20 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &RTC_DateStructure, RTC_FORMAT_BIN);
 8002b78:	4622      	mov	r2, r4
 8002b7a:	a901      	add	r1, sp, #4
 8002b7c:	4839      	ldr	r0, [pc, #228]	; (8002c64 <HAL_UART_RxCpltCallback+0x318>)
 8002b7e:	f001 fae5 	bl	800414c <HAL_RTC_GetDate>
			HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8002b82:	4622      	mov	r2, r4
 8002b84:	4669      	mov	r1, sp
 8002b86:	4837      	ldr	r0, [pc, #220]	; (8002c64 <HAL_UART_RxCpltCallback+0x318>)
 8002b88:	f001 f97b 	bl	8003e82 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &RTC_DateStructure, RTC_FORMAT_BIN);
 8002b8c:	4622      	mov	r2, r4
 8002b8e:	a901      	add	r1, sp, #4
 8002b90:	4834      	ldr	r0, [pc, #208]	; (8002c64 <HAL_UART_RxCpltCallback+0x318>)
 8002b92:	f001 fa83 	bl	800409c <HAL_RTC_SetDate>
			HAL_UART_Transmit(&huart1, (uint8_t *)Uart2_RxBuffTime, 19, 1000);		// 回显检测
 8002b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9a:	2213      	movs	r2, #19
 8002b9c:	492d      	ldr	r1, [pc, #180]	; (8002c54 <HAL_UART_RxCpltCallback+0x308>)
 8002b9e:	482f      	ldr	r0, [pc, #188]	; (8002c5c <HAL_UART_RxCpltCallback+0x310>)
 8002ba0:	f001 fd69 	bl	8004676 <HAL_UART_Transmit>
			memset(Uart2_RxBuffCommon,0x00,sizeof(Uart2_RxBuffCommon));		// 清空缓冲数组
 8002ba4:	2215      	movs	r2, #21
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	4828      	ldr	r0, [pc, #160]	; (8002c4c <HAL_UART_RxCpltCallback+0x300>)
			Uart2_Rx_Cnt = 0;		// 清空计数器
 8002baa:	7034      	strb	r4, [r6, #0]
			memset(Uart2_RxBuffCommon,0x00,sizeof(Uart2_RxBuffCommon));		// 清空缓冲数组
 8002bac:	f001 ffb0 	bl	8004b10 <memset>
			memset(Uart2_RxBuffLunarCanlender,0x00,sizeof(Uart2_RxBuffLunarCanlender));		// 清空缓冲数组
 8002bb0:	2215      	movs	r2, #21
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	4824      	ldr	r0, [pc, #144]	; (8002c48 <HAL_UART_RxCpltCallback+0x2fc>)
 8002bb6:	f001 ffab 	bl	8004b10 <memset>
			memset(Uart2_RxBuffWeather,0x00,sizeof(Uart2_RxBuffWeather));		// 清空缓冲数组
 8002bba:	2215      	movs	r2, #21
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	4824      	ldr	r0, [pc, #144]	; (8002c50 <HAL_UART_RxCpltCallback+0x304>)
 8002bc0:	f001 ffa6 	bl	8004b10 <memset>
			memset(Uart2_RxBuffTime,0x00,sizeof(Uart2_RxBuffTime));		// 清空缓冲数组
 8002bc4:	2215      	movs	r2, #21
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	4822      	ldr	r0, [pc, #136]	; (8002c54 <HAL_UART_RxCpltCallback+0x308>)
 8002bca:	f001 ffa1 	bl	8004b10 <memset>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&Uart2_aRxBuffer, 1);   // 重新启用USART2串口的接收中断
 8002bce:	2201      	movs	r2, #1
 8002bd0:	491c      	ldr	r1, [pc, #112]	; (8002c44 <HAL_UART_RxCpltCallback+0x2f8>)
 8002bd2:	4825      	ldr	r0, [pc, #148]	; (8002c68 <HAL_UART_RxCpltCallback+0x31c>)
}
 8002bd4:	b002      	add	sp, #8
 8002bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&Uart2_aRxBuffer, 1);   // 重新启用USART2串口的接收中断
 8002bda:	f001 bf64 	b.w	8004aa6 <HAL_UART_Receive_IT>
			if((Uart2_RxBuffCommon[0] == '1') && (Uart2_RxBuffCommon[1] == '1'))	flagBluetooth = 1;
 8002bde:	2201      	movs	r2, #1
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
 8002be2:	e6e2      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '1') && (Uart2_RxBuffCommon[1] == '2'))	flagBluetooth = 2;
 8002be4:	2202      	movs	r2, #2
 8002be6:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
 8002be8:	e6df      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '1') && (Uart2_RxBuffCommon[1] == '3'))	flagBluetooth = 3;
 8002bea:	2203      	movs	r2, #3
 8002bec:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
 8002bee:	e6dc      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '2') && (Uart2_RxBuffCommon[1] == '0'))	flagBluetooth = 5;
 8002bf0:	7853      	ldrb	r3, [r2, #1]
 8002bf2:	2b30      	cmp	r3, #48	; 0x30
 8002bf4:	d155      	bne.n	8002ca2 <HAL_UART_RxCpltCallback+0x356>
 8002bf6:	2205      	movs	r2, #5
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
 8002bfa:	e6d6      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '2') && (Uart2_RxBuffCommon[1] == '1'))	flagBluetooth = 6;
 8002bfc:	2206      	movs	r2, #6
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
 8002c00:	e6d3      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '2') && (Uart2_RxBuffCommon[1] == '2'))	flagBluetooth = 7;
 8002c02:	2207      	movs	r2, #7
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
 8002c06:	e6d0      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '2') && (Uart2_RxBuffCommon[1] == '3'))	flagBluetooth = 8;
 8002c08:	2208      	movs	r2, #8
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
 8002c0c:	e6cd      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '3') && (Uart2_RxBuffCommon[1] == '0'))	flagBluetooth = 10;
 8002c0e:	7853      	ldrb	r3, [r2, #1]
 8002c10:	2b30      	cmp	r3, #48	; 0x30
 8002c12:	f47f aecb 	bne.w	80029ac <HAL_UART_RxCpltCallback+0x60>
 8002c16:	220a      	movs	r2, #10
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
 8002c1a:	e6c6      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '4') && (Uart2_RxBuffCommon[1] == '0'))	flagBluetooth = 11;
 8002c1c:	7853      	ldrb	r3, [r2, #1]
 8002c1e:	2b30      	cmp	r3, #48	; 0x30
 8002c20:	f47f aec4 	bne.w	80029ac <HAL_UART_RxCpltCallback+0x60>
 8002c24:	220b      	movs	r2, #11
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
 8002c28:	e6bf      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '5') && (Uart2_RxBuffCommon[1] == '0'))	flagBluetooth = 16;
 8002c2a:	7853      	ldrb	r3, [r2, #1]
 8002c2c:	2b30      	cmp	r3, #48	; 0x30
 8002c2e:	d132      	bne.n	8002c96 <HAL_UART_RxCpltCallback+0x34a>
 8002c30:	2210      	movs	r2, #16
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_UART_RxCpltCallback+0x30c>)
 8002c34:	e6b9      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
 8002c36:	bf00      	nop
 8002c38:	40010c00 	.word	0x40010c00
 8002c3c:	40004400 	.word	0x40004400
 8002c40:	20004418 	.word	0x20004418
 8002c44:	20004419 	.word	0x20004419
 8002c48:	200043d9 	.word	0x200043d9
 8002c4c:	200043c4 	.word	0x200043c4
 8002c50:	20004403 	.word	0x20004403
 8002c54:	200043ee 	.word	0x200043ee
 8002c58:	20003ec0 	.word	0x20003ec0
 8002c5c:	2000441c 	.word	0x2000441c
 8002c60:	20003ec8 	.word	0x20003ec8
 8002c64:	20004368 	.word	0x20004368
 8002c68:	20004464 	.word	0x20004464
			if((Uart2_RxBuffCommon[0] == '6') && (Uart2_RxBuffCommon[1] == '1'))	flagBluetooth = 19;
 8002c6c:	2213      	movs	r2, #19
 8002c6e:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <HAL_UART_RxCpltCallback+0x3a8>)
 8002c70:	e69b      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '6') && (Uart2_RxBuffCommon[1] == '2'))	flagBluetooth = 20;
 8002c72:	2214      	movs	r2, #20
 8002c74:	4b1f      	ldr	r3, [pc, #124]	; (8002cf4 <HAL_UART_RxCpltCallback+0x3a8>)
 8002c76:	e698      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '6') && (Uart2_RxBuffCommon[1] == '3'))	flagBluetooth = 21;		// 开始播放音乐、暂停播放音乐
 8002c78:	2215      	movs	r2, #21
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <HAL_UART_RxCpltCallback+0x3a8>)
 8002c7c:	e695      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '6') && (Uart2_RxBuffCommon[1] == '1'))	flagBluetooth = 19;
 8002c7e:	2b31      	cmp	r3, #49	; 0x31
 8002c80:	d0f4      	beq.n	8002c6c <HAL_UART_RxCpltCallback+0x320>
			if((Uart2_RxBuffCommon[0] == '6') && (Uart2_RxBuffCommon[1] == '2'))	flagBluetooth = 20;
 8002c82:	2b32      	cmp	r3, #50	; 0x32
 8002c84:	d0f5      	beq.n	8002c72 <HAL_UART_RxCpltCallback+0x326>
			if((Uart2_RxBuffCommon[0] == '6') && (Uart2_RxBuffCommon[1] == '3'))	flagBluetooth = 21;		// 开始播放音乐、暂停播放音乐
 8002c86:	2b33      	cmp	r3, #51	; 0x33
 8002c88:	d0f6      	beq.n	8002c78 <HAL_UART_RxCpltCallback+0x32c>
			if((Uart2_RxBuffCommon[0] == '6') && (Uart2_RxBuffCommon[1] == '4'))	flagBluetooth = 22;
 8002c8a:	2b34      	cmp	r3, #52	; 0x34
 8002c8c:	f47f ae8e 	bne.w	80029ac <HAL_UART_RxCpltCallback+0x60>
 8002c90:	2216      	movs	r2, #22
 8002c92:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_UART_RxCpltCallback+0x3a8>)
 8002c94:	e689      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '5') && (Uart2_RxBuffCommon[1] == '1'))	flagBluetooth = 17;
 8002c96:	2b31      	cmp	r3, #49	; 0x31
 8002c98:	f47f ae88 	bne.w	80029ac <HAL_UART_RxCpltCallback+0x60>
 8002c9c:	2211      	movs	r2, #17
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_UART_RxCpltCallback+0x3a8>)
 8002ca0:	e683      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '2') && (Uart2_RxBuffCommon[1] == '1'))	flagBluetooth = 6;
 8002ca2:	2b31      	cmp	r3, #49	; 0x31
 8002ca4:	d0aa      	beq.n	8002bfc <HAL_UART_RxCpltCallback+0x2b0>
			if((Uart2_RxBuffCommon[0] == '2') && (Uart2_RxBuffCommon[1] == '2'))	flagBluetooth = 7;
 8002ca6:	2b32      	cmp	r3, #50	; 0x32
 8002ca8:	d0ab      	beq.n	8002c02 <HAL_UART_RxCpltCallback+0x2b6>
			if((Uart2_RxBuffCommon[0] == '2') && (Uart2_RxBuffCommon[1] == '3'))	flagBluetooth = 8;
 8002caa:	2b33      	cmp	r3, #51	; 0x33
 8002cac:	d0ac      	beq.n	8002c08 <HAL_UART_RxCpltCallback+0x2bc>
			if((Uart2_RxBuffCommon[0] == '2') && (Uart2_RxBuffCommon[1] == '4'))	flagBluetooth = 9;
 8002cae:	2b34      	cmp	r3, #52	; 0x34
 8002cb0:	f47f ae7c 	bne.w	80029ac <HAL_UART_RxCpltCallback+0x60>
 8002cb4:	2209      	movs	r2, #9
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_UART_RxCpltCallback+0x3a8>)
 8002cb8:	e677      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '1') && (Uart2_RxBuffCommon[1] == '1'))	flagBluetooth = 1;
 8002cba:	2b31      	cmp	r3, #49	; 0x31
 8002cbc:	d08f      	beq.n	8002bde <HAL_UART_RxCpltCallback+0x292>
			if((Uart2_RxBuffCommon[0] == '1') && (Uart2_RxBuffCommon[1] == '2'))	flagBluetooth = 2;
 8002cbe:	2b32      	cmp	r3, #50	; 0x32
 8002cc0:	d090      	beq.n	8002be4 <HAL_UART_RxCpltCallback+0x298>
			if((Uart2_RxBuffCommon[0] == '1') && (Uart2_RxBuffCommon[1] == '3'))	flagBluetooth = 3;
 8002cc2:	2b33      	cmp	r3, #51	; 0x33
 8002cc4:	d091      	beq.n	8002bea <HAL_UART_RxCpltCallback+0x29e>
			if((Uart2_RxBuffCommon[0] == '1') && (Uart2_RxBuffCommon[1] == '4'))	flagBluetooth = 4;
 8002cc6:	2b34      	cmp	r3, #52	; 0x34
 8002cc8:	f47f ae70 	bne.w	80029ac <HAL_UART_RxCpltCallback+0x60>
 8002ccc:	2204      	movs	r2, #4
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_UART_RxCpltCallback+0x3a8>)
 8002cd0:	e66b      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
			if((Uart2_RxBuffCommon[0] == '2') && (Uart2_RxBuffCommon[1] == '0'))	flagBluetooth = 5;
 8002cd2:	2b32      	cmp	r3, #50	; 0x32
 8002cd4:	d08c      	beq.n	8002bf0 <HAL_UART_RxCpltCallback+0x2a4>
			if((Uart2_RxBuffCommon[0] == '3') && (Uart2_RxBuffCommon[1] == '0'))	flagBluetooth = 10;
 8002cd6:	2b33      	cmp	r3, #51	; 0x33
 8002cd8:	d099      	beq.n	8002c0e <HAL_UART_RxCpltCallback+0x2c2>
			if((Uart2_RxBuffCommon[0] == '4') && (Uart2_RxBuffCommon[1] == '0'))	flagBluetooth = 11;
 8002cda:	2b34      	cmp	r3, #52	; 0x34
 8002cdc:	d09e      	beq.n	8002c1c <HAL_UART_RxCpltCallback+0x2d0>
			if((Uart2_RxBuffCommon[0] == '5') && (Uart2_RxBuffCommon[1] == '0'))	flagBluetooth = 16;
 8002cde:	2b35      	cmp	r3, #53	; 0x35
 8002ce0:	d0a3      	beq.n	8002c2a <HAL_UART_RxCpltCallback+0x2de>
			if((Uart2_RxBuffCommon[0] == '6') && (Uart2_RxBuffCommon[1] == '0'))	flagBluetooth = 18;
 8002ce2:	2b36      	cmp	r3, #54	; 0x36
 8002ce4:	f47f ae62 	bne.w	80029ac <HAL_UART_RxCpltCallback+0x60>
 8002ce8:	7853      	ldrb	r3, [r2, #1]
 8002cea:	2b30      	cmp	r3, #48	; 0x30
 8002cec:	d1c7      	bne.n	8002c7e <HAL_UART_RxCpltCallback+0x332>
 8002cee:	2212      	movs	r2, #18
 8002cf0:	4b00      	ldr	r3, [pc, #0]	; (8002cf4 <HAL_UART_RxCpltCallback+0x3a8>)
 8002cf2:	e65a      	b.n	80029aa <HAL_UART_RxCpltCallback+0x5e>
 8002cf4:	20003ec0 	.word	0x20003ec0

08002cf8 <Reset_Handler>:
 8002cf8:	f7ff fb96 	bl	8002428 <SystemInit>
 8002cfc:	480b      	ldr	r0, [pc, #44]	; (8002d2c <LoopFillZerobss+0xe>)
 8002cfe:	490c      	ldr	r1, [pc, #48]	; (8002d30 <LoopFillZerobss+0x12>)
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <LoopFillZerobss+0x16>)
 8002d02:	2300      	movs	r3, #0
 8002d04:	e002      	b.n	8002d0c <LoopCopyDataInit>

08002d06 <CopyDataInit>:
 8002d06:	58d4      	ldr	r4, [r2, r3]
 8002d08:	50c4      	str	r4, [r0, r3]
 8002d0a:	3304      	adds	r3, #4

08002d0c <LoopCopyDataInit>:
 8002d0c:	18c4      	adds	r4, r0, r3
 8002d0e:	428c      	cmp	r4, r1
 8002d10:	d3f9      	bcc.n	8002d06 <CopyDataInit>
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <LoopFillZerobss+0x1a>)
 8002d14:	4c09      	ldr	r4, [pc, #36]	; (8002d3c <LoopFillZerobss+0x1e>)
 8002d16:	2300      	movs	r3, #0
 8002d18:	e001      	b.n	8002d1e <LoopFillZerobss>

08002d1a <FillZerobss>:
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	3204      	adds	r2, #4

08002d1e <LoopFillZerobss>:
 8002d1e:	42a2      	cmp	r2, r4
 8002d20:	d3fb      	bcc.n	8002d1a <FillZerobss>
 8002d22:	f001 fed1 	bl	8004ac8 <__libc_init_array>
 8002d26:	f7fd fdc9 	bl	80008bc <main>
 8002d2a:	4770      	bx	lr
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20003edc 	.word	0x20003edc
 8002d34:	08004c28 	.word	0x08004c28
 8002d38:	20003edc 	.word	0x20003edc
 8002d3c:	200044f8 	.word	0x200044f8

08002d40 <ADC1_2_IRQHandler>:
 8002d40:	e7fe      	b.n	8002d40 <ADC1_2_IRQHandler>
	...

08002d44 <HAL_InitTick>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_InitTick+0x3c>)
 8002d48:	4605      	mov	r5, r0
 8002d4a:	7818      	ldrb	r0, [r3, #0]
 8002d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d50:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d54:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <HAL_InitTick+0x40>)
 8002d56:	6810      	ldr	r0, [r2, #0]
 8002d58:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d5c:	f000 f89e 	bl	8002e9c <HAL_SYSTICK_Config>
 8002d60:	4604      	mov	r4, r0
 8002d62:	b958      	cbnz	r0, 8002d7c <HAL_InitTick+0x38>
 8002d64:	2d0f      	cmp	r5, #15
 8002d66:	d809      	bhi.n	8002d7c <HAL_InitTick+0x38>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f000 f854 	bl	8002e1c <HAL_NVIC_SetPriority>
 8002d74:	4620      	mov	r0, r4
 8002d76:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <HAL_InitTick+0x44>)
 8002d78:	601d      	str	r5, [r3, #0]
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	e7fc      	b.n	8002d7a <HAL_InitTick+0x36>
 8002d80:	20003ed4 	.word	0x20003ed4
 8002d84:	20003ed0 	.word	0x20003ed0
 8002d88:	20003ed8 	.word	0x20003ed8

08002d8c <HAL_Init>:
 8002d8c:	4a07      	ldr	r2, [pc, #28]	; (8002dac <HAL_Init+0x20>)
 8002d8e:	b508      	push	{r3, lr}
 8002d90:	6813      	ldr	r3, [r2, #0]
 8002d92:	2003      	movs	r0, #3
 8002d94:	f043 0310 	orr.w	r3, r3, #16
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	f000 f82d 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>
 8002d9e:	200f      	movs	r0, #15
 8002da0:	f7ff ffd0 	bl	8002d44 <HAL_InitTick>
 8002da4:	f7ff fb0a 	bl	80023bc <HAL_MspInit>
 8002da8:	2000      	movs	r0, #0
 8002daa:	bd08      	pop	{r3, pc}
 8002dac:	40022000 	.word	0x40022000

08002db0 <HAL_IncTick>:
 8002db0:	4a03      	ldr	r2, [pc, #12]	; (8002dc0 <HAL_IncTick+0x10>)
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HAL_IncTick+0x14>)
 8002db4:	6811      	ldr	r1, [r2, #0]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	440b      	add	r3, r1
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	200044f4 	.word	0x200044f4
 8002dc4:	20003ed4 	.word	0x20003ed4

08002dc8 <HAL_GetTick>:
 8002dc8:	4b01      	ldr	r3, [pc, #4]	; (8002dd0 <HAL_GetTick+0x8>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	200044f4 	.word	0x200044f4

08002dd4 <HAL_Delay>:
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	f7ff fff6 	bl	8002dc8 <HAL_GetTick>
 8002ddc:	4605      	mov	r5, r0
 8002dde:	1c63      	adds	r3, r4, #1
 8002de0:	bf1e      	ittt	ne
 8002de2:	4b04      	ldrne	r3, [pc, #16]	; (8002df4 <HAL_Delay+0x20>)
 8002de4:	781b      	ldrbne	r3, [r3, #0]
 8002de6:	18e4      	addne	r4, r4, r3
 8002de8:	f7ff ffee 	bl	8002dc8 <HAL_GetTick>
 8002dec:	1b43      	subs	r3, r0, r5
 8002dee:	42a3      	cmp	r3, r4
 8002df0:	d3fa      	bcc.n	8002de8 <HAL_Delay+0x14>
 8002df2:	bd38      	pop	{r3, r4, r5, pc}
 8002df4:	20003ed4 	.word	0x20003ed4

08002df8 <HAL_NVIC_SetPriorityGrouping>:
 8002df8:	4907      	ldr	r1, [pc, #28]	; (8002e18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002dfa:	0203      	lsls	r3, r0, #8
 8002dfc:	68ca      	ldr	r2, [r1, #12]
 8002dfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e06:	0412      	lsls	r2, r2, #16
 8002e08:	0c12      	lsrs	r2, r2, #16
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e14:	60cb      	str	r3, [r1, #12]
 8002e16:	4770      	bx	lr
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <HAL_NVIC_SetPriority>:
 8002e1c:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <HAL_NVIC_SetPriority+0x5c>)
 8002e1e:	b530      	push	{r4, r5, lr}
 8002e20:	68dc      	ldr	r4, [r3, #12]
 8002e22:	f3c4 2402 	ubfx	r4, r4, #8, #3
 8002e26:	f1c4 0307 	rsb	r3, r4, #7
 8002e2a:	1d25      	adds	r5, r4, #4
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	bf28      	it	cs
 8002e30:	2304      	movcs	r3, #4
 8002e32:	2d06      	cmp	r5, #6
 8002e34:	f04f 35ff 	mov.w	r5, #4294967295
 8002e38:	bf98      	it	ls
 8002e3a:	2400      	movls	r4, #0
 8002e3c:	fa05 f303 	lsl.w	r3, r5, r3
 8002e40:	bf88      	it	hi
 8002e42:	3c03      	subhi	r4, #3
 8002e44:	ea21 0303 	bic.w	r3, r1, r3
 8002e48:	40a3      	lsls	r3, r4
 8002e4a:	fa05 f404 	lsl.w	r4, r5, r4
 8002e4e:	ea22 0204 	bic.w	r2, r2, r4
 8002e52:	2800      	cmp	r0, #0
 8002e54:	ea43 0302 	orr.w	r3, r3, r2
 8002e58:	bfac      	ite	ge
 8002e5a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8002e5e:	4a07      	ldrlt	r2, [pc, #28]	; (8002e7c <HAL_NVIC_SetPriority+0x60>)
 8002e60:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	bfab      	itete	ge
 8002e68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002e6c:	f000 000f 	andlt.w	r0, r0, #15
 8002e70:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
 8002e74:	5413      	strblt	r3, [r2, r0]
 8002e76:	bd30      	pop	{r4, r5, pc}
 8002e78:	e000ed00 	.word	0xe000ed00
 8002e7c:	e000ed14 	.word	0xe000ed14

08002e80 <HAL_NVIC_EnableIRQ>:
 8002e80:	2800      	cmp	r0, #0
 8002e82:	db08      	blt.n	8002e96 <HAL_NVIC_EnableIRQ+0x16>
 8002e84:	2301      	movs	r3, #1
 8002e86:	0942      	lsrs	r2, r0, #5
 8002e88:	f000 001f 	and.w	r0, r0, #31
 8002e8c:	fa03 f000 	lsl.w	r0, r3, r0
 8002e90:	4b01      	ldr	r3, [pc, #4]	; (8002e98 <HAL_NVIC_EnableIRQ+0x18>)
 8002e92:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002e96:	4770      	bx	lr
 8002e98:	e000e100 	.word	0xe000e100

08002e9c <HAL_SYSTICK_Config>:
 8002e9c:	3801      	subs	r0, #1
 8002e9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002ea2:	d20b      	bcs.n	8002ebc <HAL_SYSTICK_Config+0x20>
 8002ea4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002ea8:	21f0      	movs	r1, #240	; 0xf0
 8002eaa:	4a05      	ldr	r2, [pc, #20]	; (8002ec0 <HAL_SYSTICK_Config+0x24>)
 8002eac:	6158      	str	r0, [r3, #20]
 8002eae:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	6198      	str	r0, [r3, #24]
 8002eb8:	611a      	str	r2, [r3, #16]
 8002eba:	4770      	bx	lr
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	4770      	bx	lr
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <HAL_DMA_Abort>:
 8002ec4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d006      	beq.n	8002eda <HAL_DMA_Abort+0x16>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	6383      	str	r3, [r0, #56]	; 0x38
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f880 3020 	strb.w	r3, [r0, #32]
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	4770      	bx	lr
 8002eda:	6803      	ldr	r3, [r0, #0]
 8002edc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	f022 020e 	bic.w	r2, r2, #14
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	604b      	str	r3, [r1, #4]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
 8002efe:	f880 3020 	strb.w	r3, [r0, #32]
 8002f02:	4618      	mov	r0, r3
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_DMA_Abort_IT>:
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d003      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x12>
 8002f12:	2304      	movs	r3, #4
 8002f14:	6383      	str	r3, [r0, #56]	; 0x38
 8002f16:	2001      	movs	r0, #1
 8002f18:	bd10      	pop	{r4, pc}
 8002f1a:	6803      	ldr	r3, [r0, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f022 020e 	bic.w	r2, r2, #14
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_DMA_Abort_IT+0x88>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01f      	beq.n	8002f72 <HAL_DMA_Abort_IT+0x6a>
 8002f32:	3214      	adds	r2, #20
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d01e      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x6e>
 8002f38:	3214      	adds	r2, #20
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01d      	beq.n	8002f7a <HAL_DMA_Abort_IT+0x72>
 8002f3e:	3214      	adds	r2, #20
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d01d      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x78>
 8002f44:	3214      	adds	r2, #20
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01d      	beq.n	8002f86 <HAL_DMA_Abort_IT+0x7e>
 8002f4a:	3214      	adds	r2, #20
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	bf0c      	ite	eq
 8002f50:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002f54:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002f58:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_DMA_Abort_IT+0x8c>)
 8002f5a:	2400      	movs	r4, #0
 8002f5c:	6053      	str	r3, [r2, #4]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8002f64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f66:	f880 4020 	strb.w	r4, [r0, #32]
 8002f6a:	b17b      	cbz	r3, 8002f8c <HAL_DMA_Abort_IT+0x84>
 8002f6c:	4798      	blx	r3
 8002f6e:	4620      	mov	r0, r4
 8002f70:	e7d2      	b.n	8002f18 <HAL_DMA_Abort_IT+0x10>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e7f0      	b.n	8002f58 <HAL_DMA_Abort_IT+0x50>
 8002f76:	2310      	movs	r3, #16
 8002f78:	e7ee      	b.n	8002f58 <HAL_DMA_Abort_IT+0x50>
 8002f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f7e:	e7eb      	b.n	8002f58 <HAL_DMA_Abort_IT+0x50>
 8002f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f84:	e7e8      	b.n	8002f58 <HAL_DMA_Abort_IT+0x50>
 8002f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f8a:	e7e5      	b.n	8002f58 <HAL_DMA_Abort_IT+0x50>
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	e7c3      	b.n	8002f18 <HAL_DMA_Abort_IT+0x10>
 8002f90:	40020008 	.word	0x40020008
 8002f94:	40020000 	.word	0x40020000

08002f98 <HAL_GPIO_Init>:
 8002f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4616      	mov	r6, r2
 8002fa0:	4f64      	ldr	r7, [pc, #400]	; (8003134 <HAL_GPIO_Init+0x19c>)
 8002fa2:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_GPIO_Init+0x1a0>)
 8002fa4:	f8df c194 	ldr.w	ip, [pc, #404]	; 800313c <HAL_GPIO_Init+0x1a4>
 8002fa8:	f8df e194 	ldr.w	lr, [pc, #404]	; 8003140 <HAL_GPIO_Init+0x1a8>
 8002fac:	680d      	ldr	r5, [r1, #0]
 8002fae:	fa35 f406 	lsrs.w	r4, r5, r6
 8002fb2:	d102      	bne.n	8002fba <HAL_GPIO_Init+0x22>
 8002fb4:	b003      	add	sp, #12
 8002fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fba:	f04f 0801 	mov.w	r8, #1
 8002fbe:	fa08 f806 	lsl.w	r8, r8, r6
 8002fc2:	ea05 0408 	and.w	r4, r5, r8
 8002fc6:	ea38 0505 	bics.w	r5, r8, r5
 8002fca:	d17b      	bne.n	80030c4 <HAL_GPIO_Init+0x12c>
 8002fcc:	684d      	ldr	r5, [r1, #4]
 8002fce:	2d03      	cmp	r5, #3
 8002fd0:	d807      	bhi.n	8002fe2 <HAL_GPIO_Init+0x4a>
 8002fd2:	3d01      	subs	r5, #1
 8002fd4:	2d02      	cmp	r5, #2
 8002fd6:	f200 8088 	bhi.w	80030ea <HAL_GPIO_Init+0x152>
 8002fda:	e8df f005 	tbb	[pc, r5]
 8002fde:	9b96      	.short	0x9b96
 8002fe0:	a1          	.byte	0xa1
 8002fe1:	00          	.byte	0x00
 8002fe2:	2d12      	cmp	r5, #18
 8002fe4:	f000 8099 	beq.w	800311a <HAL_GPIO_Init+0x182>
 8002fe8:	d86e      	bhi.n	80030c8 <HAL_GPIO_Init+0x130>
 8002fea:	2d11      	cmp	r5, #17
 8002fec:	f000 808f 	beq.w	800310e <HAL_GPIO_Init+0x176>
 8002ff0:	2cff      	cmp	r4, #255	; 0xff
 8002ff2:	bf98      	it	ls
 8002ff4:	4682      	movls	sl, r0
 8002ff6:	f04f 090f 	mov.w	r9, #15
 8002ffa:	bf88      	it	hi
 8002ffc:	f100 0a04 	addhi.w	sl, r0, #4
 8003000:	ea4f 0586 	mov.w	r5, r6, lsl #2
 8003004:	f8da 8000 	ldr.w	r8, [sl]
 8003008:	bf88      	it	hi
 800300a:	3d20      	subhi	r5, #32
 800300c:	fa09 fb05 	lsl.w	fp, r9, r5
 8003010:	ea28 080b 	bic.w	r8, r8, fp
 8003014:	fa02 f505 	lsl.w	r5, r2, r5
 8003018:	ea48 0505 	orr.w	r5, r8, r5
 800301c:	f8ca 5000 	str.w	r5, [sl]
 8003020:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003024:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003028:	d04c      	beq.n	80030c4 <HAL_GPIO_Init+0x12c>
 800302a:	69bd      	ldr	r5, [r7, #24]
 800302c:	f026 0803 	bic.w	r8, r6, #3
 8003030:	f045 0501 	orr.w	r5, r5, #1
 8003034:	61bd      	str	r5, [r7, #24]
 8003036:	69bd      	ldr	r5, [r7, #24]
 8003038:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800303c:	f005 0501 	and.w	r5, r5, #1
 8003040:	9501      	str	r5, [sp, #4]
 8003042:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8003046:	f006 0b03 	and.w	fp, r6, #3
 800304a:	9d01      	ldr	r5, [sp, #4]
 800304c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003050:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8003054:	fa09 f90b 	lsl.w	r9, r9, fp
 8003058:	ea25 0909 	bic.w	r9, r5, r9
 800305c:	4d39      	ldr	r5, [pc, #228]	; (8003144 <HAL_GPIO_Init+0x1ac>)
 800305e:	42a8      	cmp	r0, r5
 8003060:	d062      	beq.n	8003128 <HAL_GPIO_Init+0x190>
 8003062:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003066:	42a8      	cmp	r0, r5
 8003068:	d060      	beq.n	800312c <HAL_GPIO_Init+0x194>
 800306a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800306e:	42a8      	cmp	r0, r5
 8003070:	d05e      	beq.n	8003130 <HAL_GPIO_Init+0x198>
 8003072:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003076:	42a8      	cmp	r0, r5
 8003078:	bf0c      	ite	eq
 800307a:	2503      	moveq	r5, #3
 800307c:	2504      	movne	r5, #4
 800307e:	fa05 f50b 	lsl.w	r5, r5, fp
 8003082:	ea45 0509 	orr.w	r5, r5, r9
 8003086:	f8c8 5008 	str.w	r5, [r8, #8]
 800308a:	689d      	ldr	r5, [r3, #8]
 800308c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
 8003090:	bf14      	ite	ne
 8003092:	4325      	orrne	r5, r4
 8003094:	43a5      	biceq	r5, r4
 8003096:	609d      	str	r5, [r3, #8]
 8003098:	68dd      	ldr	r5, [r3, #12]
 800309a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
 800309e:	bf14      	ite	ne
 80030a0:	4325      	orrne	r5, r4
 80030a2:	43a5      	biceq	r5, r4
 80030a4:	60dd      	str	r5, [r3, #12]
 80030a6:	685d      	ldr	r5, [r3, #4]
 80030a8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
 80030ac:	bf14      	ite	ne
 80030ae:	4325      	orrne	r5, r4
 80030b0:	43a5      	biceq	r5, r4
 80030b2:	605d      	str	r5, [r3, #4]
 80030b4:	681d      	ldr	r5, [r3, #0]
 80030b6:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
 80030ba:	bf14      	ite	ne
 80030bc:	432c      	orrne	r4, r5
 80030be:	ea25 0404 	biceq.w	r4, r5, r4
 80030c2:	601c      	str	r4, [r3, #0]
 80030c4:	3601      	adds	r6, #1
 80030c6:	e771      	b.n	8002fac <HAL_GPIO_Init+0x14>
 80030c8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8003148 <HAL_GPIO_Init+0x1b0>
 80030cc:	454d      	cmp	r5, r9
 80030ce:	d00c      	beq.n	80030ea <HAL_GPIO_Init+0x152>
 80030d0:	d817      	bhi.n	8003102 <HAL_GPIO_Init+0x16a>
 80030d2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80030d6:	454d      	cmp	r5, r9
 80030d8:	d007      	beq.n	80030ea <HAL_GPIO_Init+0x152>
 80030da:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80030de:	454d      	cmp	r5, r9
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x152>
 80030e2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80030e6:	454d      	cmp	r5, r9
 80030e8:	d182      	bne.n	8002ff0 <HAL_GPIO_Init+0x58>
 80030ea:	688a      	ldr	r2, [r1, #8]
 80030ec:	b1d2      	cbz	r2, 8003124 <HAL_GPIO_Init+0x18c>
 80030ee:	2a01      	cmp	r2, #1
 80030f0:	bf08      	it	eq
 80030f2:	f8c0 8010 	streq.w	r8, [r0, #16]
 80030f6:	f04f 0208 	mov.w	r2, #8
 80030fa:	bf18      	it	ne
 80030fc:	f8c0 8014 	strne.w	r8, [r0, #20]
 8003100:	e776      	b.n	8002ff0 <HAL_GPIO_Init+0x58>
 8003102:	4565      	cmp	r5, ip
 8003104:	d0f1      	beq.n	80030ea <HAL_GPIO_Init+0x152>
 8003106:	4575      	cmp	r5, lr
 8003108:	e7ee      	b.n	80030e8 <HAL_GPIO_Init+0x150>
 800310a:	68ca      	ldr	r2, [r1, #12]
 800310c:	e770      	b.n	8002ff0 <HAL_GPIO_Init+0x58>
 800310e:	68ca      	ldr	r2, [r1, #12]
 8003110:	3204      	adds	r2, #4
 8003112:	e76d      	b.n	8002ff0 <HAL_GPIO_Init+0x58>
 8003114:	68ca      	ldr	r2, [r1, #12]
 8003116:	3208      	adds	r2, #8
 8003118:	e76a      	b.n	8002ff0 <HAL_GPIO_Init+0x58>
 800311a:	68ca      	ldr	r2, [r1, #12]
 800311c:	320c      	adds	r2, #12
 800311e:	e767      	b.n	8002ff0 <HAL_GPIO_Init+0x58>
 8003120:	2200      	movs	r2, #0
 8003122:	e765      	b.n	8002ff0 <HAL_GPIO_Init+0x58>
 8003124:	2204      	movs	r2, #4
 8003126:	e763      	b.n	8002ff0 <HAL_GPIO_Init+0x58>
 8003128:	2500      	movs	r5, #0
 800312a:	e7a8      	b.n	800307e <HAL_GPIO_Init+0xe6>
 800312c:	2501      	movs	r5, #1
 800312e:	e7a6      	b.n	800307e <HAL_GPIO_Init+0xe6>
 8003130:	2502      	movs	r5, #2
 8003132:	e7a4      	b.n	800307e <HAL_GPIO_Init+0xe6>
 8003134:	40021000 	.word	0x40021000
 8003138:	40010400 	.word	0x40010400
 800313c:	10310000 	.word	0x10310000
 8003140:	10320000 	.word	0x10320000
 8003144:	40010800 	.word	0x40010800
 8003148:	10220000 	.word	0x10220000

0800314c <HAL_GPIO_ReadPin>:
 800314c:	6883      	ldr	r3, [r0, #8]
 800314e:	4219      	tst	r1, r3
 8003150:	bf14      	ite	ne
 8003152:	2001      	movne	r0, #1
 8003154:	2000      	moveq	r0, #0
 8003156:	4770      	bx	lr

08003158 <HAL_GPIO_WritePin>:
 8003158:	b10a      	cbz	r2, 800315e <HAL_GPIO_WritePin+0x6>
 800315a:	6101      	str	r1, [r0, #16]
 800315c:	4770      	bx	lr
 800315e:	0409      	lsls	r1, r1, #16
 8003160:	e7fb      	b.n	800315a <HAL_GPIO_WritePin+0x2>

08003162 <I2C_IsAcknowledgeFailed>:
 8003162:	6801      	ldr	r1, [r0, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	694b      	ldr	r3, [r1, #20]
 8003168:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800316c:	d010      	beq.n	8003190 <I2C_IsAcknowledgeFailed+0x2e>
 800316e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003172:	614b      	str	r3, [r1, #20]
 8003174:	2320      	movs	r3, #32
 8003176:	6302      	str	r2, [r0, #48]	; 0x30
 8003178:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800317c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8003180:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003182:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6403      	str	r3, [r0, #64]	; 0x40
 800318c:	2001      	movs	r0, #1
 800318e:	4770      	bx	lr
 8003190:	4618      	mov	r0, r3
 8003192:	4770      	bx	lr

08003194 <I2C_WaitOnFlagUntilTimeout>:
 8003194:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8003198:	4606      	mov	r6, r0
 800319a:	460f      	mov	r7, r1
 800319c:	4691      	mov	r9, r2
 800319e:	461d      	mov	r5, r3
 80031a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80031a4:	6833      	ldr	r3, [r6, #0]
 80031a6:	f1ba 0f01 	cmp.w	sl, #1
 80031aa:	bf0c      	ite	eq
 80031ac:	695c      	ldreq	r4, [r3, #20]
 80031ae:	699c      	ldrne	r4, [r3, #24]
 80031b0:	ea27 0404 	bic.w	r4, r7, r4
 80031b4:	b2a4      	uxth	r4, r4
 80031b6:	fab4 f484 	clz	r4, r4
 80031ba:	0964      	lsrs	r4, r4, #5
 80031bc:	45a1      	cmp	r9, r4
 80031be:	d001      	beq.n	80031c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031c0:	2000      	movs	r0, #0
 80031c2:	e025      	b.n	8003210 <I2C_WaitOnFlagUntilTimeout+0x7c>
 80031c4:	1c6a      	adds	r2, r5, #1
 80031c6:	d0ee      	beq.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x12>
 80031c8:	f7ff fdfe 	bl	8002dc8 <HAL_GetTick>
 80031cc:	9b08      	ldr	r3, [sp, #32]
 80031ce:	1ac0      	subs	r0, r0, r3
 80031d0:	42a8      	cmp	r0, r5
 80031d2:	d801      	bhi.n	80031d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80031d4:	2d00      	cmp	r5, #0
 80031d6:	d1e5      	bne.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0x10>
 80031d8:	6833      	ldr	r3, [r6, #0]
 80031da:	f1ba 0f01 	cmp.w	sl, #1
 80031de:	bf0c      	ite	eq
 80031e0:	695b      	ldreq	r3, [r3, #20]
 80031e2:	699b      	ldrne	r3, [r3, #24]
 80031e4:	ea27 0303 	bic.w	r3, r7, r3
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	4599      	cmp	r9, r3
 80031f2:	d1d7      	bne.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0x10>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2220      	movs	r2, #32
 80031f8:	2001      	movs	r0, #1
 80031fa:	6333      	str	r3, [r6, #48]	; 0x30
 80031fc:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
 8003200:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
 8003204:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003206:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
 800320a:	f042 0220 	orr.w	r2, r2, #32
 800320e:	6432      	str	r2, [r6, #64]	; 0x40
 8003210:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003214 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8003214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003218:	4604      	mov	r4, r0
 800321a:	460f      	mov	r7, r1
 800321c:	4616      	mov	r6, r2
 800321e:	4698      	mov	r8, r3
 8003220:	6825      	ldr	r5, [r4, #0]
 8003222:	6968      	ldr	r0, [r5, #20]
 8003224:	ea27 0000 	bic.w	r0, r7, r0
 8003228:	b280      	uxth	r0, r0
 800322a:	b1b8      	cbz	r0, 800325c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
 800322c:	696b      	ldr	r3, [r5, #20]
 800322e:	055a      	lsls	r2, r3, #21
 8003230:	d516      	bpl.n	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 8003232:	682b      	ldr	r3, [r5, #0]
 8003234:	2220      	movs	r2, #32
 8003236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800323a:	602b      	str	r3, [r5, #0]
 800323c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003240:	616b      	str	r3, [r5, #20]
 8003242:	2300      	movs	r3, #0
 8003244:	6323      	str	r3, [r4, #48]	; 0x30
 8003246:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800324a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800324e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003250:	f042 0204 	orr.w	r2, r2, #4
 8003254:	2001      	movs	r0, #1
 8003256:	6422      	str	r2, [r4, #64]	; 0x40
 8003258:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003260:	1c73      	adds	r3, r6, #1
 8003262:	d0de      	beq.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
 8003264:	f7ff fdb0 	bl	8002dc8 <HAL_GetTick>
 8003268:	eba0 0008 	sub.w	r0, r0, r8
 800326c:	42b0      	cmp	r0, r6
 800326e:	d801      	bhi.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8003270:	2e00      	cmp	r6, #0
 8003272:	d1d5      	bne.n	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	ea27 0202 	bic.w	r2, r7, r2
 800327c:	b292      	uxth	r2, r2
 800327e:	2a00      	cmp	r2, #0
 8003280:	d0ce      	beq.n	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 8003282:	2300      	movs	r3, #0
 8003284:	2220      	movs	r2, #32
 8003286:	6323      	str	r3, [r4, #48]	; 0x30
 8003288:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800328c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003290:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003292:	f042 0220 	orr.w	r2, r2, #32
 8003296:	e7dd      	b.n	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003298 <I2C_WaitOnTXEFlagUntilTimeout>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	4604      	mov	r4, r0
 800329c:	460d      	mov	r5, r1
 800329e:	4616      	mov	r6, r2
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	d501      	bpl.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x14>
 80032a8:	2000      	movs	r0, #0
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	4620      	mov	r0, r4
 80032ae:	f7ff ff58 	bl	8003162 <I2C_IsAcknowledgeFailed>
 80032b2:	b9c8      	cbnz	r0, 80032e8 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
 80032b4:	1c6a      	adds	r2, r5, #1
 80032b6:	d0f3      	beq.n	80032a0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80032b8:	f7ff fd86 	bl	8002dc8 <HAL_GetTick>
 80032bc:	1b80      	subs	r0, r0, r6
 80032be:	42a8      	cmp	r0, r5
 80032c0:	d801      	bhi.n	80032c6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80032c2:	2d00      	cmp	r5, #0
 80032c4:	d1ec      	bne.n	80032a0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80032ce:	d1e7      	bne.n	80032a0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80032d0:	2220      	movs	r2, #32
 80032d2:	6323      	str	r3, [r4, #48]	; 0x30
 80032d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80032d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80032dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80032e2:	f042 0220 	orr.w	r2, r2, #32
 80032e6:	6422      	str	r2, [r4, #64]	; 0x40
 80032e8:	2001      	movs	r0, #1
 80032ea:	e7de      	b.n	80032aa <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080032ec <I2C_RequestMemoryWrite>:
 80032ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032f0:	4615      	mov	r5, r2
 80032f2:	6802      	ldr	r2, [r0, #0]
 80032f4:	4699      	mov	r9, r3
 80032f6:	6813      	ldr	r3, [r2, #0]
 80032f8:	b085      	sub	sp, #20
 80032fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8003304:	460e      	mov	r6, r1
 8003306:	463b      	mov	r3, r7
 8003308:	2200      	movs	r2, #0
 800330a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800330e:	f8cd 8000 	str.w	r8, [sp]
 8003312:	4604      	mov	r4, r0
 8003314:	f7ff ff3e 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	b138      	cbz	r0, 800332c <I2C_RequestMemoryWrite+0x40>
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	05db      	lsls	r3, r3, #23
 8003320:	d502      	bpl.n	8003328 <I2C_RequestMemoryWrite+0x3c>
 8003322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003326:	6423      	str	r3, [r4, #64]	; 0x40
 8003328:	2003      	movs	r0, #3
 800332a:	e00a      	b.n	8003342 <I2C_RequestMemoryWrite+0x56>
 800332c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003330:	611e      	str	r6, [r3, #16]
 8003332:	463a      	mov	r2, r7
 8003334:	4643      	mov	r3, r8
 8003336:	4620      	mov	r0, r4
 8003338:	4917      	ldr	r1, [pc, #92]	; (8003398 <I2C_RequestMemoryWrite+0xac>)
 800333a:	f7ff ff6b 	bl	8003214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333e:	b118      	cbz	r0, 8003348 <I2C_RequestMemoryWrite+0x5c>
 8003340:	2001      	movs	r0, #1
 8003342:	b005      	add	sp, #20
 8003344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	9003      	str	r0, [sp, #12]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	4639      	mov	r1, r7
 8003350:	9203      	str	r2, [sp, #12]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4642      	mov	r2, r8
 8003356:	9303      	str	r3, [sp, #12]
 8003358:	4620      	mov	r0, r4
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	f7ff ff9c 	bl	8003298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	b140      	cbz	r0, 8003374 <I2C_RequestMemoryWrite+0x88>
 8003362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003364:	2b04      	cmp	r3, #4
 8003366:	bf01      	itttt	eq
 8003368:	6822      	ldreq	r2, [r4, #0]
 800336a:	6813      	ldreq	r3, [r2, #0]
 800336c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003370:	6013      	streq	r3, [r2, #0]
 8003372:	e7e5      	b.n	8003340 <I2C_RequestMemoryWrite+0x54>
 8003374:	f1b9 0f01 	cmp.w	r9, #1
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	d102      	bne.n	8003382 <I2C_RequestMemoryWrite+0x96>
 800337c:	b2ed      	uxtb	r5, r5
 800337e:	611d      	str	r5, [r3, #16]
 8003380:	e7df      	b.n	8003342 <I2C_RequestMemoryWrite+0x56>
 8003382:	0a2a      	lsrs	r2, r5, #8
 8003384:	611a      	str	r2, [r3, #16]
 8003386:	4639      	mov	r1, r7
 8003388:	4642      	mov	r2, r8
 800338a:	4620      	mov	r0, r4
 800338c:	f7ff ff84 	bl	8003298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003390:	2800      	cmp	r0, #0
 8003392:	d1e6      	bne.n	8003362 <I2C_RequestMemoryWrite+0x76>
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	e7f1      	b.n	800337c <I2C_RequestMemoryWrite+0x90>
 8003398:	00010002 	.word	0x00010002

0800339c <I2C_WaitOnBTFFlagUntilTimeout>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	4604      	mov	r4, r0
 80033a0:	460d      	mov	r5, r1
 80033a2:	4616      	mov	r6, r2
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	075b      	lsls	r3, r3, #29
 80033aa:	d501      	bpl.n	80033b0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
 80033ac:	2000      	movs	r0, #0
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	4620      	mov	r0, r4
 80033b2:	f7ff fed6 	bl	8003162 <I2C_IsAcknowledgeFailed>
 80033b6:	b9c8      	cbnz	r0, 80033ec <I2C_WaitOnBTFFlagUntilTimeout+0x50>
 80033b8:	1c6a      	adds	r2, r5, #1
 80033ba:	d0f3      	beq.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80033bc:	f7ff fd04 	bl	8002dc8 <HAL_GetTick>
 80033c0:	1b80      	subs	r0, r0, r6
 80033c2:	42a8      	cmp	r0, r5
 80033c4:	d801      	bhi.n	80033ca <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80033c6:	2d00      	cmp	r5, #0
 80033c8:	d1ec      	bne.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f013 0304 	ands.w	r3, r3, #4
 80033d2:	d1e7      	bne.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80033d4:	2220      	movs	r2, #32
 80033d6:	6323      	str	r3, [r4, #48]	; 0x30
 80033d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80033dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80033e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80033e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80033e6:	f042 0220 	orr.w	r2, r2, #32
 80033ea:	6422      	str	r2, [r4, #64]	; 0x40
 80033ec:	2001      	movs	r0, #1
 80033ee:	e7de      	b.n	80033ae <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080033f0 <HAL_I2C_Init>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	4604      	mov	r4, r0
 80033f4:	b908      	cbnz	r0, 80033fa <HAL_I2C_Init+0xa>
 80033f6:	2001      	movs	r0, #1
 80033f8:	bd70      	pop	{r4, r5, r6, pc}
 80033fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003402:	b91b      	cbnz	r3, 800340c <HAL_I2C_Init+0x1c>
 8003404:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8003408:	f7fd f964 	bl	80006d4 <HAL_I2C_MspInit>
 800340c:	2324      	movs	r3, #36	; 0x24
 800340e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f000 fb7c 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 8003430:	4a3f      	ldr	r2, [pc, #252]	; (8003530 <HAL_I2C_Init+0x140>)
 8003432:	6863      	ldr	r3, [r4, #4]
 8003434:	4293      	cmp	r3, r2
 8003436:	bf94      	ite	ls
 8003438:	4a3e      	ldrls	r2, [pc, #248]	; (8003534 <HAL_I2C_Init+0x144>)
 800343a:	4a3f      	ldrhi	r2, [pc, #252]	; (8003538 <HAL_I2C_Init+0x148>)
 800343c:	4290      	cmp	r0, r2
 800343e:	bf8c      	ite	hi
 8003440:	2200      	movhi	r2, #0
 8003442:	2201      	movls	r2, #1
 8003444:	2a00      	cmp	r2, #0
 8003446:	d1d6      	bne.n	80033f6 <HAL_I2C_Init+0x6>
 8003448:	4e39      	ldr	r6, [pc, #228]	; (8003530 <HAL_I2C_Init+0x140>)
 800344a:	493c      	ldr	r1, [pc, #240]	; (800353c <HAL_I2C_Init+0x14c>)
 800344c:	42b3      	cmp	r3, r6
 800344e:	fbb0 f1f1 	udiv	r1, r0, r1
 8003452:	bf88      	it	hi
 8003454:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8003458:	6822      	ldr	r2, [r4, #0]
 800345a:	f100 30ff 	add.w	r0, r0, #4294967295
 800345e:	6855      	ldr	r5, [r2, #4]
 8003460:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003464:	ea45 0501 	orr.w	r5, r5, r1
 8003468:	bf82      	ittt	hi
 800346a:	4371      	mulhi	r1, r6
 800346c:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8003470:	fbb1 f1f6 	udivhi	r1, r1, r6
 8003474:	6055      	str	r5, [r2, #4]
 8003476:	6a15      	ldr	r5, [r2, #32]
 8003478:	3101      	adds	r1, #1
 800347a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800347e:	4329      	orrs	r1, r5
 8003480:	6211      	str	r1, [r2, #32]
 8003482:	69d1      	ldr	r1, [r2, #28]
 8003484:	4d2a      	ldr	r5, [pc, #168]	; (8003530 <HAL_I2C_Init+0x140>)
 8003486:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800348a:	42ab      	cmp	r3, r5
 800348c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003490:	d832      	bhi.n	80034f8 <HAL_I2C_Init+0x108>
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fbb0 f0f3 	udiv	r0, r0, r3
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	f640 70fc 	movw	r0, #4092	; 0xffc
 800349e:	4203      	tst	r3, r0
 80034a0:	d042      	beq.n	8003528 <HAL_I2C_Init+0x138>
 80034a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a6:	430b      	orrs	r3, r1
 80034a8:	61d3      	str	r3, [r2, #28]
 80034aa:	6811      	ldr	r1, [r2, #0]
 80034ac:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80034b0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80034b4:	4303      	orrs	r3, r0
 80034b6:	430b      	orrs	r3, r1
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	6891      	ldr	r1, [r2, #8]
 80034bc:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80034c0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80034c4:	4303      	orrs	r3, r0
 80034c6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80034ca:	430b      	orrs	r3, r1
 80034cc:	6093      	str	r3, [r2, #8]
 80034ce:	68d1      	ldr	r1, [r2, #12]
 80034d0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80034d4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80034d8:	4303      	orrs	r3, r0
 80034da:	430b      	orrs	r3, r1
 80034dc:	60d3      	str	r3, [r2, #12]
 80034de:	6813      	ldr	r3, [r2, #0]
 80034e0:	2000      	movs	r0, #0
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	2320      	movs	r3, #32
 80034ea:	6420      	str	r0, [r4, #64]	; 0x40
 80034ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80034f0:	6320      	str	r0, [r4, #48]	; 0x30
 80034f2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 80034f6:	e77f      	b.n	80033f8 <HAL_I2C_Init+0x8>
 80034f8:	68a5      	ldr	r5, [r4, #8]
 80034fa:	b955      	cbnz	r5, 8003512 <HAL_I2C_Init+0x122>
 80034fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003500:	fbb0 f3f3 	udiv	r3, r0, r3
 8003504:	3301      	adds	r3, #1
 8003506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350a:	b17b      	cbz	r3, 800352c <HAL_I2C_Init+0x13c>
 800350c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003510:	e7c9      	b.n	80034a6 <HAL_I2C_Init+0xb6>
 8003512:	2519      	movs	r5, #25
 8003514:	436b      	muls	r3, r5
 8003516:	fbb0 f3f3 	udiv	r3, r0, r3
 800351a:	3301      	adds	r3, #1
 800351c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003520:	b123      	cbz	r3, 800352c <HAL_I2C_Init+0x13c>
 8003522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003526:	e7be      	b.n	80034a6 <HAL_I2C_Init+0xb6>
 8003528:	2304      	movs	r3, #4
 800352a:	e7bc      	b.n	80034a6 <HAL_I2C_Init+0xb6>
 800352c:	2301      	movs	r3, #1
 800352e:	e7ba      	b.n	80034a6 <HAL_I2C_Init+0xb6>
 8003530:	000186a0 	.word	0x000186a0
 8003534:	001e847f 	.word	0x001e847f
 8003538:	003d08ff 	.word	0x003d08ff
 800353c:	000f4240 	.word	0x000f4240

08003540 <HAL_I2C_Mem_Write>:
 8003540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003544:	4604      	mov	r4, r0
 8003546:	4699      	mov	r9, r3
 8003548:	460f      	mov	r7, r1
 800354a:	4690      	mov	r8, r2
 800354c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800354e:	f7ff fc3b 	bl	8002dc8 <HAL_GetTick>
 8003552:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003556:	4605      	mov	r5, r0
 8003558:	2b20      	cmp	r3, #32
 800355a:	d003      	beq.n	8003564 <HAL_I2C_Mem_Write+0x24>
 800355c:	2002      	movs	r0, #2
 800355e:	b003      	add	sp, #12
 8003560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003564:	9000      	str	r0, [sp, #0]
 8003566:	2319      	movs	r3, #25
 8003568:	2201      	movs	r2, #1
 800356a:	4620      	mov	r0, r4
 800356c:	493a      	ldr	r1, [pc, #232]	; (8003658 <HAL_I2C_Mem_Write+0x118>)
 800356e:	f7ff fe11 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8003572:	2800      	cmp	r0, #0
 8003574:	d1f2      	bne.n	800355c <HAL_I2C_Mem_Write+0x1c>
 8003576:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d0ee      	beq.n	800355c <HAL_I2C_Mem_Write+0x1c>
 800357e:	2301      	movs	r3, #1
 8003580:	6820      	ldr	r0, [r4, #0]
 8003582:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8003586:	6803      	ldr	r3, [r0, #0]
 8003588:	4642      	mov	r2, r8
 800358a:	07d9      	lsls	r1, r3, #31
 800358c:	bf58      	it	pl
 800358e:	6803      	ldrpl	r3, [r0, #0]
 8003590:	4639      	mov	r1, r7
 8003592:	bf5c      	itt	pl
 8003594:	f043 0301 	orrpl.w	r3, r3, #1
 8003598:	6003      	strpl	r3, [r0, #0]
 800359a:	6803      	ldr	r3, [r0, #0]
 800359c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035a0:	6003      	str	r3, [r0, #0]
 80035a2:	2321      	movs	r3, #33	; 0x21
 80035a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80035a8:	2340      	movs	r3, #64	; 0x40
 80035aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80035ae:	2300      	movs	r3, #0
 80035b0:	6423      	str	r3, [r4, #64]	; 0x40
 80035b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035b4:	4620      	mov	r0, r4
 80035b6:	6263      	str	r3, [r4, #36]	; 0x24
 80035b8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80035bc:	e9cd 6500 	strd	r6, r5, [sp]
 80035c0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80035c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035c4:	8523      	strh	r3, [r4, #40]	; 0x28
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_I2C_Mem_Write+0x11c>)
 80035c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035ca:	464b      	mov	r3, r9
 80035cc:	f7ff fe8e 	bl	80032ec <I2C_RequestMemoryWrite>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d02a      	beq.n	800362a <HAL_I2C_Mem_Write+0xea>
 80035d4:	2001      	movs	r0, #1
 80035d6:	e7c2      	b.n	800355e <HAL_I2C_Mem_Write+0x1e>
 80035d8:	f7ff fe5e 	bl	8003298 <I2C_WaitOnTXEFlagUntilTimeout>
 80035dc:	b140      	cbz	r0, 80035f0 <HAL_I2C_Mem_Write+0xb0>
 80035de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	bf01      	itttt	eq
 80035e4:	6822      	ldreq	r2, [r4, #0]
 80035e6:	6813      	ldreq	r3, [r2, #0]
 80035e8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80035ec:	6013      	streq	r3, [r2, #0]
 80035ee:	e7f1      	b.n	80035d4 <HAL_I2C_Mem_Write+0x94>
 80035f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035f2:	6827      	ldr	r7, [r4, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80035fa:	6139      	str	r1, [r7, #16]
 80035fc:	6262      	str	r2, [r4, #36]	; 0x24
 80035fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003600:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8003602:	3a01      	subs	r2, #1
 8003604:	b292      	uxth	r2, r2
 8003606:	8562      	strh	r2, [r4, #42]	; 0x2a
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	1e48      	subs	r0, r1, #1
 800360c:	b280      	uxth	r0, r0
 800360e:	0752      	lsls	r2, r2, #29
 8003610:	8520      	strh	r0, [r4, #40]	; 0x28
 8003612:	d50a      	bpl.n	800362a <HAL_I2C_Mem_Write+0xea>
 8003614:	b148      	cbz	r0, 800362a <HAL_I2C_Mem_Write+0xea>
 8003616:	785a      	ldrb	r2, [r3, #1]
 8003618:	3302      	adds	r3, #2
 800361a:	613a      	str	r2, [r7, #16]
 800361c:	6263      	str	r3, [r4, #36]	; 0x24
 800361e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003620:	3902      	subs	r1, #2
 8003622:	3b01      	subs	r3, #1
 8003624:	b29b      	uxth	r3, r3
 8003626:	8521      	strh	r1, [r4, #40]	; 0x28
 8003628:	8563      	strh	r3, [r4, #42]	; 0x2a
 800362a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800362c:	462a      	mov	r2, r5
 800362e:	4631      	mov	r1, r6
 8003630:	4620      	mov	r0, r4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1d0      	bne.n	80035d8 <HAL_I2C_Mem_Write+0x98>
 8003636:	f7ff feb1 	bl	800339c <I2C_WaitOnBTFFlagUntilTimeout>
 800363a:	2800      	cmp	r0, #0
 800363c:	d1cf      	bne.n	80035de <HAL_I2C_Mem_Write+0x9e>
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	6813      	ldr	r3, [r2, #0]
 8003642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	2320      	movs	r3, #32
 800364a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800364e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003652:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 8003656:	e782      	b.n	800355e <HAL_I2C_Mem_Write+0x1e>
 8003658:	00100002 	.word	0x00100002
 800365c:	ffff0000 	.word	0xffff0000

08003660 <HAL_PWR_EnableBkUpAccess>:
 8003660:	2201      	movs	r2, #1
 8003662:	4b01      	ldr	r3, [pc, #4]	; (8003668 <HAL_PWR_EnableBkUpAccess+0x8>)
 8003664:	621a      	str	r2, [r3, #32]
 8003666:	4770      	bx	lr
 8003668:	420e0000 	.word	0x420e0000

0800366c <HAL_RCC_OscConfig>:
 800366c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003670:	4605      	mov	r5, r0
 8003672:	b338      	cbz	r0, 80036c4 <HAL_RCC_OscConfig+0x58>
 8003674:	6803      	ldr	r3, [r0, #0]
 8003676:	07db      	lsls	r3, r3, #31
 8003678:	d410      	bmi.n	800369c <HAL_RCC_OscConfig+0x30>
 800367a:	682b      	ldr	r3, [r5, #0]
 800367c:	079f      	lsls	r7, r3, #30
 800367e:	d45e      	bmi.n	800373e <HAL_RCC_OscConfig+0xd2>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	0719      	lsls	r1, r3, #28
 8003684:	f100 8095 	bmi.w	80037b2 <HAL_RCC_OscConfig+0x146>
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	075a      	lsls	r2, r3, #29
 800368c:	f100 80c1 	bmi.w	8003812 <HAL_RCC_OscConfig+0x1a6>
 8003690:	69e8      	ldr	r0, [r5, #28]
 8003692:	2800      	cmp	r0, #0
 8003694:	f040 812c 	bne.w	80038f0 <HAL_RCC_OscConfig+0x284>
 8003698:	2000      	movs	r0, #0
 800369a:	e029      	b.n	80036f0 <HAL_RCC_OscConfig+0x84>
 800369c:	4c90      	ldr	r4, [pc, #576]	; (80038e0 <HAL_RCC_OscConfig+0x274>)
 800369e:	6863      	ldr	r3, [r4, #4]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d007      	beq.n	80036b8 <HAL_RCC_OscConfig+0x4c>
 80036a8:	6863      	ldr	r3, [r4, #4]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d10a      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5c>
 80036b2:	6863      	ldr	r3, [r4, #4]
 80036b4:	03de      	lsls	r6, r3, #15
 80036b6:	d507      	bpl.n	80036c8 <HAL_RCC_OscConfig+0x5c>
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	039c      	lsls	r4, r3, #14
 80036bc:	d5dd      	bpl.n	800367a <HAL_RCC_OscConfig+0xe>
 80036be:	686b      	ldr	r3, [r5, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1da      	bne.n	800367a <HAL_RCC_OscConfig+0xe>
 80036c4:	2001      	movs	r0, #1
 80036c6:	e013      	b.n	80036f0 <HAL_RCC_OscConfig+0x84>
 80036c8:	686b      	ldr	r3, [r5, #4]
 80036ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ce:	d112      	bne.n	80036f6 <HAL_RCC_OscConfig+0x8a>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	f7ff fb76 	bl	8002dc8 <HAL_GetTick>
 80036dc:	4606      	mov	r6, r0
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	0398      	lsls	r0, r3, #14
 80036e2:	d4ca      	bmi.n	800367a <HAL_RCC_OscConfig+0xe>
 80036e4:	f7ff fb70 	bl	8002dc8 <HAL_GetTick>
 80036e8:	1b80      	subs	r0, r0, r6
 80036ea:	2864      	cmp	r0, #100	; 0x64
 80036ec:	d9f7      	bls.n	80036de <HAL_RCC_OscConfig+0x72>
 80036ee:	2003      	movs	r0, #3
 80036f0:	b002      	add	sp, #8
 80036f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036f6:	b99b      	cbnz	r3, 8003720 <HAL_RCC_OscConfig+0xb4>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003706:	6023      	str	r3, [r4, #0]
 8003708:	f7ff fb5e 	bl	8002dc8 <HAL_GetTick>
 800370c:	4606      	mov	r6, r0
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	0399      	lsls	r1, r3, #14
 8003712:	d5b2      	bpl.n	800367a <HAL_RCC_OscConfig+0xe>
 8003714:	f7ff fb58 	bl	8002dc8 <HAL_GetTick>
 8003718:	1b80      	subs	r0, r0, r6
 800371a:	2864      	cmp	r0, #100	; 0x64
 800371c:	d9f7      	bls.n	800370e <HAL_RCC_OscConfig+0xa2>
 800371e:	e7e6      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	d103      	bne.n	8003730 <HAL_RCC_OscConfig+0xc4>
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	e7cf      	b.n	80036d0 <HAL_RCC_OscConfig+0x64>
 8003730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373c:	e7cb      	b.n	80036d6 <HAL_RCC_OscConfig+0x6a>
 800373e:	4c68      	ldr	r4, [pc, #416]	; (80038e0 <HAL_RCC_OscConfig+0x274>)
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	f013 0f0c 	tst.w	r3, #12
 8003746:	d007      	beq.n	8003758 <HAL_RCC_OscConfig+0xec>
 8003748:	6863      	ldr	r3, [r4, #4]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d110      	bne.n	8003774 <HAL_RCC_OscConfig+0x108>
 8003752:	6863      	ldr	r3, [r4, #4]
 8003754:	03da      	lsls	r2, r3, #15
 8003756:	d40d      	bmi.n	8003774 <HAL_RCC_OscConfig+0x108>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	079b      	lsls	r3, r3, #30
 800375c:	d502      	bpl.n	8003764 <HAL_RCC_OscConfig+0xf8>
 800375e:	692b      	ldr	r3, [r5, #16]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d1af      	bne.n	80036c4 <HAL_RCC_OscConfig+0x58>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	696a      	ldr	r2, [r5, #20]
 8003768:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800376c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	e785      	b.n	8003680 <HAL_RCC_OscConfig+0x14>
 8003774:	692a      	ldr	r2, [r5, #16]
 8003776:	4b5b      	ldr	r3, [pc, #364]	; (80038e4 <HAL_RCC_OscConfig+0x278>)
 8003778:	b16a      	cbz	r2, 8003796 <HAL_RCC_OscConfig+0x12a>
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f7ff fb23 	bl	8002dc8 <HAL_GetTick>
 8003782:	4606      	mov	r6, r0
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	079f      	lsls	r7, r3, #30
 8003788:	d4ec      	bmi.n	8003764 <HAL_RCC_OscConfig+0xf8>
 800378a:	f7ff fb1d 	bl	8002dc8 <HAL_GetTick>
 800378e:	1b80      	subs	r0, r0, r6
 8003790:	2802      	cmp	r0, #2
 8003792:	d9f7      	bls.n	8003784 <HAL_RCC_OscConfig+0x118>
 8003794:	e7ab      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	f7ff fb16 	bl	8002dc8 <HAL_GetTick>
 800379c:	4606      	mov	r6, r0
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	0798      	lsls	r0, r3, #30
 80037a2:	f57f af6d 	bpl.w	8003680 <HAL_RCC_OscConfig+0x14>
 80037a6:	f7ff fb0f 	bl	8002dc8 <HAL_GetTick>
 80037aa:	1b80      	subs	r0, r0, r6
 80037ac:	2802      	cmp	r0, #2
 80037ae:	d9f6      	bls.n	800379e <HAL_RCC_OscConfig+0x132>
 80037b0:	e79d      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 80037b2:	69aa      	ldr	r2, [r5, #24]
 80037b4:	4e4a      	ldr	r6, [pc, #296]	; (80038e0 <HAL_RCC_OscConfig+0x274>)
 80037b6:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <HAL_RCC_OscConfig+0x278>)
 80037b8:	b1e2      	cbz	r2, 80037f4 <HAL_RCC_OscConfig+0x188>
 80037ba:	2201      	movs	r2, #1
 80037bc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 80037c0:	f7ff fb02 	bl	8002dc8 <HAL_GetTick>
 80037c4:	4604      	mov	r4, r0
 80037c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80037c8:	079b      	lsls	r3, r3, #30
 80037ca:	d50d      	bpl.n	80037e8 <HAL_RCC_OscConfig+0x17c>
 80037cc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80037d0:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <HAL_RCC_OscConfig+0x27c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	bf00      	nop
 80037dc:	9b01      	ldr	r3, [sp, #4]
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	9201      	str	r2, [sp, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f9      	bne.n	80037da <HAL_RCC_OscConfig+0x16e>
 80037e6:	e74f      	b.n	8003688 <HAL_RCC_OscConfig+0x1c>
 80037e8:	f7ff faee 	bl	8002dc8 <HAL_GetTick>
 80037ec:	1b00      	subs	r0, r0, r4
 80037ee:	2802      	cmp	r0, #2
 80037f0:	d9e9      	bls.n	80037c6 <HAL_RCC_OscConfig+0x15a>
 80037f2:	e77c      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 80037f4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 80037f8:	f7ff fae6 	bl	8002dc8 <HAL_GetTick>
 80037fc:	4604      	mov	r4, r0
 80037fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003800:	079f      	lsls	r7, r3, #30
 8003802:	f57f af41 	bpl.w	8003688 <HAL_RCC_OscConfig+0x1c>
 8003806:	f7ff fadf 	bl	8002dc8 <HAL_GetTick>
 800380a:	1b00      	subs	r0, r0, r4
 800380c:	2802      	cmp	r0, #2
 800380e:	d9f6      	bls.n	80037fe <HAL_RCC_OscConfig+0x192>
 8003810:	e76d      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 8003812:	4c33      	ldr	r4, [pc, #204]	; (80038e0 <HAL_RCC_OscConfig+0x274>)
 8003814:	69e3      	ldr	r3, [r4, #28]
 8003816:	00d8      	lsls	r0, r3, #3
 8003818:	d424      	bmi.n	8003864 <HAL_RCC_OscConfig+0x1f8>
 800381a:	2701      	movs	r7, #1
 800381c:	69e3      	ldr	r3, [r4, #28]
 800381e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003822:	61e3      	str	r3, [r4, #28]
 8003824:	69e3      	ldr	r3, [r4, #28]
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	9b00      	ldr	r3, [sp, #0]
 800382e:	4e2f      	ldr	r6, [pc, #188]	; (80038ec <HAL_RCC_OscConfig+0x280>)
 8003830:	6833      	ldr	r3, [r6, #0]
 8003832:	05d9      	lsls	r1, r3, #23
 8003834:	d518      	bpl.n	8003868 <HAL_RCC_OscConfig+0x1fc>
 8003836:	68eb      	ldr	r3, [r5, #12]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d126      	bne.n	800388a <HAL_RCC_OscConfig+0x21e>
 800383c:	6a23      	ldr	r3, [r4, #32]
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6223      	str	r3, [r4, #32]
 8003844:	f7ff fac0 	bl	8002dc8 <HAL_GetTick>
 8003848:	f241 3888 	movw	r8, #5000	; 0x1388
 800384c:	4606      	mov	r6, r0
 800384e:	6a23      	ldr	r3, [r4, #32]
 8003850:	079b      	lsls	r3, r3, #30
 8003852:	d53f      	bpl.n	80038d4 <HAL_RCC_OscConfig+0x268>
 8003854:	2f00      	cmp	r7, #0
 8003856:	f43f af1b 	beq.w	8003690 <HAL_RCC_OscConfig+0x24>
 800385a:	69e3      	ldr	r3, [r4, #28]
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003860:	61e3      	str	r3, [r4, #28]
 8003862:	e715      	b.n	8003690 <HAL_RCC_OscConfig+0x24>
 8003864:	2700      	movs	r7, #0
 8003866:	e7e2      	b.n	800382e <HAL_RCC_OscConfig+0x1c2>
 8003868:	6833      	ldr	r3, [r6, #0]
 800386a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386e:	6033      	str	r3, [r6, #0]
 8003870:	f7ff faaa 	bl	8002dc8 <HAL_GetTick>
 8003874:	4680      	mov	r8, r0
 8003876:	6833      	ldr	r3, [r6, #0]
 8003878:	05da      	lsls	r2, r3, #23
 800387a:	d4dc      	bmi.n	8003836 <HAL_RCC_OscConfig+0x1ca>
 800387c:	f7ff faa4 	bl	8002dc8 <HAL_GetTick>
 8003880:	eba0 0008 	sub.w	r0, r0, r8
 8003884:	2864      	cmp	r0, #100	; 0x64
 8003886:	d9f6      	bls.n	8003876 <HAL_RCC_OscConfig+0x20a>
 8003888:	e731      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 800388a:	b9ab      	cbnz	r3, 80038b8 <HAL_RCC_OscConfig+0x24c>
 800388c:	6a23      	ldr	r3, [r4, #32]
 800388e:	f241 3888 	movw	r8, #5000	; 0x1388
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6223      	str	r3, [r4, #32]
 8003898:	6a23      	ldr	r3, [r4, #32]
 800389a:	f023 0304 	bic.w	r3, r3, #4
 800389e:	6223      	str	r3, [r4, #32]
 80038a0:	f7ff fa92 	bl	8002dc8 <HAL_GetTick>
 80038a4:	4606      	mov	r6, r0
 80038a6:	6a23      	ldr	r3, [r4, #32]
 80038a8:	0798      	lsls	r0, r3, #30
 80038aa:	d5d3      	bpl.n	8003854 <HAL_RCC_OscConfig+0x1e8>
 80038ac:	f7ff fa8c 	bl	8002dc8 <HAL_GetTick>
 80038b0:	1b80      	subs	r0, r0, r6
 80038b2:	4540      	cmp	r0, r8
 80038b4:	d9f7      	bls.n	80038a6 <HAL_RCC_OscConfig+0x23a>
 80038b6:	e71a      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 80038b8:	2b05      	cmp	r3, #5
 80038ba:	6a23      	ldr	r3, [r4, #32]
 80038bc:	d103      	bne.n	80038c6 <HAL_RCC_OscConfig+0x25a>
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	6223      	str	r3, [r4, #32]
 80038c4:	e7ba      	b.n	800383c <HAL_RCC_OscConfig+0x1d0>
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	6223      	str	r3, [r4, #32]
 80038cc:	6a23      	ldr	r3, [r4, #32]
 80038ce:	f023 0304 	bic.w	r3, r3, #4
 80038d2:	e7b6      	b.n	8003842 <HAL_RCC_OscConfig+0x1d6>
 80038d4:	f7ff fa78 	bl	8002dc8 <HAL_GetTick>
 80038d8:	1b80      	subs	r0, r0, r6
 80038da:	4540      	cmp	r0, r8
 80038dc:	d9b7      	bls.n	800384e <HAL_RCC_OscConfig+0x1e2>
 80038de:	e706      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	42420000 	.word	0x42420000
 80038e8:	20003ed0 	.word	0x20003ed0
 80038ec:	40007000 	.word	0x40007000
 80038f0:	4c2a      	ldr	r4, [pc, #168]	; (800399c <HAL_RCC_OscConfig+0x330>)
 80038f2:	6863      	ldr	r3, [r4, #4]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d03e      	beq.n	800397a <HAL_RCC_OscConfig+0x30e>
 80038fc:	2200      	movs	r2, #0
 80038fe:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <HAL_RCC_OscConfig+0x334>)
 8003900:	2802      	cmp	r0, #2
 8003902:	661a      	str	r2, [r3, #96]	; 0x60
 8003904:	d12c      	bne.n	8003960 <HAL_RCC_OscConfig+0x2f4>
 8003906:	f7ff fa5f 	bl	8002dc8 <HAL_GetTick>
 800390a:	4606      	mov	r6, r0
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	0199      	lsls	r1, r3, #6
 8003910:	d420      	bmi.n	8003954 <HAL_RCC_OscConfig+0x2e8>
 8003912:	6a2b      	ldr	r3, [r5, #32]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d105      	bne.n	8003926 <HAL_RCC_OscConfig+0x2ba>
 800391a:	6862      	ldr	r2, [r4, #4]
 800391c:	68a9      	ldr	r1, [r5, #8]
 800391e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003922:	430a      	orrs	r2, r1
 8003924:	6062      	str	r2, [r4, #4]
 8003926:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003928:	6862      	ldr	r2, [r4, #4]
 800392a:	430b      	orrs	r3, r1
 800392c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003930:	4313      	orrs	r3, r2
 8003932:	2201      	movs	r2, #1
 8003934:	6063      	str	r3, [r4, #4]
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <HAL_RCC_OscConfig+0x334>)
 8003938:	661a      	str	r2, [r3, #96]	; 0x60
 800393a:	f7ff fa45 	bl	8002dc8 <HAL_GetTick>
 800393e:	4605      	mov	r5, r0
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	019a      	lsls	r2, r3, #6
 8003944:	f53f aea8 	bmi.w	8003698 <HAL_RCC_OscConfig+0x2c>
 8003948:	f7ff fa3e 	bl	8002dc8 <HAL_GetTick>
 800394c:	1b40      	subs	r0, r0, r5
 800394e:	2802      	cmp	r0, #2
 8003950:	d9f6      	bls.n	8003940 <HAL_RCC_OscConfig+0x2d4>
 8003952:	e6cc      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 8003954:	f7ff fa38 	bl	8002dc8 <HAL_GetTick>
 8003958:	1b80      	subs	r0, r0, r6
 800395a:	2802      	cmp	r0, #2
 800395c:	d9d6      	bls.n	800390c <HAL_RCC_OscConfig+0x2a0>
 800395e:	e6c6      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 8003960:	f7ff fa32 	bl	8002dc8 <HAL_GetTick>
 8003964:	4605      	mov	r5, r0
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	f57f ae95 	bpl.w	8003698 <HAL_RCC_OscConfig+0x2c>
 800396e:	f7ff fa2b 	bl	8002dc8 <HAL_GetTick>
 8003972:	1b40      	subs	r0, r0, r5
 8003974:	2802      	cmp	r0, #2
 8003976:	d9f6      	bls.n	8003966 <HAL_RCC_OscConfig+0x2fa>
 8003978:	e6b9      	b.n	80036ee <HAL_RCC_OscConfig+0x82>
 800397a:	2801      	cmp	r0, #1
 800397c:	f43f aeb8 	beq.w	80036f0 <HAL_RCC_OscConfig+0x84>
 8003980:	6863      	ldr	r3, [r4, #4]
 8003982:	6a2a      	ldr	r2, [r5, #32]
 8003984:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003988:	4291      	cmp	r1, r2
 800398a:	f47f ae9b 	bne.w	80036c4 <HAL_RCC_OscConfig+0x58>
 800398e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003990:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003994:	4293      	cmp	r3, r2
 8003996:	f43f ae7f 	beq.w	8003698 <HAL_RCC_OscConfig+0x2c>
 800399a:	e693      	b.n	80036c4 <HAL_RCC_OscConfig+0x58>
 800399c:	40021000 	.word	0x40021000
 80039a0:	42420000 	.word	0x42420000

080039a4 <HAL_RCC_GetSysClockFreq>:
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_RCC_GetSysClockFreq+0x38>)
 80039a6:	6853      	ldr	r3, [r2, #4]
 80039a8:	f003 010c 	and.w	r1, r3, #12
 80039ac:	2908      	cmp	r1, #8
 80039ae:	d112      	bne.n	80039d6 <HAL_RCC_GetSysClockFreq+0x32>
 80039b0:	480b      	ldr	r0, [pc, #44]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039b2:	f3c3 4183 	ubfx	r1, r3, #18, #4
 80039b6:	03db      	lsls	r3, r3, #15
 80039b8:	5c40      	ldrb	r0, [r0, r1]
 80039ba:	d509      	bpl.n	80039d0 <HAL_RCC_GetSysClockFreq+0x2c>
 80039bc:	6853      	ldr	r3, [r2, #4]
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x40>)
 80039c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80039c4:	4350      	muls	r0, r2
 80039c6:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x44>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80039ce:	4770      	bx	lr
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_GetSysClockFreq+0x48>)
 80039d2:	4358      	muls	r0, r3
 80039d4:	4770      	bx	lr
 80039d6:	4803      	ldr	r0, [pc, #12]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x40>)
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	08004bf9 	.word	0x08004bf9
 80039e4:	007a1200 	.word	0x007a1200
 80039e8:	08004c09 	.word	0x08004c09
 80039ec:	003d0900 	.word	0x003d0900

080039f0 <HAL_RCC_ClockConfig>:
 80039f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f4:	460d      	mov	r5, r1
 80039f6:	4604      	mov	r4, r0
 80039f8:	b910      	cbnz	r0, 8003a00 <HAL_RCC_ClockConfig+0x10>
 80039fa:	2001      	movs	r0, #1
 80039fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a00:	4a44      	ldr	r2, [pc, #272]	; (8003b14 <HAL_RCC_ClockConfig+0x124>)
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	d328      	bcc.n	8003a5e <HAL_RCC_ClockConfig+0x6e>
 8003a0c:	6821      	ldr	r1, [r4, #0]
 8003a0e:	078e      	lsls	r6, r1, #30
 8003a10:	d430      	bmi.n	8003a74 <HAL_RCC_ClockConfig+0x84>
 8003a12:	07ca      	lsls	r2, r1, #31
 8003a14:	d443      	bmi.n	8003a9e <HAL_RCC_ClockConfig+0xae>
 8003a16:	4a3f      	ldr	r2, [pc, #252]	; (8003b14 <HAL_RCC_ClockConfig+0x124>)
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	42ab      	cmp	r3, r5
 8003a20:	d865      	bhi.n	8003aee <HAL_RCC_ClockConfig+0xfe>
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	4d3c      	ldr	r5, [pc, #240]	; (8003b18 <HAL_RCC_ClockConfig+0x128>)
 8003a26:	f012 0f04 	tst.w	r2, #4
 8003a2a:	d16c      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x116>
 8003a2c:	0713      	lsls	r3, r2, #28
 8003a2e:	d506      	bpl.n	8003a3e <HAL_RCC_ClockConfig+0x4e>
 8003a30:	686b      	ldr	r3, [r5, #4]
 8003a32:	6922      	ldr	r2, [r4, #16]
 8003a34:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003a38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a3c:	606b      	str	r3, [r5, #4]
 8003a3e:	f7ff ffb1 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8003a42:	686b      	ldr	r3, [r5, #4]
 8003a44:	4a35      	ldr	r2, [pc, #212]	; (8003b1c <HAL_RCC_ClockConfig+0x12c>)
 8003a46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a4a:	5cd3      	ldrb	r3, [r2, r3]
 8003a4c:	40d8      	lsrs	r0, r3
 8003a4e:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <HAL_RCC_ClockConfig+0x130>)
 8003a50:	6018      	str	r0, [r3, #0]
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_RCC_ClockConfig+0x134>)
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	f7ff f975 	bl	8002d44 <HAL_InitTick>
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	e7ce      	b.n	80039fc <HAL_RCC_ClockConfig+0xc>
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	f023 0307 	bic.w	r3, r3, #7
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	6813      	ldr	r3, [r2, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	428b      	cmp	r3, r1
 8003a70:	d1c3      	bne.n	80039fa <HAL_RCC_ClockConfig+0xa>
 8003a72:	e7cb      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1c>
 8003a74:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <HAL_RCC_ClockConfig+0x128>)
 8003a76:	f011 0f04 	tst.w	r1, #4
 8003a7a:	bf1e      	ittt	ne
 8003a7c:	685a      	ldrne	r2, [r3, #4]
 8003a7e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003a82:	605a      	strne	r2, [r3, #4]
 8003a84:	0708      	lsls	r0, r1, #28
 8003a86:	bf42      	ittt	mi
 8003a88:	685a      	ldrmi	r2, [r3, #4]
 8003a8a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003a8e:	605a      	strmi	r2, [r3, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	68a0      	ldr	r0, [r4, #8]
 8003a94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a98:	4302      	orrs	r2, r0
 8003a9a:	605a      	str	r2, [r3, #4]
 8003a9c:	e7b9      	b.n	8003a12 <HAL_RCC_ClockConfig+0x22>
 8003a9e:	6862      	ldr	r2, [r4, #4]
 8003aa0:	4e1d      	ldr	r6, [pc, #116]	; (8003b18 <HAL_RCC_ClockConfig+0x128>)
 8003aa2:	2a01      	cmp	r2, #1
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	d11a      	bne.n	8003ade <HAL_RCC_ClockConfig+0xee>
 8003aa8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003aac:	d0a5      	beq.n	80039fa <HAL_RCC_ClockConfig+0xa>
 8003aae:	6873      	ldr	r3, [r6, #4]
 8003ab0:	f241 3888 	movw	r8, #5000	; 0x1388
 8003ab4:	f023 0303 	bic.w	r3, r3, #3
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	6073      	str	r3, [r6, #4]
 8003abc:	f7ff f984 	bl	8002dc8 <HAL_GetTick>
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	6873      	ldr	r3, [r6, #4]
 8003ac4:	6862      	ldr	r2, [r4, #4]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ace:	d0a2      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x26>
 8003ad0:	f7ff f97a 	bl	8002dc8 <HAL_GetTick>
 8003ad4:	1bc0      	subs	r0, r0, r7
 8003ad6:	4540      	cmp	r0, r8
 8003ad8:	d9f3      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0xd2>
 8003ada:	2003      	movs	r0, #3
 8003adc:	e78e      	b.n	80039fc <HAL_RCC_ClockConfig+0xc>
 8003ade:	2a02      	cmp	r2, #2
 8003ae0:	d102      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xf8>
 8003ae2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ae6:	e7e1      	b.n	8003aac <HAL_RCC_ClockConfig+0xbc>
 8003ae8:	f013 0f02 	tst.w	r3, #2
 8003aec:	e7de      	b.n	8003aac <HAL_RCC_ClockConfig+0xbc>
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	f023 0307 	bic.w	r3, r3, #7
 8003af4:	432b      	orrs	r3, r5
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	6813      	ldr	r3, [r2, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	42ab      	cmp	r3, r5
 8003b00:	f47f af7b 	bne.w	80039fa <HAL_RCC_ClockConfig+0xa>
 8003b04:	e78d      	b.n	8003a22 <HAL_RCC_ClockConfig+0x32>
 8003b06:	686b      	ldr	r3, [r5, #4]
 8003b08:	68e1      	ldr	r1, [r4, #12]
 8003b0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	606b      	str	r3, [r5, #4]
 8003b12:	e78b      	b.n	8003a2c <HAL_RCC_ClockConfig+0x3c>
 8003b14:	40022000 	.word	0x40022000
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	08004be1 	.word	0x08004be1
 8003b20:	20003ed0 	.word	0x20003ed0
 8003b24:	20003ed8 	.word	0x20003ed8

08003b28 <HAL_RCC_GetPCLK1Freq>:
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003b2a:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b36:	6810      	ldr	r0, [r2, #0]
 8003b38:	40d8      	lsrs	r0, r3
 8003b3a:	4770      	bx	lr
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	08004bf1 	.word	0x08004bf1
 8003b44:	20003ed0 	.word	0x20003ed0

08003b48 <HAL_RCC_GetPCLK2Freq>:
 8003b48:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x14>)
 8003b4a:	4a05      	ldr	r2, [pc, #20]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003b52:	5cd3      	ldrb	r3, [r2, r3]
 8003b54:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003b56:	6810      	ldr	r0, [r2, #0]
 8003b58:	40d8      	lsrs	r0, r3
 8003b5a:	4770      	bx	lr
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	08004bf1 	.word	0x08004bf1
 8003b64:	20003ed0 	.word	0x20003ed0

08003b68 <HAL_RCCEx_PeriphCLKConfig>:
 8003b68:	6803      	ldr	r3, [r0, #0]
 8003b6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003b6e:	07d9      	lsls	r1, r3, #31
 8003b70:	4605      	mov	r5, r0
 8003b72:	d520      	bpl.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003b74:	4c36      	ldr	r4, [pc, #216]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b76:	69e3      	ldr	r3, [r4, #28]
 8003b78:	00da      	lsls	r2, r3, #3
 8003b7a:	d432      	bmi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b7c:	2601      	movs	r6, #1
 8003b7e:	69e3      	ldr	r3, [r4, #28]
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b84:	61e3      	str	r3, [r4, #28]
 8003b86:	69e3      	ldr	r3, [r4, #28]
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	9b01      	ldr	r3, [sp, #4]
 8003b90:	4f30      	ldr	r7, [pc, #192]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	05db      	lsls	r3, r3, #23
 8003b96:	d526      	bpl.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003b98:	6a23      	ldr	r3, [r4, #32]
 8003b9a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003b9e:	d136      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8003ba0:	6a23      	ldr	r3, [r4, #32]
 8003ba2:	686a      	ldr	r2, [r5, #4]
 8003ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	6223      	str	r3, [r4, #32]
 8003bac:	b11e      	cbz	r6, 8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003bae:	69e3      	ldr	r3, [r4, #28]
 8003bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	61e3      	str	r3, [r4, #28]
 8003bb6:	6828      	ldr	r0, [r5, #0]
 8003bb8:	0783      	lsls	r3, r0, #30
 8003bba:	d506      	bpl.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003bbc:	4924      	ldr	r1, [pc, #144]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003bbe:	68ab      	ldr	r3, [r5, #8]
 8003bc0:	684a      	ldr	r2, [r1, #4]
 8003bc2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	604a      	str	r2, [r1, #4]
 8003bca:	f010 0010 	ands.w	r0, r0, #16
 8003bce:	d01b      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003bd2:	68e9      	ldr	r1, [r5, #12]
 8003bd4:	6853      	ldr	r3, [r2, #4]
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6053      	str	r3, [r2, #4]
 8003be0:	e012      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003be2:	2600      	movs	r6, #0
 8003be4:	e7d4      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	f7ff f8eb 	bl	8002dc8 <HAL_GetTick>
 8003bf2:	4680      	mov	r8, r0
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	05d8      	lsls	r0, r3, #23
 8003bf8:	d4ce      	bmi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8003bfa:	f7ff f8e5 	bl	8002dc8 <HAL_GetTick>
 8003bfe:	eba0 0008 	sub.w	r0, r0, r8
 8003c02:	2864      	cmp	r0, #100	; 0x64
 8003c04:	d9f6      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8003c06:	2003      	movs	r0, #3
 8003c08:	b002      	add	sp, #8
 8003c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c0e:	686a      	ldr	r2, [r5, #4]
 8003c10:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d0c3      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8003c18:	2001      	movs	r0, #1
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8003c1c:	6a23      	ldr	r3, [r4, #32]
 8003c1e:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
 8003c22:	2000      	movs	r0, #0
 8003c24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c28:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
 8003c2c:	6221      	str	r1, [r4, #32]
 8003c2e:	07d9      	lsls	r1, r3, #31
 8003c30:	d5b6      	bpl.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8003c32:	f7ff f8c9 	bl	8002dc8 <HAL_GetTick>
 8003c36:	f241 3888 	movw	r8, #5000	; 0x1388
 8003c3a:	4607      	mov	r7, r0
 8003c3c:	6a23      	ldr	r3, [r4, #32]
 8003c3e:	079a      	lsls	r2, r3, #30
 8003c40:	d4ae      	bmi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8003c42:	f7ff f8c1 	bl	8002dc8 <HAL_GetTick>
 8003c46:	1bc0      	subs	r0, r0, r7
 8003c48:	4540      	cmp	r0, r8
 8003c4a:	d9f7      	bls.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c4c:	e7db      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40007000 	.word	0x40007000
 8003c58:	42420000 	.word	0x42420000

08003c5c <HAL_RCCEx_GetPeriphCLKFreq>:
 8003c5c:	2802      	cmp	r0, #2
 8003c5e:	b508      	push	{r3, lr}
 8003c60:	d044      	beq.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8003c62:	2810      	cmp	r0, #16
 8003c64:	d003      	beq.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8003c66:	2801      	cmp	r0, #1
 8003c68:	d022      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	e034      	b.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003c6e:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003c78:	d02e      	beq.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003c7a:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8003c7e:	4822      	ldr	r0, [pc, #136]	; (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c80:	03d2      	lsls	r2, r2, #15
 8003c82:	bf48      	it	mi
 8003c84:	685a      	ldrmi	r2, [r3, #4]
 8003c86:	5c40      	ldrb	r0, [r0, r1]
 8003c88:	bf41      	itttt	mi
 8003c8a:	4920      	ldrmi	r1, [pc, #128]	; (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c8c:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8003c90:	5c89      	ldrbmi	r1, [r1, r2]
 8003c92:	4a1f      	ldrmi	r2, [pc, #124]	; (8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	bf4c      	ite	mi
 8003c98:	fbb2 f2f1 	udivmi	r2, r2, r1
 8003c9c:	4a1d      	ldrpl	r2, [pc, #116]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003c9e:	025b      	lsls	r3, r3, #9
 8003ca0:	fb02 f000 	mul.w	r0, r2, r0
 8003ca4:	d418      	bmi.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	0040      	lsls	r0, r0, #1
 8003caa:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cae:	e013      	b.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003cb0:	f240 3102 	movw	r1, #770	; 0x302
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003cb6:	6a13      	ldr	r3, [r2, #32]
 8003cb8:	4019      	ands	r1, r3
 8003cba:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8003cbe:	d01e      	beq.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8003cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc8:	d107      	bne.n	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8003cca:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003cce:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003cd0:	f010 0002 	ands.w	r0, r0, #2
 8003cd4:	bf18      	it	ne
 8003cd6:	4618      	movne	r0, r3
 8003cd8:	bd08      	pop	{r3, pc}
 8003cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cde:	d1c4      	bne.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8003ce0:	6810      	ldr	r0, [r2, #0]
 8003ce2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ce6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003cea:	e7f3      	b.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8003cec:	f7ff ff2c 	bl	8003b48 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	e7d5      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8003cfe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003d02:	e7e9      	b.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	08004c0b 	.word	0x08004c0b
 8003d0c:	08004c1b 	.word	0x08004c1b
 8003d10:	007a1200 	.word	0x007a1200
 8003d14:	003d0900 	.word	0x003d0900

08003d18 <RTC_ReadTimeCounter>:
 8003d18:	6803      	ldr	r3, [r0, #0]
 8003d1a:	b530      	push	{r4, r5, lr}
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	69d8      	ldr	r0, [r3, #28]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	b295      	uxth	r5, r2
 8003d24:	b28c      	uxth	r4, r1
 8003d26:	42a5      	cmp	r5, r4
 8003d28:	bf17      	itett	ne
 8003d2a:	69d8      	ldrne	r0, [r3, #28]
 8003d2c:	b280      	uxtheq	r0, r0
 8003d2e:	b280      	uxthne	r0, r0
 8003d30:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
 8003d34:	bf08      	it	eq
 8003d36:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
 8003d3a:	bd30      	pop	{r4, r5, pc}

08003d3c <RTC_ReadAlarmCounter>:
 8003d3c:	6803      	ldr	r3, [r0, #0]
 8003d3e:	6a18      	ldr	r0, [r3, #32]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8003d48:	4770      	bx	lr

08003d4a <RTC_ByteToBcd2>:
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2809      	cmp	r0, #9
 8003d4e:	d803      	bhi.n	8003d58 <RTC_ByteToBcd2+0xe>
 8003d50:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8003d54:	b2c0      	uxtb	r0, r0
 8003d56:	4770      	bx	lr
 8003d58:	380a      	subs	r0, #10
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	b2c0      	uxtb	r0, r0
 8003d5e:	e7f5      	b.n	8003d4c <RTC_ByteToBcd2+0x2>

08003d60 <RTC_Bcd2ToByte>:
 8003d60:	220a      	movs	r2, #10
 8003d62:	0903      	lsrs	r3, r0, #4
 8003d64:	f000 000f 	and.w	r0, r0, #15
 8003d68:	fb02 0003 	mla	r0, r2, r3, r0
 8003d6c:	b2c0      	uxtb	r0, r0
 8003d6e:	4770      	bx	lr

08003d70 <RTC_WeekDayNum>:
 8003d70:	b530      	push	{r4, r5, lr}
 8003d72:	4603      	mov	r3, r0
 8003d74:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
 8003d78:	2017      	movs	r0, #23
 8003d7a:	2509      	movs	r5, #9
 8003d7c:	4348      	muls	r0, r1
 8003d7e:	2902      	cmp	r1, #2
 8003d80:	fbb0 f5f5 	udiv	r5, r0, r5
 8003d84:	d817      	bhi.n	8003db6 <RTC_WeekDayNum+0x46>
 8003d86:	3204      	adds	r2, #4
 8003d88:	1910      	adds	r0, r2, r4
 8003d8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003d8e:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 8003d92:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d96:	4428      	add	r0, r5
 8003d98:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8003d9c:	4410      	add	r0, r2
 8003d9e:	2264      	movs	r2, #100	; 0x64
 8003da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003da4:	1ac0      	subs	r0, r0, r3
 8003da6:	2307      	movs	r3, #7
 8003da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003db0:	1ac0      	subs	r0, r0, r3
 8003db2:	b2c0      	uxtb	r0, r0
 8003db4:	bd30      	pop	{r4, r5, pc}
 8003db6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003dba:	fbb4 f3f3 	udiv	r3, r4, r3
 8003dbe:	1c90      	adds	r0, r2, #2
 8003dc0:	4420      	add	r0, r4
 8003dc2:	4428      	add	r0, r5
 8003dc4:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8003dc8:	4418      	add	r0, r3
 8003dca:	2364      	movs	r3, #100	; 0x64
 8003dcc:	fbb4 f4f3 	udiv	r4, r4, r3
 8003dd0:	1b00      	subs	r0, r0, r4
 8003dd2:	e7e8      	b.n	8003da6 <RTC_WeekDayNum+0x36>

08003dd4 <RTC_EnterInitMode>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	f7fe fff6 	bl	8002dc8 <HAL_GetTick>
 8003ddc:	4605      	mov	r5, r0
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	0692      	lsls	r2, r2, #26
 8003de4:	d505      	bpl.n	8003df2 <RTC_EnterInitMode+0x1e>
 8003de6:	2000      	movs	r0, #0
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	f042 0210 	orr.w	r2, r2, #16
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	bd38      	pop	{r3, r4, r5, pc}
 8003df2:	f7fe ffe9 	bl	8002dc8 <HAL_GetTick>
 8003df6:	1b40      	subs	r0, r0, r5
 8003df8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003dfc:	d9ef      	bls.n	8003dde <RTC_EnterInitMode+0xa>
 8003dfe:	2003      	movs	r0, #3
 8003e00:	e7f6      	b.n	8003df0 <RTC_EnterInitMode+0x1c>

08003e02 <RTC_ExitInitMode>:
 8003e02:	6802      	ldr	r2, [r0, #0]
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	6853      	ldr	r3, [r2, #4]
 8003e08:	4604      	mov	r4, r0
 8003e0a:	f023 0310 	bic.w	r3, r3, #16
 8003e0e:	6053      	str	r3, [r2, #4]
 8003e10:	f7fe ffda 	bl	8002dc8 <HAL_GetTick>
 8003e14:	4605      	mov	r5, r0
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	069b      	lsls	r3, r3, #26
 8003e1c:	d501      	bpl.n	8003e22 <RTC_ExitInitMode+0x20>
 8003e1e:	2000      	movs	r0, #0
 8003e20:	bd38      	pop	{r3, r4, r5, pc}
 8003e22:	f7fe ffd1 	bl	8002dc8 <HAL_GetTick>
 8003e26:	1b40      	subs	r0, r0, r5
 8003e28:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e2c:	d9f3      	bls.n	8003e16 <RTC_ExitInitMode+0x14>
 8003e2e:	2003      	movs	r0, #3
 8003e30:	e7f6      	b.n	8003e20 <RTC_ExitInitMode+0x1e>

08003e32 <RTC_WriteTimeCounter>:
 8003e32:	b538      	push	{r3, r4, r5, lr}
 8003e34:	4605      	mov	r5, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	f7ff ffcc 	bl	8003dd4 <RTC_EnterInitMode>
 8003e3c:	b958      	cbnz	r0, 8003e56 <RTC_WriteTimeCounter+0x24>
 8003e3e:	682b      	ldr	r3, [r5, #0]
 8003e40:	0c22      	lsrs	r2, r4, #16
 8003e42:	b2a4      	uxth	r4, r4
 8003e44:	619a      	str	r2, [r3, #24]
 8003e46:	4628      	mov	r0, r5
 8003e48:	61dc      	str	r4, [r3, #28]
 8003e4a:	f7ff ffda 	bl	8003e02 <RTC_ExitInitMode>
 8003e4e:	3800      	subs	r0, #0
 8003e50:	bf18      	it	ne
 8003e52:	2001      	movne	r0, #1
 8003e54:	bd38      	pop	{r3, r4, r5, pc}
 8003e56:	2001      	movs	r0, #1
 8003e58:	e7fc      	b.n	8003e54 <RTC_WriteTimeCounter+0x22>

08003e5a <RTC_WriteAlarmCounter>:
 8003e5a:	b538      	push	{r3, r4, r5, lr}
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	f7ff ffb8 	bl	8003dd4 <RTC_EnterInitMode>
 8003e64:	b958      	cbnz	r0, 8003e7e <RTC_WriteAlarmCounter+0x24>
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	0c22      	lsrs	r2, r4, #16
 8003e6a:	b2a4      	uxth	r4, r4
 8003e6c:	621a      	str	r2, [r3, #32]
 8003e6e:	4628      	mov	r0, r5
 8003e70:	625c      	str	r4, [r3, #36]	; 0x24
 8003e72:	f7ff ffc6 	bl	8003e02 <RTC_ExitInitMode>
 8003e76:	3800      	subs	r0, #0
 8003e78:	bf18      	it	ne
 8003e7a:	2001      	movne	r0, #1
 8003e7c:	bd38      	pop	{r3, r4, r5, pc}
 8003e7e:	2001      	movs	r0, #1
 8003e80:	e7fc      	b.n	8003e7c <RTC_WriteAlarmCounter+0x22>

08003e82 <HAL_RTC_SetTime>:
 8003e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e84:	4604      	mov	r4, r0
 8003e86:	b1e0      	cbz	r0, 8003ec2 <HAL_RTC_SetTime+0x40>
 8003e88:	b1d9      	cbz	r1, 8003ec2 <HAL_RTC_SetTime+0x40>
 8003e8a:	7c03      	ldrb	r3, [r0, #16]
 8003e8c:	2502      	movs	r5, #2
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d044      	beq.n	8003f1c <HAL_RTC_SetTime+0x9a>
 8003e92:	2301      	movs	r3, #1
 8003e94:	7445      	strb	r5, [r0, #17]
 8003e96:	7403      	strb	r3, [r0, #16]
 8003e98:	7808      	ldrb	r0, [r1, #0]
 8003e9a:	784d      	ldrb	r5, [r1, #1]
 8003e9c:	788f      	ldrb	r7, [r1, #2]
 8003e9e:	b992      	cbnz	r2, 8003ec6 <HAL_RTC_SetTime+0x44>
 8003ea0:	263c      	movs	r6, #60	; 0x3c
 8003ea2:	4375      	muls	r5, r6
 8003ea4:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 8003ea8:	fb06 5500 	mla	r5, r6, r0, r5
 8003eac:	19ee      	adds	r6, r5, r7
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7ff ffbe 	bl	8003e32 <RTC_WriteTimeCounter>
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	b1b0      	cbz	r0, 8003ee8 <HAL_RTC_SetTime+0x66>
 8003eba:	2304      	movs	r3, #4
 8003ebc:	7463      	strb	r3, [r4, #17]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	7423      	strb	r3, [r4, #16]
 8003ec2:	2501      	movs	r5, #1
 8003ec4:	e02a      	b.n	8003f1c <HAL_RTC_SetTime+0x9a>
 8003ec6:	f7ff ff4b 	bl	8003d60 <RTC_Bcd2ToByte>
 8003eca:	4601      	mov	r1, r0
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f7ff ff47 	bl	8003d60 <RTC_Bcd2ToByte>
 8003ed2:	263c      	movs	r6, #60	; 0x3c
 8003ed4:	4346      	muls	r6, r0
 8003ed6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8003eda:	fb00 6601 	mla	r6, r0, r1, r6
 8003ede:	4638      	mov	r0, r7
 8003ee0:	f7ff ff3e 	bl	8003d60 <RTC_Bcd2ToByte>
 8003ee4:	4406      	add	r6, r0
 8003ee6:	e7e2      	b.n	8003eae <HAL_RTC_SetTime+0x2c>
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	4620      	mov	r0, r4
 8003eec:	6853      	ldr	r3, [r2, #4]
 8003eee:	f023 0305 	bic.w	r3, r3, #5
 8003ef2:	6053      	str	r3, [r2, #4]
 8003ef4:	f7ff ff22 	bl	8003d3c <RTC_ReadAlarmCounter>
 8003ef8:	4286      	cmp	r6, r0
 8003efa:	d90b      	bls.n	8003f14 <HAL_RTC_SetTime+0x92>
 8003efc:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8003f00:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8003f04:	4620      	mov	r0, r4
 8003f06:	f7ff ffa8 	bl	8003e5a <RTC_WriteAlarmCounter>
 8003f0a:	b118      	cbz	r0, 8003f14 <HAL_RTC_SetTime+0x92>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	7425      	strb	r5, [r4, #16]
 8003f10:	7463      	strb	r3, [r4, #17]
 8003f12:	e7d6      	b.n	8003ec2 <HAL_RTC_SetTime+0x40>
 8003f14:	2301      	movs	r3, #1
 8003f16:	7463      	strb	r3, [r4, #17]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	7423      	strb	r3, [r4, #16]
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f20 <HAL_RTC_GetTime>:
 8003f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f24:	460e      	mov	r6, r1
 8003f26:	4617      	mov	r7, r2
 8003f28:	4605      	mov	r5, r0
 8003f2a:	b910      	cbnz	r0, 8003f32 <HAL_RTC_GetTime+0x12>
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f32:	2900      	cmp	r1, #0
 8003f34:	d0fa      	beq.n	8003f2c <HAL_RTC_GetTime+0xc>
 8003f36:	6803      	ldr	r3, [r0, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f013 0804 	ands.w	r8, r3, #4
 8003f3e:	d1f5      	bne.n	8003f2c <HAL_RTC_GetTime+0xc>
 8003f40:	f7ff feea 	bl	8003d18 <RTC_ReadTimeCounter>
 8003f44:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f48:	fbb0 f2f3 	udiv	r2, r0, r3
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	fb03 0312 	mls	r3, r3, r2, r0
 8003f52:	203c      	movs	r0, #60	; 0x3c
 8003f54:	fbb3 f1f0 	udiv	r1, r3, r0
 8003f58:	fb00 3311 	mls	r3, r0, r1, r3
 8003f5c:	70b3      	strb	r3, [r6, #2]
 8003f5e:	4b4d      	ldr	r3, [pc, #308]	; (8004094 <HAL_RTC_GetTime+0x174>)
 8003f60:	7071      	strb	r1, [r6, #1]
 8003f62:	429c      	cmp	r4, r3
 8003f64:	f240 808b 	bls.w	800407e <HAL_RTC_GetTime+0x15e>
 8003f68:	2318      	movs	r3, #24
 8003f6a:	fbb2 f9f3 	udiv	r9, r2, r3
 8003f6e:	fb03 2219 	mls	r2, r3, r9, r2
 8003f72:	4628      	mov	r0, r5
 8003f74:	7032      	strb	r2, [r6, #0]
 8003f76:	f7ff fee1 	bl	8003d3c <RTC_ReadAlarmCounter>
 8003f7a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f7e:	4682      	mov	sl, r0
 8003f80:	d005      	beq.n	8003f8e <HAL_RTC_GetTime+0x6e>
 8003f82:	4284      	cmp	r4, r0
 8003f84:	bf2c      	ite	cs
 8003f86:	f04f 3aff 	movcs.w	sl, #4294967295
 8003f8a:	eba0 0a04 	subcc.w	sl, r0, r4
 8003f8e:	4942      	ldr	r1, [pc, #264]	; (8004098 <HAL_RTC_GetTime+0x178>)
 8003f90:	4628      	mov	r0, r5
 8003f92:	fb01 4419 	mls	r4, r1, r9, r4
 8003f96:	4621      	mov	r1, r4
 8003f98:	f7ff ff4b 	bl	8003e32 <RTC_WriteTimeCounter>
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d1c5      	bne.n	8003f2c <HAL_RTC_GetTime+0xc>
 8003fa0:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003fa4:	d027      	beq.n	8003ff6 <HAL_RTC_GetTime+0xd6>
 8003fa6:	eb04 010a 	add.w	r1, r4, sl
 8003faa:	4628      	mov	r0, r5
 8003fac:	f7ff ff55 	bl	8003e5a <RTC_WriteAlarmCounter>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d1bb      	bne.n	8003f2c <HAL_RTC_GetTime+0xc>
 8003fb4:	2264      	movs	r2, #100	; 0x64
 8003fb6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003fba:	f240 2cd5 	movw	ip, #725	; 0x2d5
 8003fbe:	7be8      	ldrb	r0, [r5, #15]
 8003fc0:	7b6c      	ldrb	r4, [r5, #13]
 8003fc2:	7bab      	ldrb	r3, [r5, #14]
 8003fc4:	45c1      	cmp	r9, r8
 8003fc6:	d118      	bne.n	8003ffa <HAL_RTC_GetTime+0xda>
 8003fc8:	b2e1      	uxtb	r1, r4
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	73e8      	strb	r0, [r5, #15]
 8003fce:	7369      	strb	r1, [r5, #13]
 8003fd0:	73aa      	strb	r2, [r5, #14]
 8003fd2:	f7ff fecd 	bl	8003d70 <RTC_WeekDayNum>
 8003fd6:	7328      	strb	r0, [r5, #12]
 8003fd8:	b15f      	cbz	r7, 8003ff2 <HAL_RTC_GetTime+0xd2>
 8003fda:	7830      	ldrb	r0, [r6, #0]
 8003fdc:	f7ff feb5 	bl	8003d4a <RTC_ByteToBcd2>
 8003fe0:	7030      	strb	r0, [r6, #0]
 8003fe2:	7870      	ldrb	r0, [r6, #1]
 8003fe4:	f7ff feb1 	bl	8003d4a <RTC_ByteToBcd2>
 8003fe8:	7070      	strb	r0, [r6, #1]
 8003fea:	78b0      	ldrb	r0, [r6, #2]
 8003fec:	f7ff fead 	bl	8003d4a <RTC_ByteToBcd2>
 8003ff0:	70b0      	strb	r0, [r6, #2]
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	e79b      	b.n	8003f2e <HAL_RTC_GetTime+0xe>
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	e7d7      	b.n	8003faa <HAL_RTC_GetTime+0x8a>
 8003ffa:	f104 3eff 	add.w	lr, r4, #4294967295
 8003ffe:	f1be 0f09 	cmp.w	lr, #9
 8004002:	d90e      	bls.n	8004022 <HAL_RTC_GetTime+0x102>
 8004004:	2c0c      	cmp	r4, #12
 8004006:	d03c      	beq.n	8004082 <HAL_RTC_GetTime+0x162>
 8004008:	f024 0e02 	bic.w	lr, r4, #2
 800400c:	f1be 0f04 	cmp.w	lr, #4
 8004010:	d002      	beq.n	8004018 <HAL_RTC_GetTime+0xf8>
 8004012:	f1be 0f09 	cmp.w	lr, #9
 8004016:	d10b      	bne.n	8004030 <HAL_RTC_GetTime+0x110>
 8004018:	2b1d      	cmp	r3, #29
 800401a:	d90d      	bls.n	8004038 <HAL_RTC_GetTime+0x118>
 800401c:	2301      	movs	r3, #1
 800401e:	3401      	adds	r4, #1
 8004020:	e034      	b.n	800408c <HAL_RTC_GetTime+0x16c>
 8004022:	fa2c fe0e 	lsr.w	lr, ip, lr
 8004026:	f01e 0f01 	tst.w	lr, #1
 800402a:	d0ed      	beq.n	8004008 <HAL_RTC_GetTime+0xe8>
 800402c:	2b1e      	cmp	r3, #30
 800402e:	e7f4      	b.n	800401a <HAL_RTC_GetTime+0xfa>
 8004030:	2c02      	cmp	r4, #2
 8004032:	d12b      	bne.n	800408c <HAL_RTC_GetTime+0x16c>
 8004034:	2b1b      	cmp	r3, #27
 8004036:	d801      	bhi.n	800403c <HAL_RTC_GetTime+0x11c>
 8004038:	3301      	adds	r3, #1
 800403a:	e027      	b.n	800408c <HAL_RTC_GetTime+0x16c>
 800403c:	2b1c      	cmp	r3, #28
 800403e:	d117      	bne.n	8004070 <HAL_RTC_GetTime+0x150>
 8004040:	f010 0f03 	tst.w	r0, #3
 8004044:	b283      	uxth	r3, r0
 8004046:	d115      	bne.n	8004074 <HAL_RTC_GetTime+0x154>
 8004048:	fbb3 fef2 	udiv	lr, r3, r2
 800404c:	fb02 3e1e 	mls	lr, r2, lr, r3
 8004050:	fa1f fe8e 	uxth.w	lr, lr
 8004054:	f1be 0f00 	cmp.w	lr, #0
 8004058:	d10f      	bne.n	800407a <HAL_RTC_GetTime+0x15a>
 800405a:	fbb3 fef1 	udiv	lr, r3, r1
 800405e:	fb01 331e 	mls	r3, r1, lr, r3
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf16      	itet	ne
 8004068:	2301      	movne	r3, #1
 800406a:	231d      	moveq	r3, #29
 800406c:	2403      	movne	r4, #3
 800406e:	e00d      	b.n	800408c <HAL_RTC_GetTime+0x16c>
 8004070:	2b1d      	cmp	r3, #29
 8004072:	d10b      	bne.n	800408c <HAL_RTC_GetTime+0x16c>
 8004074:	2301      	movs	r3, #1
 8004076:	2403      	movs	r4, #3
 8004078:	e008      	b.n	800408c <HAL_RTC_GetTime+0x16c>
 800407a:	231d      	movs	r3, #29
 800407c:	e006      	b.n	800408c <HAL_RTC_GetTime+0x16c>
 800407e:	7032      	strb	r2, [r6, #0]
 8004080:	e7aa      	b.n	8003fd8 <HAL_RTC_GetTime+0xb8>
 8004082:	2b1e      	cmp	r3, #30
 8004084:	d9d8      	bls.n	8004038 <HAL_RTC_GetTime+0x118>
 8004086:	2301      	movs	r3, #1
 8004088:	461c      	mov	r4, r3
 800408a:	3001      	adds	r0, #1
 800408c:	f108 0801 	add.w	r8, r8, #1
 8004090:	e798      	b.n	8003fc4 <HAL_RTC_GetTime+0xa4>
 8004092:	bf00      	nop
 8004094:	0001517f 	.word	0x0001517f
 8004098:	00015180 	.word	0x00015180

0800409c <HAL_RTC_SetDate>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	460d      	mov	r5, r1
 80040a0:	4604      	mov	r4, r0
 80040a2:	b350      	cbz	r0, 80040fa <HAL_RTC_SetDate+0x5e>
 80040a4:	b349      	cbz	r1, 80040fa <HAL_RTC_SetDate+0x5e>
 80040a6:	7c03      	ldrb	r3, [r0, #16]
 80040a8:	2002      	movs	r0, #2
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d048      	beq.n	8004140 <HAL_RTC_SetDate+0xa4>
 80040ae:	2301      	movs	r3, #1
 80040b0:	7460      	strb	r0, [r4, #17]
 80040b2:	7423      	strb	r3, [r4, #16]
 80040b4:	78c8      	ldrb	r0, [r1, #3]
 80040b6:	bb12      	cbnz	r2, 80040fe <HAL_RTC_SetDate+0x62>
 80040b8:	73e0      	strb	r0, [r4, #15]
 80040ba:	784b      	ldrb	r3, [r1, #1]
 80040bc:	7363      	strb	r3, [r4, #13]
 80040be:	788b      	ldrb	r3, [r1, #2]
 80040c0:	73a3      	strb	r3, [r4, #14]
 80040c2:	7ba2      	ldrb	r2, [r4, #14]
 80040c4:	7b61      	ldrb	r1, [r4, #13]
 80040c6:	7be0      	ldrb	r0, [r4, #15]
 80040c8:	f7ff fe52 	bl	8003d70 <RTC_WeekDayNum>
 80040cc:	7320      	strb	r0, [r4, #12]
 80040ce:	7028      	strb	r0, [r5, #0]
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7ff fe21 	bl	8003d18 <RTC_ReadTimeCounter>
 80040d6:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_RTC_SetDate+0xa8>)
 80040d8:	4298      	cmp	r0, r3
 80040da:	d92d      	bls.n	8004138 <HAL_RTC_SetDate+0x9c>
 80040dc:	4d1a      	ldr	r5, [pc, #104]	; (8004148 <HAL_RTC_SetDate+0xac>)
 80040de:	fbb0 f1f5 	udiv	r1, r0, r5
 80040e2:	fb05 0511 	mls	r5, r5, r1, r0
 80040e6:	4620      	mov	r0, r4
 80040e8:	4629      	mov	r1, r5
 80040ea:	f7ff fea2 	bl	8003e32 <RTC_WriteTimeCounter>
 80040ee:	4606      	mov	r6, r0
 80040f0:	b188      	cbz	r0, 8004116 <HAL_RTC_SetDate+0x7a>
 80040f2:	2304      	movs	r3, #4
 80040f4:	7463      	strb	r3, [r4, #17]
 80040f6:	2300      	movs	r3, #0
 80040f8:	7423      	strb	r3, [r4, #16]
 80040fa:	2001      	movs	r0, #1
 80040fc:	e020      	b.n	8004140 <HAL_RTC_SetDate+0xa4>
 80040fe:	f7ff fe2f 	bl	8003d60 <RTC_Bcd2ToByte>
 8004102:	73e0      	strb	r0, [r4, #15]
 8004104:	7848      	ldrb	r0, [r1, #1]
 8004106:	f7ff fe2b 	bl	8003d60 <RTC_Bcd2ToByte>
 800410a:	7360      	strb	r0, [r4, #13]
 800410c:	7888      	ldrb	r0, [r1, #2]
 800410e:	f7ff fe27 	bl	8003d60 <RTC_Bcd2ToByte>
 8004112:	73a0      	strb	r0, [r4, #14]
 8004114:	e7d5      	b.n	80040c2 <HAL_RTC_SetDate+0x26>
 8004116:	4620      	mov	r0, r4
 8004118:	f7ff fe10 	bl	8003d3c <RTC_ReadAlarmCounter>
 800411c:	4285      	cmp	r5, r0
 800411e:	d90b      	bls.n	8004138 <HAL_RTC_SetDate+0x9c>
 8004120:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8004124:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff fe96 	bl	8003e5a <RTC_WriteAlarmCounter>
 800412e:	b118      	cbz	r0, 8004138 <HAL_RTC_SetDate+0x9c>
 8004130:	2304      	movs	r3, #4
 8004132:	7426      	strb	r6, [r4, #16]
 8004134:	7463      	strb	r3, [r4, #17]
 8004136:	e7e0      	b.n	80040fa <HAL_RTC_SetDate+0x5e>
 8004138:	2301      	movs	r3, #1
 800413a:	2000      	movs	r0, #0
 800413c:	7463      	strb	r3, [r4, #17]
 800413e:	7420      	strb	r0, [r4, #16]
 8004140:	bd70      	pop	{r4, r5, r6, pc}
 8004142:	bf00      	nop
 8004144:	00015f8f 	.word	0x00015f8f
 8004148:	00015180 	.word	0x00015180

0800414c <HAL_RTC_GetDate>:
 800414c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800414e:	4616      	mov	r6, r2
 8004150:	2200      	movs	r2, #0
 8004152:	460c      	mov	r4, r1
 8004154:	4605      	mov	r5, r0
 8004156:	f8ad 2004 	strh.w	r2, [sp, #4]
 800415a:	f88d 2006 	strb.w	r2, [sp, #6]
 800415e:	b918      	cbnz	r0, 8004168 <HAL_RTC_GetDate+0x1c>
 8004160:	2101      	movs	r1, #1
 8004162:	4608      	mov	r0, r1
 8004164:	b003      	add	sp, #12
 8004166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004168:	2900      	cmp	r1, #0
 800416a:	d0f9      	beq.n	8004160 <HAL_RTC_GetDate+0x14>
 800416c:	a901      	add	r1, sp, #4
 800416e:	f7ff fed7 	bl	8003f20 <HAL_RTC_GetTime>
 8004172:	4601      	mov	r1, r0
 8004174:	2800      	cmp	r0, #0
 8004176:	d1f3      	bne.n	8004160 <HAL_RTC_GetDate+0x14>
 8004178:	7b2b      	ldrb	r3, [r5, #12]
 800417a:	7023      	strb	r3, [r4, #0]
 800417c:	7be8      	ldrb	r0, [r5, #15]
 800417e:	70e0      	strb	r0, [r4, #3]
 8004180:	7b6f      	ldrb	r7, [r5, #13]
 8004182:	7067      	strb	r7, [r4, #1]
 8004184:	7baa      	ldrb	r2, [r5, #14]
 8004186:	70a2      	strb	r2, [r4, #2]
 8004188:	2e00      	cmp	r6, #0
 800418a:	d0ea      	beq.n	8004162 <HAL_RTC_GetDate+0x16>
 800418c:	f7ff fddd 	bl	8003d4a <RTC_ByteToBcd2>
 8004190:	70e0      	strb	r0, [r4, #3]
 8004192:	4638      	mov	r0, r7
 8004194:	f7ff fdd9 	bl	8003d4a <RTC_ByteToBcd2>
 8004198:	7060      	strb	r0, [r4, #1]
 800419a:	4610      	mov	r0, r2
 800419c:	f7ff fdd5 	bl	8003d4a <RTC_ByteToBcd2>
 80041a0:	70a0      	strb	r0, [r4, #2]
 80041a2:	e7de      	b.n	8004162 <HAL_RTC_GetDate+0x16>

080041a4 <HAL_RTC_WaitForSynchro>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4604      	mov	r4, r0
 80041a8:	b1a8      	cbz	r0, 80041d6 <HAL_RTC_WaitForSynchro+0x32>
 80041aa:	6802      	ldr	r2, [r0, #0]
 80041ac:	6853      	ldr	r3, [r2, #4]
 80041ae:	f023 0308 	bic.w	r3, r3, #8
 80041b2:	6053      	str	r3, [r2, #4]
 80041b4:	f7fe fe08 	bl	8002dc8 <HAL_GetTick>
 80041b8:	4605      	mov	r5, r0
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	071b      	lsls	r3, r3, #28
 80041c0:	d501      	bpl.n	80041c6 <HAL_RTC_WaitForSynchro+0x22>
 80041c2:	2000      	movs	r0, #0
 80041c4:	bd38      	pop	{r3, r4, r5, pc}
 80041c6:	f7fe fdff 	bl	8002dc8 <HAL_GetTick>
 80041ca:	1b40      	subs	r0, r0, r5
 80041cc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80041d0:	d9f3      	bls.n	80041ba <HAL_RTC_WaitForSynchro+0x16>
 80041d2:	2003      	movs	r0, #3
 80041d4:	e7f6      	b.n	80041c4 <HAL_RTC_WaitForSynchro+0x20>
 80041d6:	2001      	movs	r0, #1
 80041d8:	e7f4      	b.n	80041c4 <HAL_RTC_WaitForSynchro+0x20>
	...

080041dc <HAL_RTC_Init>:
 80041dc:	b510      	push	{r4, lr}
 80041de:	4604      	mov	r4, r0
 80041e0:	b170      	cbz	r0, 8004200 <HAL_RTC_Init+0x24>
 80041e2:	7c43      	ldrb	r3, [r0, #17]
 80041e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041e8:	b913      	cbnz	r3, 80041f0 <HAL_RTC_Init+0x14>
 80041ea:	7402      	strb	r2, [r0, #16]
 80041ec:	f7fc ffec 	bl	80011c8 <HAL_RTC_MspInit>
 80041f0:	2302      	movs	r3, #2
 80041f2:	4620      	mov	r0, r4
 80041f4:	7463      	strb	r3, [r4, #17]
 80041f6:	f7ff ffd5 	bl	80041a4 <HAL_RTC_WaitForSynchro>
 80041fa:	b118      	cbz	r0, 8004204 <HAL_RTC_Init+0x28>
 80041fc:	2304      	movs	r3, #4
 80041fe:	7463      	strb	r3, [r4, #17]
 8004200:	2001      	movs	r0, #1
 8004202:	e02f      	b.n	8004264 <HAL_RTC_Init+0x88>
 8004204:	4620      	mov	r0, r4
 8004206:	f7ff fde5 	bl	8003dd4 <RTC_EnterInitMode>
 800420a:	2800      	cmp	r0, #0
 800420c:	d1f6      	bne.n	80041fc <HAL_RTC_Init+0x20>
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	68a0      	ldr	r0, [r4, #8]
 8004212:	6853      	ldr	r3, [r2, #4]
 8004214:	f023 0307 	bic.w	r3, r3, #7
 8004218:	6053      	str	r3, [r2, #4]
 800421a:	4a13      	ldr	r2, [pc, #76]	; (8004268 <HAL_RTC_Init+0x8c>)
 800421c:	b118      	cbz	r0, 8004226 <HAL_RTC_Init+0x4a>
 800421e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004220:	f021 0101 	bic.w	r1, r1, #1
 8004224:	6311      	str	r1, [r2, #48]	; 0x30
 8004226:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004228:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800422c:	4303      	orrs	r3, r0
 800422e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004230:	6860      	ldr	r0, [r4, #4]
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	d105      	bne.n	8004242 <HAL_RTC_Init+0x66>
 8004236:	2001      	movs	r0, #1
 8004238:	f7ff fd10 	bl	8003c5c <HAL_RCCEx_GetPeriphCLKFreq>
 800423c:	2800      	cmp	r0, #0
 800423e:	d0dd      	beq.n	80041fc <HAL_RTC_Init+0x20>
 8004240:	3801      	subs	r0, #1
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8004248:	b280      	uxth	r0, r0
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60d8      	str	r0, [r3, #12]
 800424e:	4620      	mov	r0, r4
 8004250:	f7ff fdd7 	bl	8003e02 <RTC_ExitInitMode>
 8004254:	2301      	movs	r3, #1
 8004256:	b110      	cbz	r0, 800425e <HAL_RTC_Init+0x82>
 8004258:	2204      	movs	r2, #4
 800425a:	7462      	strb	r2, [r4, #17]
 800425c:	e7d0      	b.n	8004200 <HAL_RTC_Init+0x24>
 800425e:	7363      	strb	r3, [r4, #13]
 8004260:	81e3      	strh	r3, [r4, #14]
 8004262:	7463      	strb	r3, [r4, #17]
 8004264:	bd10      	pop	{r4, pc}
 8004266:	bf00      	nop
 8004268:	40006c00 	.word	0x40006c00

0800426c <TIM_Base_SetConfig>:
 800426c:	4a1a      	ldr	r2, [pc, #104]	; (80042d8 <TIM_Base_SetConfig+0x6c>)
 800426e:	6803      	ldr	r3, [r0, #0]
 8004270:	4290      	cmp	r0, r2
 8004272:	d00a      	beq.n	800428a <TIM_Base_SetConfig+0x1e>
 8004274:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004278:	d007      	beq.n	800428a <TIM_Base_SetConfig+0x1e>
 800427a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800427e:	4290      	cmp	r0, r2
 8004280:	d003      	beq.n	800428a <TIM_Base_SetConfig+0x1e>
 8004282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004286:	4290      	cmp	r0, r2
 8004288:	d115      	bne.n	80042b6 <TIM_Base_SetConfig+0x4a>
 800428a:	684a      	ldr	r2, [r1, #4]
 800428c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004290:	4313      	orrs	r3, r2
 8004292:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <TIM_Base_SetConfig+0x6c>)
 8004294:	4290      	cmp	r0, r2
 8004296:	d00a      	beq.n	80042ae <TIM_Base_SetConfig+0x42>
 8004298:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800429c:	d007      	beq.n	80042ae <TIM_Base_SetConfig+0x42>
 800429e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80042a2:	4290      	cmp	r0, r2
 80042a4:	d003      	beq.n	80042ae <TIM_Base_SetConfig+0x42>
 80042a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042aa:	4290      	cmp	r0, r2
 80042ac:	d103      	bne.n	80042b6 <TIM_Base_SetConfig+0x4a>
 80042ae:	68ca      	ldr	r2, [r1, #12]
 80042b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b4:	4313      	orrs	r3, r2
 80042b6:	694a      	ldr	r2, [r1, #20]
 80042b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042bc:	4313      	orrs	r3, r2
 80042be:	6003      	str	r3, [r0, #0]
 80042c0:	688b      	ldr	r3, [r1, #8]
 80042c2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80042c4:	680b      	ldr	r3, [r1, #0]
 80042c6:	6283      	str	r3, [r0, #40]	; 0x28
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <TIM_Base_SetConfig+0x6c>)
 80042ca:	4298      	cmp	r0, r3
 80042cc:	bf04      	itt	eq
 80042ce:	690b      	ldreq	r3, [r1, #16]
 80042d0:	6303      	streq	r3, [r0, #48]	; 0x30
 80042d2:	2301      	movs	r3, #1
 80042d4:	6143      	str	r3, [r0, #20]
 80042d6:	4770      	bx	lr
 80042d8:	40012c00 	.word	0x40012c00

080042dc <HAL_TIM_Base_Init>:
 80042dc:	b510      	push	{r4, lr}
 80042de:	4604      	mov	r4, r0
 80042e0:	b330      	cbz	r0, 8004330 <HAL_TIM_Base_Init+0x54>
 80042e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042ea:	b91b      	cbnz	r3, 80042f4 <HAL_TIM_Base_Init+0x18>
 80042ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 80042f0:	f7fe f8d0 	bl	8002494 <HAL_TIM_Base_MspInit>
 80042f4:	2302      	movs	r3, #2
 80042f6:	6820      	ldr	r0, [r4, #0]
 80042f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80042fc:	1d21      	adds	r1, r4, #4
 80042fe:	f7ff ffb5 	bl	800426c <TIM_Base_SetConfig>
 8004302:	2301      	movs	r3, #1
 8004304:	2000      	movs	r0, #0
 8004306:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800430a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800430e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004312:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004316:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800431a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800431e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004322:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800432a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800432e:	bd10      	pop	{r4, pc}
 8004330:	2001      	movs	r0, #1
 8004332:	e7fc      	b.n	800432e <HAL_TIM_Base_Init+0x52>

08004334 <TIM_ETR_SetConfig>:
 8004334:	b510      	push	{r4, lr}
 8004336:	6884      	ldr	r4, [r0, #8]
 8004338:	430a      	orrs	r2, r1
 800433a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800433e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004342:	4322      	orrs	r2, r4
 8004344:	6082      	str	r2, [r0, #8]
 8004346:	bd10      	pop	{r4, pc}

08004348 <HAL_TIM_ConfigClockSource>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800434e:	4604      	mov	r4, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	f04f 0302 	mov.w	r3, #2
 8004356:	f000 8091 	beq.w	800447c <HAL_TIM_ConfigClockSource+0x134>
 800435a:	2201      	movs	r2, #1
 800435c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8004360:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8004364:	6800      	ldr	r0, [r0, #0]
 8004366:	6883      	ldr	r3, [r0, #8]
 8004368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800436c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004370:	6083      	str	r3, [r0, #8]
 8004372:	680b      	ldr	r3, [r1, #0]
 8004374:	2b60      	cmp	r3, #96	; 0x60
 8004376:	d052      	beq.n	800441e <HAL_TIM_ConfigClockSource+0xd6>
 8004378:	d833      	bhi.n	80043e2 <HAL_TIM_ConfigClockSource+0x9a>
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d067      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x106>
 800437e:	d816      	bhi.n	80043ae <HAL_TIM_ConfigClockSource+0x66>
 8004380:	2b20      	cmp	r3, #32
 8004382:	d00d      	beq.n	80043a0 <HAL_TIM_ConfigClockSource+0x58>
 8004384:	d80a      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x54>
 8004386:	f033 0110 	bics.w	r1, r3, #16
 800438a:	d009      	beq.n	80043a0 <HAL_TIM_ConfigClockSource+0x58>
 800438c:	2301      	movs	r3, #1
 800438e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8004392:	2300      	movs	r3, #0
 8004394:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004398:	4610      	mov	r0, r2
 800439a:	bd70      	pop	{r4, r5, r6, pc}
 800439c:	2b30      	cmp	r3, #48	; 0x30
 800439e:	d1f5      	bne.n	800438c <HAL_TIM_ConfigClockSource+0x44>
 80043a0:	6882      	ldr	r2, [r0, #8]
 80043a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f043 0307 	orr.w	r3, r3, #7
 80043ac:	e017      	b.n	80043de <HAL_TIM_ConfigClockSource+0x96>
 80043ae:	2b50      	cmp	r3, #80	; 0x50
 80043b0:	d1ec      	bne.n	800438c <HAL_TIM_ConfigClockSource+0x44>
 80043b2:	684a      	ldr	r2, [r1, #4]
 80043b4:	68ce      	ldr	r6, [r1, #12]
 80043b6:	6a01      	ldr	r1, [r0, #32]
 80043b8:	6a05      	ldr	r5, [r0, #32]
 80043ba:	f021 010a 	bic.w	r1, r1, #10
 80043be:	f025 0501 	bic.w	r5, r5, #1
 80043c2:	6205      	str	r5, [r0, #32]
 80043c4:	6983      	ldr	r3, [r0, #24]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043cc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80043d0:	6183      	str	r3, [r0, #24]
 80043d2:	6202      	str	r2, [r0, #32]
 80043d4:	6883      	ldr	r3, [r0, #8]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80043de:	6083      	str	r3, [r0, #8]
 80043e0:	e011      	b.n	8004406 <HAL_TIM_ConfigClockSource+0xbe>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	d00e      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0xbe>
 80043e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ec:	d00d      	beq.n	800440a <HAL_TIM_ConfigClockSource+0xc2>
 80043ee:	2b70      	cmp	r3, #112	; 0x70
 80043f0:	d1cc      	bne.n	800438c <HAL_TIM_ConfigClockSource+0x44>
 80043f2:	68cb      	ldr	r3, [r1, #12]
 80043f4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80043f8:	f7ff ff9c 	bl	8004334 <TIM_ETR_SetConfig>
 80043fc:	6822      	ldr	r2, [r4, #0]
 80043fe:	6893      	ldr	r3, [r2, #8]
 8004400:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004404:	6093      	str	r3, [r2, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	e7c0      	b.n	800438c <HAL_TIM_ConfigClockSource+0x44>
 800440a:	68cb      	ldr	r3, [r1, #12]
 800440c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004410:	f7ff ff90 	bl	8004334 <TIM_ETR_SetConfig>
 8004414:	6822      	ldr	r2, [r4, #0]
 8004416:	6893      	ldr	r3, [r2, #8]
 8004418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800441c:	e7f2      	b.n	8004404 <HAL_TIM_ConfigClockSource+0xbc>
 800441e:	6a03      	ldr	r3, [r0, #32]
 8004420:	684d      	ldr	r5, [r1, #4]
 8004422:	68ce      	ldr	r6, [r1, #12]
 8004424:	6a01      	ldr	r1, [r0, #32]
 8004426:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800442a:	f021 0110 	bic.w	r1, r1, #16
 800442e:	6201      	str	r1, [r0, #32]
 8004430:	6982      	ldr	r2, [r0, #24]
 8004432:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004436:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800443a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
 800443e:	6182      	str	r2, [r0, #24]
 8004440:	6203      	str	r3, [r0, #32]
 8004442:	6883      	ldr	r3, [r0, #8]
 8004444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004448:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800444c:	e7c7      	b.n	80043de <HAL_TIM_ConfigClockSource+0x96>
 800444e:	684a      	ldr	r2, [r1, #4]
 8004450:	68ce      	ldr	r6, [r1, #12]
 8004452:	6a01      	ldr	r1, [r0, #32]
 8004454:	6a05      	ldr	r5, [r0, #32]
 8004456:	f021 010a 	bic.w	r1, r1, #10
 800445a:	f025 0501 	bic.w	r5, r5, #1
 800445e:	6205      	str	r5, [r0, #32]
 8004460:	6983      	ldr	r3, [r0, #24]
 8004462:	430a      	orrs	r2, r1
 8004464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004468:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800446c:	6183      	str	r3, [r0, #24]
 800446e:	6202      	str	r2, [r0, #32]
 8004470:	6883      	ldr	r3, [r0, #8]
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800447a:	e7b0      	b.n	80043de <HAL_TIM_ConfigClockSource+0x96>
 800447c:	461a      	mov	r2, r3
 800447e:	e78b      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x50>

08004480 <HAL_TIMEx_MasterConfigSynchronization>:
 8004480:	b530      	push	{r4, r5, lr}
 8004482:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004486:	4602      	mov	r2, r0
 8004488:	2b01      	cmp	r3, #1
 800448a:	f04f 0002 	mov.w	r0, #2
 800448e:	d022      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004490:	6813      	ldr	r3, [r2, #0]
 8004492:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8004496:	685c      	ldr	r4, [r3, #4]
 8004498:	680d      	ldr	r5, [r1, #0]
 800449a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800449e:	432c      	orrs	r4, r5
 80044a0:	6898      	ldr	r0, [r3, #8]
 80044a2:	605c      	str	r4, [r3, #4]
 80044a4:	4c0c      	ldr	r4, [pc, #48]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80044a6:	42a3      	cmp	r3, r4
 80044a8:	d00a      	beq.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ae:	d007      	beq.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80044b0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80044b4:	42a3      	cmp	r3, r4
 80044b6:	d003      	beq.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80044b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044bc:	42a3      	cmp	r3, r4
 80044be:	d104      	bne.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80044c0:	6849      	ldr	r1, [r1, #4]
 80044c2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80044c6:	4301      	orrs	r1, r0
 80044c8:	6099      	str	r1, [r3, #8]
 80044ca:	2301      	movs	r3, #1
 80044cc:	2000      	movs	r0, #0
 80044ce:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
 80044d2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
 80044d6:	bd30      	pop	{r4, r5, pc}
 80044d8:	40012c00 	.word	0x40012c00

080044dc <UART_EndRxTransfer>:
 80044dc:	6802      	ldr	r2, [r0, #0]
 80044de:	f102 030c 	add.w	r3, r2, #12
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ea:	320c      	adds	r2, #12
 80044ec:	e842 3100 	strex	r1, r3, [r2]
 80044f0:	6802      	ldr	r2, [r0, #0]
 80044f2:	2900      	cmp	r1, #0
 80044f4:	d1f2      	bne.n	80044dc <UART_EndRxTransfer>
 80044f6:	f102 0314 	add.w	r3, r2, #20
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	f102 0c14 	add.w	ip, r2, #20
 8004506:	e84c 3100 	strex	r1, r3, [ip]
 800450a:	2900      	cmp	r1, #0
 800450c:	d1f3      	bne.n	80044f6 <UART_EndRxTransfer+0x1a>
 800450e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d10b      	bne.n	800452c <UART_EndRxTransfer+0x50>
 8004514:	f102 030c 	add.w	r3, r2, #12
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	f023 0310 	bic.w	r3, r3, #16
 8004520:	f102 0c0c 	add.w	ip, r2, #12
 8004524:	e84c 3100 	strex	r1, r3, [ip]
 8004528:	2900      	cmp	r1, #0
 800452a:	d1f3      	bne.n	8004514 <UART_EndRxTransfer+0x38>
 800452c:	2320      	movs	r3, #32
 800452e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8004532:	2300      	movs	r3, #0
 8004534:	6303      	str	r3, [r0, #48]	; 0x30
 8004536:	4770      	bx	lr

08004538 <UART_SetConfig>:
 8004538:	b510      	push	{r4, lr}
 800453a:	4604      	mov	r4, r0
 800453c:	6803      	ldr	r3, [r0, #0]
 800453e:	68c1      	ldr	r1, [r0, #12]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004546:	430a      	orrs	r2, r1
 8004548:	611a      	str	r2, [r3, #16]
 800454a:	6882      	ldr	r2, [r0, #8]
 800454c:	6900      	ldr	r0, [r0, #16]
 800454e:	68d9      	ldr	r1, [r3, #12]
 8004550:	4302      	orrs	r2, r0
 8004552:	6960      	ldr	r0, [r4, #20]
 8004554:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004558:	f021 010c 	bic.w	r1, r1, #12
 800455c:	4302      	orrs	r2, r0
 800455e:	430a      	orrs	r2, r1
 8004560:	60da      	str	r2, [r3, #12]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	69a1      	ldr	r1, [r4, #24]
 8004566:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800456a:	430a      	orrs	r2, r1
 800456c:	615a      	str	r2, [r3, #20]
 800456e:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <UART_SetConfig+0x70>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d115      	bne.n	80045a0 <UART_SetConfig+0x68>
 8004574:	f7ff fae8 	bl	8003b48 <HAL_RCC_GetPCLK2Freq>
 8004578:	2319      	movs	r3, #25
 800457a:	4343      	muls	r3, r0
 800457c:	6862      	ldr	r2, [r4, #4]
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	0092      	lsls	r2, r2, #2
 8004582:	fbb3 f3f2 	udiv	r3, r3, r2
 8004586:	2264      	movs	r2, #100	; 0x64
 8004588:	fbb3 f1f2 	udiv	r1, r3, r2
 800458c:	fb02 3311 	mls	r3, r2, r1, r3
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	3332      	adds	r3, #50	; 0x32
 8004594:	fbb3 f3f2 	udiv	r3, r3, r2
 8004598:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800459c:	6083      	str	r3, [r0, #8]
 800459e:	bd10      	pop	{r4, pc}
 80045a0:	f7ff fac2 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 80045a4:	e7e8      	b.n	8004578 <UART_SetConfig+0x40>
 80045a6:	bf00      	nop
 80045a8:	40013800 	.word	0x40013800

080045ac <UART_WaitOnFlagUntilTimeout.constprop.0>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	4604      	mov	r4, r0
 80045b0:	460e      	mov	r6, r1
 80045b2:	4617      	mov	r7, r2
 80045b4:	461d      	mov	r5, r3
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	6813      	ldr	r3, [r2, #0]
 80045ba:	ea36 0303 	bics.w	r3, r6, r3
 80045be:	d101      	bne.n	80045c4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
 80045c0:	2000      	movs	r0, #0
 80045c2:	e028      	b.n	8004616 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
 80045c4:	1c6b      	adds	r3, r5, #1
 80045c6:	d0f7      	beq.n	80045b8 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
 80045c8:	b125      	cbz	r5, 80045d4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80045ca:	f7fe fbfd 	bl	8002dc8 <HAL_GetTick>
 80045ce:	1bc0      	subs	r0, r0, r7
 80045d0:	4285      	cmp	r5, r0
 80045d2:	d2f0      	bcs.n	80045b6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	f102 030c 	add.w	r3, r2, #12
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045e2:	320c      	adds	r2, #12
 80045e4:	e842 3000 	strex	r0, r3, [r2]
 80045e8:	6821      	ldr	r1, [r4, #0]
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d1f2      	bne.n	80045d4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80045ee:	f101 0314 	add.w	r3, r1, #20
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	f101 0014 	add.w	r0, r1, #20
 80045fe:	e840 3200 	strex	r2, r3, [r0]
 8004602:	2a00      	cmp	r2, #0
 8004604:	d1f3      	bne.n	80045ee <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
 8004606:	2320      	movs	r3, #32
 8004608:	2003      	movs	r0, #3
 800460a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800460e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8004612:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004618 <HAL_UART_Init>:
 8004618:	b510      	push	{r4, lr}
 800461a:	4604      	mov	r4, r0
 800461c:	b348      	cbz	r0, 8004672 <HAL_UART_Init+0x5a>
 800461e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004622:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004626:	b91b      	cbnz	r3, 8004630 <HAL_UART_Init+0x18>
 8004628:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 800462c:	f7fd ffa4 	bl	8002578 <HAL_UART_MspInit>
 8004630:	2324      	movs	r3, #36	; 0x24
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004638:	68d3      	ldr	r3, [r2, #12]
 800463a:	4620      	mov	r0, r4
 800463c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004640:	60d3      	str	r3, [r2, #12]
 8004642:	f7ff ff79 	bl	8004538 <UART_SetConfig>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	2000      	movs	r0, #0
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004650:	611a      	str	r2, [r3, #16]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004658:	615a      	str	r2, [r3, #20]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	2320      	movs	r3, #32
 8004664:	6460      	str	r0, [r4, #68]	; 0x44
 8004666:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800466a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800466e:	6360      	str	r0, [r4, #52]	; 0x34
 8004670:	bd10      	pop	{r4, pc}
 8004672:	2001      	movs	r0, #1
 8004674:	e7fc      	b.n	8004670 <HAL_UART_Init+0x58>

08004676 <HAL_UART_Transmit>:
 8004676:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800467a:	4699      	mov	r9, r3
 800467c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004680:	4604      	mov	r4, r0
 8004682:	2b20      	cmp	r3, #32
 8004684:	460e      	mov	r6, r1
 8004686:	4617      	mov	r7, r2
 8004688:	d13c      	bne.n	8004704 <HAL_UART_Transmit+0x8e>
 800468a:	2900      	cmp	r1, #0
 800468c:	d03c      	beq.n	8004708 <HAL_UART_Transmit+0x92>
 800468e:	2a00      	cmp	r2, #0
 8004690:	d03a      	beq.n	8004708 <HAL_UART_Transmit+0x92>
 8004692:	2321      	movs	r3, #33	; 0x21
 8004694:	2500      	movs	r5, #0
 8004696:	6445      	str	r5, [r0, #68]	; 0x44
 8004698:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800469c:	f7fe fb94 	bl	8002dc8 <HAL_GetTick>
 80046a0:	68a3      	ldr	r3, [r4, #8]
 80046a2:	4680      	mov	r8, r0
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a8:	84a7      	strh	r7, [r4, #36]	; 0x24
 80046aa:	84e7      	strh	r7, [r4, #38]	; 0x26
 80046ac:	d103      	bne.n	80046b6 <HAL_UART_Transmit+0x40>
 80046ae:	6923      	ldr	r3, [r4, #16]
 80046b0:	b90b      	cbnz	r3, 80046b6 <HAL_UART_Transmit+0x40>
 80046b2:	4635      	mov	r5, r6
 80046b4:	461e      	mov	r6, r3
 80046b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	b953      	cbnz	r3, 80046d2 <HAL_UART_Transmit+0x5c>
 80046bc:	464b      	mov	r3, r9
 80046be:	4642      	mov	r2, r8
 80046c0:	2140      	movs	r1, #64	; 0x40
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7ff ff72 	bl	80045ac <UART_WaitOnFlagUntilTimeout.constprop.0>
 80046c8:	b950      	cbnz	r0, 80046e0 <HAL_UART_Transmit+0x6a>
 80046ca:	2320      	movs	r3, #32
 80046cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80046d0:	e007      	b.n	80046e2 <HAL_UART_Transmit+0x6c>
 80046d2:	464b      	mov	r3, r9
 80046d4:	4642      	mov	r2, r8
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff ff67 	bl	80045ac <UART_WaitOnFlagUntilTimeout.constprop.0>
 80046de:	b110      	cbz	r0, 80046e6 <HAL_UART_Transmit+0x70>
 80046e0:	2003      	movs	r0, #3
 80046e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046e6:	6822      	ldr	r2, [r4, #0]
 80046e8:	b94e      	cbnz	r6, 80046fe <HAL_UART_Transmit+0x88>
 80046ea:	f835 3b02 	ldrh.w	r3, [r5], #2
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	6053      	str	r3, [r2, #4]
 80046f4:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80046f6:	3901      	subs	r1, #1
 80046f8:	b289      	uxth	r1, r1
 80046fa:	84e1      	strh	r1, [r4, #38]	; 0x26
 80046fc:	e7db      	b.n	80046b6 <HAL_UART_Transmit+0x40>
 80046fe:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004702:	e7f6      	b.n	80046f2 <HAL_UART_Transmit+0x7c>
 8004704:	2002      	movs	r0, #2
 8004706:	e7ec      	b.n	80046e2 <HAL_UART_Transmit+0x6c>
 8004708:	2001      	movs	r0, #1
 800470a:	e7ea      	b.n	80046e2 <HAL_UART_Transmit+0x6c>

0800470c <HAL_UART_TxCpltCallback>:
 800470c:	4770      	bx	lr

0800470e <HAL_UART_ErrorCallback>:
 800470e:	4770      	bx	lr

08004710 <UART_DMAAbortOnError>:
 8004710:	b508      	push	{r3, lr}
 8004712:	2300      	movs	r3, #0
 8004714:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004716:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004718:	84c3      	strh	r3, [r0, #38]	; 0x26
 800471a:	f7ff fff8 	bl	800470e <HAL_UART_ErrorCallback>
 800471e:	bd08      	pop	{r3, pc}

08004720 <HAL_UARTEx_RxEventCallback>:
 8004720:	4770      	bx	lr

08004722 <UART_Receive_IT.part.0.isra.0>:
 8004722:	b507      	push	{r0, r1, r2, lr}
 8004724:	6881      	ldr	r1, [r0, #8]
 8004726:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004728:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800472c:	6802      	ldr	r2, [r0, #0]
 800472e:	d13f      	bne.n	80047b0 <UART_Receive_IT.part.0.isra.0+0x8e>
 8004730:	6901      	ldr	r1, [r0, #16]
 8004732:	2900      	cmp	r1, #0
 8004734:	d13f      	bne.n	80047b6 <UART_Receive_IT.part.0.isra.0+0x94>
 8004736:	6852      	ldr	r2, [r2, #4]
 8004738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800473c:	f823 2b02 	strh.w	r2, [r3], #2
 8004740:	6283      	str	r3, [r0, #40]	; 0x28
 8004742:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004744:	3b01      	subs	r3, #1
 8004746:	b29b      	uxth	r3, r3
 8004748:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800474a:	2b00      	cmp	r3, #0
 800474c:	d12d      	bne.n	80047aa <UART_Receive_IT.part.0.isra.0+0x88>
 800474e:	6802      	ldr	r2, [r0, #0]
 8004750:	68d1      	ldr	r1, [r2, #12]
 8004752:	f021 0120 	bic.w	r1, r1, #32
 8004756:	60d1      	str	r1, [r2, #12]
 8004758:	68d1      	ldr	r1, [r2, #12]
 800475a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800475e:	60d1      	str	r1, [r2, #12]
 8004760:	6951      	ldr	r1, [r2, #20]
 8004762:	f021 0101 	bic.w	r1, r1, #1
 8004766:	6151      	str	r1, [r2, #20]
 8004768:	2220      	movs	r2, #32
 800476a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
 800476e:	6343      	str	r3, [r0, #52]	; 0x34
 8004770:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004772:	2a01      	cmp	r2, #1
 8004774:	6802      	ldr	r2, [r0, #0]
 8004776:	d128      	bne.n	80047ca <UART_Receive_IT.part.0.isra.0+0xa8>
 8004778:	6303      	str	r3, [r0, #48]	; 0x30
 800477a:	f102 030c 	add.w	r3, r2, #12
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	f023 0310 	bic.w	r3, r3, #16
 8004786:	f102 0c0c 	add.w	ip, r2, #12
 800478a:	e84c 3100 	strex	r1, r3, [ip]
 800478e:	2900      	cmp	r1, #0
 8004790:	d1f3      	bne.n	800477a <UART_Receive_IT.part.0.isra.0+0x58>
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	06db      	lsls	r3, r3, #27
 8004796:	d505      	bpl.n	80047a4 <UART_Receive_IT.part.0.isra.0+0x82>
 8004798:	9101      	str	r1, [sp, #4]
 800479a:	6813      	ldr	r3, [r2, #0]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	6853      	ldr	r3, [r2, #4]
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	9b01      	ldr	r3, [sp, #4]
 80047a4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80047a6:	f7ff ffbb 	bl	8004720 <HAL_UARTEx_RxEventCallback>
 80047aa:	b003      	add	sp, #12
 80047ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80047b0:	b939      	cbnz	r1, 80047c2 <UART_Receive_IT.part.0.isra.0+0xa0>
 80047b2:	6901      	ldr	r1, [r0, #16]
 80047b4:	b929      	cbnz	r1, 80047c2 <UART_Receive_IT.part.0.isra.0+0xa0>
 80047b6:	6852      	ldr	r2, [r2, #4]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047be:	3301      	adds	r3, #1
 80047c0:	e7be      	b.n	8004740 <UART_Receive_IT.part.0.isra.0+0x1e>
 80047c2:	6852      	ldr	r2, [r2, #4]
 80047c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047c8:	e7f7      	b.n	80047ba <UART_Receive_IT.part.0.isra.0+0x98>
 80047ca:	f7fe f8bf 	bl	800294c <HAL_UART_RxCpltCallback>
 80047ce:	e7ec      	b.n	80047aa <UART_Receive_IT.part.0.isra.0+0x88>

080047d0 <HAL_UART_IRQHandler>:
 80047d0:	6803      	ldr	r3, [r0, #0]
 80047d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4604      	mov	r4, r0
 80047d8:	f012 0f0f 	tst.w	r2, #15
 80047dc:	68d9      	ldr	r1, [r3, #12]
 80047de:	695d      	ldr	r5, [r3, #20]
 80047e0:	d10c      	bne.n	80047fc <HAL_UART_IRQHandler+0x2c>
 80047e2:	0695      	lsls	r5, r2, #26
 80047e4:	d570      	bpl.n	80048c8 <HAL_UART_IRQHandler+0xf8>
 80047e6:	068d      	lsls	r5, r1, #26
 80047e8:	d56e      	bpl.n	80048c8 <HAL_UART_IRQHandler+0xf8>
 80047ea:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80047ee:	2b22      	cmp	r3, #34	; 0x22
 80047f0:	d164      	bne.n	80048bc <HAL_UART_IRQHandler+0xec>
 80047f2:	b003      	add	sp, #12
 80047f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047f8:	f7ff bf93 	b.w	8004722 <UART_Receive_IT.part.0.isra.0>
 80047fc:	f005 0001 	and.w	r0, r5, #1
 8004800:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8004804:	4305      	orrs	r5, r0
 8004806:	d05f      	beq.n	80048c8 <HAL_UART_IRQHandler+0xf8>
 8004808:	07d5      	lsls	r5, r2, #31
 800480a:	d505      	bpl.n	8004818 <HAL_UART_IRQHandler+0x48>
 800480c:	05cb      	lsls	r3, r1, #23
 800480e:	bf42      	ittt	mi
 8004810:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8004812:	f043 0301 	orrmi.w	r3, r3, #1
 8004816:	6463      	strmi	r3, [r4, #68]	; 0x44
 8004818:	0755      	lsls	r5, r2, #29
 800481a:	d504      	bpl.n	8004826 <HAL_UART_IRQHandler+0x56>
 800481c:	b118      	cbz	r0, 8004826 <HAL_UART_IRQHandler+0x56>
 800481e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004820:	f043 0302 	orr.w	r3, r3, #2
 8004824:	6463      	str	r3, [r4, #68]	; 0x44
 8004826:	0793      	lsls	r3, r2, #30
 8004828:	d504      	bpl.n	8004834 <HAL_UART_IRQHandler+0x64>
 800482a:	b118      	cbz	r0, 8004834 <HAL_UART_IRQHandler+0x64>
 800482c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800482e:	f043 0304 	orr.w	r3, r3, #4
 8004832:	6463      	str	r3, [r4, #68]	; 0x44
 8004834:	0715      	lsls	r5, r2, #28
 8004836:	d507      	bpl.n	8004848 <HAL_UART_IRQHandler+0x78>
 8004838:	f001 0320 	and.w	r3, r1, #32
 800483c:	4303      	orrs	r3, r0
 800483e:	bf1e      	ittt	ne
 8004840:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8004842:	f043 0308 	orrne.w	r3, r3, #8
 8004846:	6463      	strne	r3, [r4, #68]	; 0x44
 8004848:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800484a:	2b00      	cmp	r3, #0
 800484c:	d036      	beq.n	80048bc <HAL_UART_IRQHandler+0xec>
 800484e:	0690      	lsls	r0, r2, #26
 8004850:	d508      	bpl.n	8004864 <HAL_UART_IRQHandler+0x94>
 8004852:	068a      	lsls	r2, r1, #26
 8004854:	d506      	bpl.n	8004864 <HAL_UART_IRQHandler+0x94>
 8004856:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800485a:	2b22      	cmp	r3, #34	; 0x22
 800485c:	d102      	bne.n	8004864 <HAL_UART_IRQHandler+0x94>
 800485e:	4620      	mov	r0, r4
 8004860:	f7ff ff5f 	bl	8004722 <UART_Receive_IT.part.0.isra.0>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	4620      	mov	r0, r4
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	f005 0508 	and.w	r5, r5, #8
 8004874:	431d      	orrs	r5, r3
 8004876:	d023      	beq.n	80048c0 <HAL_UART_IRQHandler+0xf0>
 8004878:	f7ff fe30 	bl	80044dc <UART_EndRxTransfer>
 800487c:	6822      	ldr	r2, [r4, #0]
 800487e:	6953      	ldr	r3, [r2, #20]
 8004880:	065b      	lsls	r3, r3, #25
 8004882:	d518      	bpl.n	80048b6 <HAL_UART_IRQHandler+0xe6>
 8004884:	f102 0314 	add.w	r3, r2, #20
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004890:	f102 0014 	add.w	r0, r2, #20
 8004894:	e840 3100 	strex	r1, r3, [r0]
 8004898:	2900      	cmp	r1, #0
 800489a:	d1f3      	bne.n	8004884 <HAL_UART_IRQHandler+0xb4>
 800489c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800489e:	b150      	cbz	r0, 80048b6 <HAL_UART_IRQHandler+0xe6>
 80048a0:	4b73      	ldr	r3, [pc, #460]	; (8004a70 <HAL_UART_IRQHandler+0x2a0>)
 80048a2:	6343      	str	r3, [r0, #52]	; 0x34
 80048a4:	f7fe fb30 	bl	8002f08 <HAL_DMA_Abort_IT>
 80048a8:	b140      	cbz	r0, 80048bc <HAL_UART_IRQHandler+0xec>
 80048aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80048ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80048ae:	b003      	add	sp, #12
 80048b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048b4:	4718      	bx	r3
 80048b6:	4620      	mov	r0, r4
 80048b8:	f7ff ff29 	bl	800470e <HAL_UART_ErrorCallback>
 80048bc:	b003      	add	sp, #12
 80048be:	bd30      	pop	{r4, r5, pc}
 80048c0:	f7ff ff25 	bl	800470e <HAL_UART_ErrorCallback>
 80048c4:	6465      	str	r5, [r4, #68]	; 0x44
 80048c6:	e7f9      	b.n	80048bc <HAL_UART_IRQHandler+0xec>
 80048c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80048ca:	2801      	cmp	r0, #1
 80048cc:	f040 8094 	bne.w	80049f8 <HAL_UART_IRQHandler+0x228>
 80048d0:	06d5      	lsls	r5, r2, #27
 80048d2:	f140 8091 	bpl.w	80049f8 <HAL_UART_IRQHandler+0x228>
 80048d6:	06c8      	lsls	r0, r1, #27
 80048d8:	f140 808e 	bpl.w	80049f8 <HAL_UART_IRQHandler+0x228>
 80048dc:	2200      	movs	r2, #0
 80048de:	9201      	str	r2, [sp, #4]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	9201      	str	r2, [sp, #4]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	9201      	str	r2, [sp, #4]
 80048e8:	9a01      	ldr	r2, [sp, #4]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	0655      	lsls	r5, r2, #25
 80048ee:	d54d      	bpl.n	800498c <HAL_UART_IRQHandler+0x1bc>
 80048f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80048f2:	680a      	ldr	r2, [r1, #0]
 80048f4:	6852      	ldr	r2, [r2, #4]
 80048f6:	b292      	uxth	r2, r2
 80048f8:	2a00      	cmp	r2, #0
 80048fa:	d0df      	beq.n	80048bc <HAL_UART_IRQHandler+0xec>
 80048fc:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80048fe:	4290      	cmp	r0, r2
 8004900:	d9dc      	bls.n	80048bc <HAL_UART_IRQHandler+0xec>
 8004902:	85e2      	strh	r2, [r4, #46]	; 0x2e
 8004904:	698a      	ldr	r2, [r1, #24]
 8004906:	2a20      	cmp	r2, #32
 8004908:	d036      	beq.n	8004978 <HAL_UART_IRQHandler+0x1a8>
 800490a:	f103 020c 	add.w	r2, r3, #12
 800490e:	e852 2f00 	ldrex	r2, [r2]
 8004912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004916:	f103 000c 	add.w	r0, r3, #12
 800491a:	e840 2100 	strex	r1, r2, [r0]
 800491e:	2900      	cmp	r1, #0
 8004920:	d1f3      	bne.n	800490a <HAL_UART_IRQHandler+0x13a>
 8004922:	f103 0214 	add.w	r2, r3, #20
 8004926:	e852 2f00 	ldrex	r2, [r2]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	f103 0014 	add.w	r0, r3, #20
 8004932:	e840 2100 	strex	r1, r2, [r0]
 8004936:	2900      	cmp	r1, #0
 8004938:	d1f3      	bne.n	8004922 <HAL_UART_IRQHandler+0x152>
 800493a:	f103 0214 	add.w	r2, r3, #20
 800493e:	e852 2f00 	ldrex	r2, [r2]
 8004942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004946:	f103 0014 	add.w	r0, r3, #20
 800494a:	e840 2100 	strex	r1, r2, [r0]
 800494e:	2900      	cmp	r1, #0
 8004950:	d1f3      	bne.n	800493a <HAL_UART_IRQHandler+0x16a>
 8004952:	2220      	movs	r2, #32
 8004954:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004958:	6321      	str	r1, [r4, #48]	; 0x30
 800495a:	f103 020c 	add.w	r2, r3, #12
 800495e:	e852 2f00 	ldrex	r2, [r2]
 8004962:	f022 0210 	bic.w	r2, r2, #16
 8004966:	f103 000c 	add.w	r0, r3, #12
 800496a:	e840 2100 	strex	r1, r2, [r0]
 800496e:	2900      	cmp	r1, #0
 8004970:	d1f3      	bne.n	800495a <HAL_UART_IRQHandler+0x18a>
 8004972:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004974:	f7fe faa6 	bl	8002ec4 <HAL_DMA_Abort>
 8004978:	2302      	movs	r3, #2
 800497a:	6363      	str	r3, [r4, #52]	; 0x34
 800497c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800497e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004980:	1ac9      	subs	r1, r1, r3
 8004982:	b289      	uxth	r1, r1
 8004984:	4620      	mov	r0, r4
 8004986:	f7ff fecb 	bl	8004720 <HAL_UARTEx_RxEventCallback>
 800498a:	e797      	b.n	80048bc <HAL_UART_IRQHandler+0xec>
 800498c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800498e:	b28a      	uxth	r2, r1
 8004990:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004992:	b289      	uxth	r1, r1
 8004994:	2900      	cmp	r1, #0
 8004996:	d091      	beq.n	80048bc <HAL_UART_IRQHandler+0xec>
 8004998:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800499a:	1a89      	subs	r1, r1, r2
 800499c:	b289      	uxth	r1, r1
 800499e:	2900      	cmp	r1, #0
 80049a0:	d08c      	beq.n	80048bc <HAL_UART_IRQHandler+0xec>
 80049a2:	f103 020c 	add.w	r2, r3, #12
 80049a6:	e852 2f00 	ldrex	r2, [r2]
 80049aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049ae:	f103 050c 	add.w	r5, r3, #12
 80049b2:	e845 2000 	strex	r0, r2, [r5]
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d1f3      	bne.n	80049a2 <HAL_UART_IRQHandler+0x1d2>
 80049ba:	f103 0214 	add.w	r2, r3, #20
 80049be:	e852 2f00 	ldrex	r2, [r2]
 80049c2:	f022 0201 	bic.w	r2, r2, #1
 80049c6:	f103 0514 	add.w	r5, r3, #20
 80049ca:	e845 2000 	strex	r0, r2, [r5]
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d1f3      	bne.n	80049ba <HAL_UART_IRQHandler+0x1ea>
 80049d2:	2220      	movs	r2, #32
 80049d4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80049d8:	6320      	str	r0, [r4, #48]	; 0x30
 80049da:	f103 020c 	add.w	r2, r3, #12
 80049de:	e852 2f00 	ldrex	r2, [r2]
 80049e2:	f022 0210 	bic.w	r2, r2, #16
 80049e6:	f103 050c 	add.w	r5, r3, #12
 80049ea:	e845 2000 	strex	r0, r2, [r5]
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d1f3      	bne.n	80049da <HAL_UART_IRQHandler+0x20a>
 80049f2:	2302      	movs	r3, #2
 80049f4:	6363      	str	r3, [r4, #52]	; 0x34
 80049f6:	e7c5      	b.n	8004984 <HAL_UART_IRQHandler+0x1b4>
 80049f8:	0610      	lsls	r0, r2, #24
 80049fa:	d528      	bpl.n	8004a4e <HAL_UART_IRQHandler+0x27e>
 80049fc:	060d      	lsls	r5, r1, #24
 80049fe:	d526      	bpl.n	8004a4e <HAL_UART_IRQHandler+0x27e>
 8004a00:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004a04:	2a21      	cmp	r2, #33	; 0x21
 8004a06:	f47f af59 	bne.w	80048bc <HAL_UART_IRQHandler+0xec>
 8004a0a:	68a1      	ldr	r1, [r4, #8]
 8004a0c:	6a22      	ldr	r2, [r4, #32]
 8004a0e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004a12:	d117      	bne.n	8004a44 <HAL_UART_IRQHandler+0x274>
 8004a14:	6921      	ldr	r1, [r4, #16]
 8004a16:	b9a9      	cbnz	r1, 8004a44 <HAL_UART_IRQHandler+0x274>
 8004a18:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004a1c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004a20:	6059      	str	r1, [r3, #4]
 8004a22:	6222      	str	r2, [r4, #32]
 8004a24:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004a26:	3a01      	subs	r2, #1
 8004a28:	b292      	uxth	r2, r2
 8004a2a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004a2c:	2a00      	cmp	r2, #0
 8004a2e:	f47f af45 	bne.w	80048bc <HAL_UART_IRQHandler+0xec>
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a40:	60da      	str	r2, [r3, #12]
 8004a42:	e73b      	b.n	80048bc <HAL_UART_IRQHandler+0xec>
 8004a44:	1c51      	adds	r1, r2, #1
 8004a46:	6221      	str	r1, [r4, #32]
 8004a48:	7812      	ldrb	r2, [r2, #0]
 8004a4a:	605a      	str	r2, [r3, #4]
 8004a4c:	e7ea      	b.n	8004a24 <HAL_UART_IRQHandler+0x254>
 8004a4e:	0650      	lsls	r0, r2, #25
 8004a50:	f57f af34 	bpl.w	80048bc <HAL_UART_IRQHandler+0xec>
 8004a54:	064a      	lsls	r2, r1, #25
 8004a56:	f57f af31 	bpl.w	80048bc <HAL_UART_IRQHandler+0xec>
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	2320      	movs	r3, #32
 8004a66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004a6a:	f7ff fe4f 	bl	800470c <HAL_UART_TxCpltCallback>
 8004a6e:	e725      	b.n	80048bc <HAL_UART_IRQHandler+0xec>
 8004a70:	08004711 	.word	0x08004711

08004a74 <UART_Start_Receive_IT>:
 8004a74:	2300      	movs	r3, #0
 8004a76:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8004a78:	6443      	str	r3, [r0, #68]	; 0x44
 8004a7a:	2322      	movs	r3, #34	; 0x22
 8004a7c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8004a7e:	6902      	ldr	r2, [r0, #16]
 8004a80:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8004a84:	6281      	str	r1, [r0, #40]	; 0x28
 8004a86:	6803      	ldr	r3, [r0, #0]
 8004a88:	b11a      	cbz	r2, 8004a92 <UART_Start_Receive_IT+0x1e>
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a90:	60da      	str	r2, [r3, #12]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	2000      	movs	r0, #0
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	615a      	str	r2, [r3, #20]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	f042 0220 	orr.w	r2, r2, #32
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_UART_Receive_IT>:
 8004aa6:	b470      	push	{r4, r5, r6}
 8004aa8:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8004aac:	2e20      	cmp	r6, #32
 8004aae:	d106      	bne.n	8004abe <HAL_UART_Receive_IT+0x18>
 8004ab0:	b141      	cbz	r1, 8004ac4 <HAL_UART_Receive_IT+0x1e>
 8004ab2:	b13a      	cbz	r2, 8004ac4 <HAL_UART_Receive_IT+0x1e>
 8004ab4:	2400      	movs	r4, #0
 8004ab6:	6304      	str	r4, [r0, #48]	; 0x30
 8004ab8:	bc70      	pop	{r4, r5, r6}
 8004aba:	f7ff bfdb 	b.w	8004a74 <UART_Start_Receive_IT>
 8004abe:	2002      	movs	r0, #2
 8004ac0:	bc70      	pop	{r4, r5, r6}
 8004ac2:	4770      	bx	lr
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	e7fb      	b.n	8004ac0 <HAL_UART_Receive_IT+0x1a>

08004ac8 <__libc_init_array>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	2600      	movs	r6, #0
 8004acc:	4d0c      	ldr	r5, [pc, #48]	; (8004b00 <__libc_init_array+0x38>)
 8004ace:	4c0d      	ldr	r4, [pc, #52]	; (8004b04 <__libc_init_array+0x3c>)
 8004ad0:	1b64      	subs	r4, r4, r5
 8004ad2:	10a4      	asrs	r4, r4, #2
 8004ad4:	42a6      	cmp	r6, r4
 8004ad6:	d109      	bne.n	8004aec <__libc_init_array+0x24>
 8004ad8:	f000 f822 	bl	8004b20 <_init>
 8004adc:	2600      	movs	r6, #0
 8004ade:	4d0a      	ldr	r5, [pc, #40]	; (8004b08 <__libc_init_array+0x40>)
 8004ae0:	4c0a      	ldr	r4, [pc, #40]	; (8004b0c <__libc_init_array+0x44>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	42a6      	cmp	r6, r4
 8004ae8:	d105      	bne.n	8004af6 <__libc_init_array+0x2e>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af0:	4798      	blx	r3
 8004af2:	3601      	adds	r6, #1
 8004af4:	e7ee      	b.n	8004ad4 <__libc_init_array+0xc>
 8004af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afa:	4798      	blx	r3
 8004afc:	3601      	adds	r6, #1
 8004afe:	e7f2      	b.n	8004ae6 <__libc_init_array+0x1e>
 8004b00:	08004c20 	.word	0x08004c20
 8004b04:	08004c20 	.word	0x08004c20
 8004b08:	08004c20 	.word	0x08004c20
 8004b0c:	08004c24 	.word	0x08004c24

08004b10 <memset>:
 8004b10:	4603      	mov	r3, r0
 8004b12:	4402      	add	r2, r0
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d100      	bne.n	8004b1a <memset+0xa>
 8004b18:	4770      	bx	lr
 8004b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1e:	e7f9      	b.n	8004b14 <memset+0x4>

08004b20 <_init>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr

08004b2c <_fini>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	bf00      	nop
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr
